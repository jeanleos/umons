// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module normalize_array_ap_fixed_16u_array_ap_fixed_4_2_5_3_0_16u_config11_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        res_V_data_10_V_din,
        res_V_data_10_V_full_n,
        res_V_data_10_V_write,
        res_V_data_11_V_din,
        res_V_data_11_V_full_n,
        res_V_data_11_V_write,
        res_V_data_12_V_din,
        res_V_data_12_V_full_n,
        res_V_data_12_V_write,
        res_V_data_13_V_din,
        res_V_data_13_V_full_n,
        res_V_data_13_V_write,
        res_V_data_14_V_din,
        res_V_data_14_V_full_n,
        res_V_data_14_V_write,
        res_V_data_15_V_din,
        res_V_data_15_V_full_n,
        res_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [3:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [3:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [3:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [3:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [3:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [3:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [3:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [3:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [3:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [3:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [3:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [3:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [3:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [3:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [3:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [3:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
output  [3:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [3:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [3:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [3:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [3:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [3:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [3:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [3:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [3:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [3:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output  [3:0] res_V_data_10_V_din;
input   res_V_data_10_V_full_n;
output   res_V_data_10_V_write;
output  [3:0] res_V_data_11_V_din;
input   res_V_data_11_V_full_n;
output   res_V_data_11_V_write;
output  [3:0] res_V_data_12_V_din;
input   res_V_data_12_V_full_n;
output   res_V_data_12_V_write;
output  [3:0] res_V_data_13_V_din;
input   res_V_data_13_V_full_n;
output   res_V_data_13_V_write;
output  [3:0] res_V_data_14_V_din;
input   res_V_data_14_V_full_n;
output   res_V_data_14_V_write;
output  [3:0] res_V_data_15_V_din;
input   res_V_data_15_V_full_n;
output   res_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg res_V_data_10_V_write;
reg res_V_data_11_V_write;
reg res_V_data_12_V_write;
reg res_V_data_13_V_write;
reg res_V_data_14_V_write;
reg res_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln25_reg_783;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln25_reg_783_pp0_iter2_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg    res_V_data_10_V_blk_n;
reg    res_V_data_11_V_blk_n;
reg    res_V_data_12_V_blk_n;
reg    res_V_data_13_V_blk_n;
reg    res_V_data_14_V_blk_n;
reg    res_V_data_15_V_blk_n;
reg   [10:0] i_0_reg_220;
wire   [0:0] icmp_ln25_fu_231_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op46;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    io_acc_block_signal_op138;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln25_reg_783_pp0_iter1_reg;
wire   [10:0] i_fu_237_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [3:0] tmp_data_V_3_reg_792;
reg  signed [3:0] tmp_data_V_9_reg_797;
reg  signed [3:0] tmp_data_V_10_reg_802;
reg  signed [3:0] tmp_data_V_12_reg_807;
reg   [3:0] tmp_data_V_13_reg_813;
reg  signed [3:0] tmp_data_V_14_reg_818;
reg   [3:0] tmp_data_0_V_reg_823;
reg   [3:0] tmp_data_0_V_reg_823_pp0_iter2_reg;
reg   [3:0] tmp_data_1_V_reg_828;
reg   [3:0] tmp_data_1_V_reg_828_pp0_iter2_reg;
reg   [3:0] tmp_data_2_V_reg_833;
reg   [3:0] tmp_data_2_V_reg_833_pp0_iter2_reg;
wire   [2:0] trunc_ln1192_fu_383_p1;
reg   [2:0] trunc_ln1192_reg_838;
reg   [3:0] tmp_data_4_V_reg_843;
reg   [3:0] tmp_data_4_V_reg_843_pp0_iter2_reg;
reg   [3:0] tmp_data_5_V_reg_848;
reg   [3:0] tmp_data_5_V_reg_848_pp0_iter2_reg;
reg   [3:0] tmp_data_6_V_reg_853;
reg   [3:0] tmp_data_6_V_reg_853_pp0_iter2_reg;
reg   [3:0] tmp_data_7_V_reg_858;
reg   [3:0] tmp_data_7_V_reg_858_pp0_iter2_reg;
reg   [3:0] tmp_data_8_V_reg_863;
reg   [3:0] tmp_data_8_V_reg_863_pp0_iter2_reg;
wire   [2:0] trunc_ln1192_6_fu_515_p1;
reg   [2:0] trunc_ln1192_6_reg_868;
wire   [2:0] trunc_ln1192_7_fu_519_p1;
reg   [2:0] trunc_ln1192_7_reg_873;
reg   [3:0] tmp_data_11_V_reg_878;
reg   [3:0] tmp_data_11_V_reg_878_pp0_iter2_reg;
wire   [2:0] trunc_ln1192_8_fu_543_p1;
reg   [2:0] trunc_ln1192_8_reg_883;
wire   [2:0] trunc_ln1192_9_fu_547_p1;
reg   [2:0] trunc_ln1192_9_reg_888;
reg   [3:0] tmp_data_15_V_reg_893;
reg   [3:0] tmp_data_15_V_reg_893_pp0_iter2_reg;
reg   [3:0] tmp_data_3_V_reg_898;
reg   [3:0] tmp_data_9_V_reg_903;
reg   [3:0] tmp_data_10_V_reg_908;
reg   [3:0] tmp_data_12_V_reg_913;
reg   [3:0] tmp_data_13_V_reg_918;
reg   [3:0] tmp_data_14_V_reg_923;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] shl_ln_fu_307_p3;
wire  signed [5:0] sext_ln1192_fu_315_p1;
wire   [5:0] add_ln1192_fu_319_p2;
wire   [4:0] shl_ln1118_s_fu_335_p3;
wire  signed [5:0] sext_ln1192_21_fu_343_p1;
wire   [5:0] add_ln1192_28_fu_347_p2;
wire  signed [5:0] sext_ln1192_22_fu_363_p1;
wire   [5:0] add_ln1192_29_fu_367_p2;
wire   [4:0] shl_ln1118_12_fu_387_p3;
wire  signed [5:0] sext_ln1192_24_fu_395_p1;
wire   [5:0] add_ln1192_31_fu_399_p2;
wire   [4:0] shl_ln1118_13_fu_415_p3;
wire  signed [5:0] sext_ln1118_fu_423_p1;
wire   [5:0] sub_ln1192_7_fu_427_p2;
wire   [4:0] shl_ln1118_14_fu_443_p3;
wire  signed [5:0] sext_ln1192_25_fu_451_p1;
wire   [5:0] add_ln1192_33_fu_455_p2;
wire   [5:0] shl_ln1118_15_fu_471_p3;
wire   [5:0] add_ln1192_34_fu_479_p2;
wire  signed [5:0] sext_ln1192_26_fu_495_p1;
wire   [5:0] add_ln1192_35_fu_499_p2;
wire  signed [3:0] trunc_ln1192_6_fu_515_p0;
wire  signed [3:0] trunc_ln1192_7_fu_519_p0;
wire  signed [5:0] sext_ln1192_29_fu_523_p1;
wire   [5:0] add_ln1192_38_fu_527_p2;
wire  signed [3:0] trunc_ln1192_9_fu_547_p0;
wire   [5:0] shl_ln1118_18_fu_551_p3;
wire   [5:0] add_ln1192_42_fu_559_p2;
wire   [4:0] shl_ln1118_11_fu_582_p3;
wire  signed [5:0] sext_ln1192_23_fu_589_p1;
wire   [5:0] shl_ln3_fu_575_p3;
wire   [5:0] sub_ln1192_fu_593_p2;
wire   [5:0] add_ln1192_30_fu_599_p2;
wire   [5:0] shl_ln1192_5_fu_618_p3;
wire  signed [5:0] sext_ln1192_27_fu_615_p1;
wire   [5:0] sub_ln1192_8_fu_625_p2;
wire   [5:0] add_ln1192_36_fu_631_p2;
wire   [5:0] shl_ln1192_6_fu_650_p3;
wire  signed [5:0] sext_ln1192_28_fu_647_p1;
wire   [5:0] sub_ln1192_9_fu_657_p2;
wire   [5:0] add_ln1192_37_fu_663_p2;
wire   [5:0] shl_ln1118_16_fu_682_p3;
wire  signed [5:0] sext_ln1192_30_fu_679_p1;
wire   [5:0] sub_ln1192_10_fu_689_p2;
wire   [5:0] add_ln1192_39_fu_695_p2;
wire   [4:0] shl_ln1118_17_fu_718_p3;
wire   [5:0] shl_ln1192_7_fu_711_p3;
wire  signed [5:0] sext_ln1192_31_fu_725_p1;
wire   [5:0] sub_ln1192_11_fu_729_p2;
wire   [5:0] add_ln1192_40_fu_735_p2;
wire   [5:0] shl_ln1192_8_fu_754_p3;
wire  signed [5:0] sext_ln1192_32_fu_751_p1;
wire   [5:0] sub_ln1192_12_fu_761_p2;
wire   [5:0] add_ln1192_41_fu_767_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_fu_231_p2 == 1'd0))) begin
        i_0_reg_220 <= i_fu_237_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_220 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln25_reg_783 <= icmp_ln25_fu_231_p2;
        icmp_ln25_reg_783_pp0_iter1_reg <= icmp_ln25_reg_783;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln25_reg_783_pp0_iter2_reg <= icmp_ln25_reg_783_pp0_iter1_reg;
        tmp_data_0_V_reg_823_pp0_iter2_reg <= tmp_data_0_V_reg_823;
        tmp_data_11_V_reg_878_pp0_iter2_reg <= tmp_data_11_V_reg_878;
        tmp_data_15_V_reg_893_pp0_iter2_reg <= tmp_data_15_V_reg_893;
        tmp_data_1_V_reg_828_pp0_iter2_reg <= tmp_data_1_V_reg_828;
        tmp_data_2_V_reg_833_pp0_iter2_reg <= tmp_data_2_V_reg_833;
        tmp_data_4_V_reg_843_pp0_iter2_reg <= tmp_data_4_V_reg_843;
        tmp_data_5_V_reg_848_pp0_iter2_reg <= tmp_data_5_V_reg_848;
        tmp_data_6_V_reg_853_pp0_iter2_reg <= tmp_data_6_V_reg_853;
        tmp_data_7_V_reg_858_pp0_iter2_reg <= tmp_data_7_V_reg_858;
        tmp_data_8_V_reg_863_pp0_iter2_reg <= tmp_data_8_V_reg_863;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        tmp_data_0_V_reg_823 <= {{add_ln1192_fu_319_p2[5:2]}};
        tmp_data_11_V_reg_878 <= {{add_ln1192_38_fu_527_p2[5:2]}};
        tmp_data_15_V_reg_893 <= {{add_ln1192_42_fu_559_p2[5:2]}};
        tmp_data_1_V_reg_828 <= {{add_ln1192_28_fu_347_p2[5:2]}};
        tmp_data_2_V_reg_833 <= {{add_ln1192_29_fu_367_p2[5:2]}};
        tmp_data_4_V_reg_843 <= {{add_ln1192_31_fu_399_p2[5:2]}};
        tmp_data_5_V_reg_848 <= {{sub_ln1192_7_fu_427_p2[5:2]}};
        tmp_data_6_V_reg_853 <= {{add_ln1192_33_fu_455_p2[5:2]}};
        tmp_data_7_V_reg_858 <= {{add_ln1192_34_fu_479_p2[5:2]}};
        tmp_data_8_V_reg_863 <= {{add_ln1192_35_fu_499_p2[5:2]}};
        tmp_data_V_10_reg_802 <= data_V_data_10_V_dout;
        tmp_data_V_12_reg_807 <= data_V_data_12_V_dout;
        tmp_data_V_13_reg_813 <= data_V_data_13_V_dout;
        tmp_data_V_14_reg_818 <= data_V_data_14_V_dout;
        tmp_data_V_3_reg_792 <= data_V_data_3_V_dout;
        tmp_data_V_9_reg_797 <= data_V_data_9_V_dout;
        trunc_ln1192_6_reg_868 <= trunc_ln1192_6_fu_515_p1;
        trunc_ln1192_7_reg_873 <= trunc_ln1192_7_fu_519_p1;
        trunc_ln1192_8_reg_883 <= trunc_ln1192_8_fu_543_p1;
        trunc_ln1192_9_reg_888 <= trunc_ln1192_9_fu_547_p1;
        trunc_ln1192_reg_838 <= trunc_ln1192_fu_383_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_783_pp0_iter1_reg == 1'd0))) begin
        tmp_data_10_V_reg_908 <= {{add_ln1192_37_fu_663_p2[5:2]}};
        tmp_data_12_V_reg_913 <= {{add_ln1192_39_fu_695_p2[5:2]}};
        tmp_data_13_V_reg_918 <= {{add_ln1192_40_fu_735_p2[5:2]}};
        tmp_data_14_V_reg_923 <= {{add_ln1192_41_fu_767_p2[5:2]}};
        tmp_data_3_V_reg_898 <= {{add_ln1192_30_fu_599_p2[5:2]}};
        tmp_data_9_V_reg_903 <= {{add_ln1192_36_fu_631_p2[5:2]}};
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_231_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_783 == 1'd0))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_10_V_blk_n = res_V_data_10_V_full_n;
    end else begin
        res_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0))) begin
        res_V_data_10_V_write = 1'b1;
    end else begin
        res_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_11_V_blk_n = res_V_data_11_V_full_n;
    end else begin
        res_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0))) begin
        res_V_data_11_V_write = 1'b1;
    end else begin
        res_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_12_V_blk_n = res_V_data_12_V_full_n;
    end else begin
        res_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0))) begin
        res_V_data_12_V_write = 1'b1;
    end else begin
        res_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_13_V_blk_n = res_V_data_13_V_full_n;
    end else begin
        res_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0))) begin
        res_V_data_13_V_write = 1'b1;
    end else begin
        res_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_14_V_blk_n = res_V_data_14_V_full_n;
    end else begin
        res_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0))) begin
        res_V_data_14_V_write = 1'b1;
    end else begin
        res_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_15_V_blk_n = res_V_data_15_V_full_n;
    end else begin
        res_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0))) begin
        res_V_data_15_V_write = 1'b1;
    end else begin
        res_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_231_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_231_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_28_fu_347_p2 = ($signed(6'd48) + $signed(sext_ln1192_21_fu_343_p1));

assign add_ln1192_29_fu_367_p2 = ($signed(6'd48) + $signed(sext_ln1192_22_fu_363_p1));

assign add_ln1192_30_fu_599_p2 = ($signed(6'd52) + $signed(sub_ln1192_fu_593_p2));

assign add_ln1192_31_fu_399_p2 = ($signed(6'd48) + $signed(sext_ln1192_24_fu_395_p1));

assign add_ln1192_33_fu_455_p2 = ($signed(6'd52) + $signed(sext_ln1192_25_fu_451_p1));

assign add_ln1192_34_fu_479_p2 = ($signed(6'd56) + $signed(shl_ln1118_15_fu_471_p3));

assign add_ln1192_35_fu_499_p2 = ($signed(6'd48) + $signed(sext_ln1192_26_fu_495_p1));

assign add_ln1192_36_fu_631_p2 = ($signed(6'd52) + $signed(sub_ln1192_8_fu_625_p2));

assign add_ln1192_37_fu_663_p2 = ($signed(6'd52) + $signed(sub_ln1192_9_fu_657_p2));

assign add_ln1192_38_fu_527_p2 = ($signed(6'd48) + $signed(sext_ln1192_29_fu_523_p1));

assign add_ln1192_39_fu_695_p2 = ($signed(6'd48) + $signed(sub_ln1192_10_fu_689_p2));

assign add_ln1192_40_fu_735_p2 = ($signed(6'd52) + $signed(sub_ln1192_11_fu_729_p2));

assign add_ln1192_41_fu_767_p2 = ($signed(6'd52) + $signed(sub_ln1192_12_fu_761_p2));

assign add_ln1192_42_fu_559_p2 = ($signed(6'd48) + $signed(shl_ln1118_18_fu_551_p3));

assign add_ln1192_fu_319_p2 = ($signed(6'd48) + $signed(sext_ln1192_fu_315_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((io_acc_block_signal_op138 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op46 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln25_reg_783 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((io_acc_block_signal_op138 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op46 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln25_reg_783 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((io_acc_block_signal_op138 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op46 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln25_reg_783 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((io_acc_block_signal_op46 == 1'b0) & (icmp_ln25_reg_783 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((io_acc_block_signal_op138 == 1'b0) & (icmp_ln25_reg_783_pp0_iter2_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_fu_237_p2 = (i_0_reg_220 + 11'd1);

assign icmp_ln25_fu_231_p2 = ((i_0_reg_220 == 11'd1024) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op138 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_15_V_full_n & res_V_data_14_V_full_n & res_V_data_13_V_full_n & res_V_data_12_V_full_n & res_V_data_11_V_full_n & res_V_data_10_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op46 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign res_V_data_0_V_din = tmp_data_0_V_reg_823_pp0_iter2_reg;

assign res_V_data_10_V_din = tmp_data_10_V_reg_908;

assign res_V_data_11_V_din = tmp_data_11_V_reg_878_pp0_iter2_reg;

assign res_V_data_12_V_din = tmp_data_12_V_reg_913;

assign res_V_data_13_V_din = tmp_data_13_V_reg_918;

assign res_V_data_14_V_din = tmp_data_14_V_reg_923;

assign res_V_data_15_V_din = tmp_data_15_V_reg_893_pp0_iter2_reg;

assign res_V_data_1_V_din = tmp_data_1_V_reg_828_pp0_iter2_reg;

assign res_V_data_2_V_din = tmp_data_2_V_reg_833_pp0_iter2_reg;

assign res_V_data_3_V_din = tmp_data_3_V_reg_898;

assign res_V_data_4_V_din = tmp_data_4_V_reg_843_pp0_iter2_reg;

assign res_V_data_5_V_din = tmp_data_5_V_reg_848_pp0_iter2_reg;

assign res_V_data_6_V_din = tmp_data_6_V_reg_853_pp0_iter2_reg;

assign res_V_data_7_V_din = tmp_data_7_V_reg_858_pp0_iter2_reg;

assign res_V_data_8_V_din = tmp_data_8_V_reg_863_pp0_iter2_reg;

assign res_V_data_9_V_din = tmp_data_9_V_reg_903;

assign sext_ln1118_fu_423_p1 = $signed(shl_ln1118_13_fu_415_p3);

assign sext_ln1192_21_fu_343_p1 = $signed(shl_ln1118_s_fu_335_p3);

assign sext_ln1192_22_fu_363_p1 = $signed(data_V_data_2_V_dout);

assign sext_ln1192_23_fu_589_p1 = $signed(shl_ln1118_11_fu_582_p3);

assign sext_ln1192_24_fu_395_p1 = $signed(shl_ln1118_12_fu_387_p3);

assign sext_ln1192_25_fu_451_p1 = $signed(shl_ln1118_14_fu_443_p3);

assign sext_ln1192_26_fu_495_p1 = $signed(data_V_data_8_V_dout);

assign sext_ln1192_27_fu_615_p1 = tmp_data_V_9_reg_797;

assign sext_ln1192_28_fu_647_p1 = tmp_data_V_10_reg_802;

assign sext_ln1192_29_fu_523_p1 = $signed(data_V_data_11_V_dout);

assign sext_ln1192_30_fu_679_p1 = tmp_data_V_12_reg_807;

assign sext_ln1192_31_fu_725_p1 = $signed(shl_ln1118_17_fu_718_p3);

assign sext_ln1192_32_fu_751_p1 = tmp_data_V_14_reg_818;

assign sext_ln1192_fu_315_p1 = $signed(shl_ln_fu_307_p3);

assign shl_ln1118_11_fu_582_p3 = {{tmp_data_V_3_reg_792}, {1'd0}};

assign shl_ln1118_12_fu_387_p3 = {{data_V_data_4_V_dout}, {1'd0}};

assign shl_ln1118_13_fu_415_p3 = {{data_V_data_5_V_dout}, {1'd0}};

assign shl_ln1118_14_fu_443_p3 = {{data_V_data_6_V_dout}, {1'd0}};

assign shl_ln1118_15_fu_471_p3 = {{data_V_data_7_V_dout}, {2'd0}};

assign shl_ln1118_16_fu_682_p3 = {{tmp_data_V_12_reg_807}, {2'd0}};

assign shl_ln1118_17_fu_718_p3 = {{tmp_data_V_13_reg_813}, {1'd0}};

assign shl_ln1118_18_fu_551_p3 = {{data_V_data_15_V_dout}, {2'd0}};

assign shl_ln1118_s_fu_335_p3 = {{data_V_data_1_V_dout}, {1'd0}};

assign shl_ln1192_5_fu_618_p3 = {{trunc_ln1192_6_reg_868}, {3'd0}};

assign shl_ln1192_6_fu_650_p3 = {{trunc_ln1192_7_reg_873}, {3'd0}};

assign shl_ln1192_7_fu_711_p3 = {{trunc_ln1192_8_reg_883}, {3'd0}};

assign shl_ln1192_8_fu_754_p3 = {{trunc_ln1192_9_reg_888}, {3'd0}};

assign shl_ln3_fu_575_p3 = {{trunc_ln1192_reg_838}, {3'd0}};

assign shl_ln_fu_307_p3 = {{data_V_data_0_V_dout}, {1'd0}};

assign start_out = real_start;

assign sub_ln1192_10_fu_689_p2 = ($signed(shl_ln1118_16_fu_682_p3) - $signed(sext_ln1192_30_fu_679_p1));

assign sub_ln1192_11_fu_729_p2 = ($signed(shl_ln1192_7_fu_711_p3) - $signed(sext_ln1192_31_fu_725_p1));

assign sub_ln1192_12_fu_761_p2 = ($signed(shl_ln1192_8_fu_754_p3) - $signed(sext_ln1192_32_fu_751_p1));

assign sub_ln1192_7_fu_427_p2 = ($signed(6'd52) - $signed(sext_ln1118_fu_423_p1));

assign sub_ln1192_8_fu_625_p2 = ($signed(shl_ln1192_5_fu_618_p3) - $signed(sext_ln1192_27_fu_615_p1));

assign sub_ln1192_9_fu_657_p2 = ($signed(shl_ln1192_6_fu_650_p3) - $signed(sext_ln1192_28_fu_647_p1));

assign sub_ln1192_fu_593_p2 = ($signed(sext_ln1192_23_fu_589_p1) - $signed(shl_ln3_fu_575_p3));

assign trunc_ln1192_6_fu_515_p0 = data_V_data_9_V_dout;

assign trunc_ln1192_6_fu_515_p1 = trunc_ln1192_6_fu_515_p0[2:0];

assign trunc_ln1192_7_fu_519_p0 = data_V_data_10_V_dout;

assign trunc_ln1192_7_fu_519_p1 = trunc_ln1192_7_fu_519_p0[2:0];

assign trunc_ln1192_8_fu_543_p1 = data_V_data_13_V_dout[2:0];

assign trunc_ln1192_9_fu_547_p0 = data_V_data_14_V_dout;

assign trunc_ln1192_9_fu_547_p1 = trunc_ln1192_9_fu_547_p0[2:0];

assign trunc_ln1192_fu_383_p1 = data_V_data_3_V_dout[2:0];

endmodule //normalize_array_ap_fixed_16u_array_ap_fixed_4_2_5_3_0_16u_config11_s
