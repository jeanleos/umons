// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_resource_rf_leq_nin_ap_fixed_ap_fixed_16_6_5_3_0_config18_mult_0_0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kernel_data_V_5_0,
        kernel_data_V_5_1,
        kernel_data_V_5_2,
        kernel_data_V_5_3,
        kernel_data_V_5_4,
        kernel_data_V_5_5,
        kernel_data_V_5_6,
        kernel_data_V_5_7,
        kernel_data_V_5_8,
        kernel_data_V_5_9,
        kernel_data_V_5_10,
        kernel_data_V_5_11,
        kernel_data_V_5_12,
        kernel_data_V_5_13,
        kernel_data_V_5_14,
        kernel_data_V_5_15,
        kernel_data_V_5_16,
        kernel_data_V_5_17,
        kernel_data_V_5_18,
        kernel_data_V_5_19,
        kernel_data_V_5_20,
        kernel_data_V_5_21,
        kernel_data_V_5_22,
        kernel_data_V_5_23,
        kernel_data_V_5_24,
        kernel_data_V_5_25,
        kernel_data_V_5_26,
        kernel_data_V_5_27,
        kernel_data_V_5_28,
        kernel_data_V_5_29,
        kernel_data_V_5_30,
        kernel_data_V_5_31,
        kernel_data_V_5_32,
        kernel_data_V_5_33,
        kernel_data_V_5_34,
        kernel_data_V_5_35,
        kernel_data_V_5_36,
        kernel_data_V_5_37,
        kernel_data_V_5_38,
        kernel_data_V_5_39,
        kernel_data_V_5_40,
        kernel_data_V_5_41,
        kernel_data_V_5_42,
        kernel_data_V_5_43,
        kernel_data_V_5_44,
        kernel_data_V_5_45,
        kernel_data_V_5_46,
        kernel_data_V_5_47,
        kernel_data_V_5_48,
        kernel_data_V_5_49,
        kernel_data_V_5_50,
        kernel_data_V_5_51,
        kernel_data_V_5_52,
        kernel_data_V_5_53,
        kernel_data_V_5_54,
        kernel_data_V_5_55,
        kernel_data_V_5_56,
        kernel_data_V_5_57,
        kernel_data_V_5_58,
        kernel_data_V_5_59,
        kernel_data_V_5_60,
        kernel_data_V_5_61,
        kernel_data_V_5_62,
        kernel_data_V_5_63,
        kernel_data_V_5_64,
        kernel_data_V_5_65,
        kernel_data_V_5_66,
        kernel_data_V_5_67,
        kernel_data_V_5_68,
        kernel_data_V_5_69,
        kernel_data_V_5_70,
        kernel_data_V_5_71,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] kernel_data_V_5_0;
input  [15:0] kernel_data_V_5_1;
input  [15:0] kernel_data_V_5_2;
input  [15:0] kernel_data_V_5_3;
input  [15:0] kernel_data_V_5_4;
input  [15:0] kernel_data_V_5_5;
input  [15:0] kernel_data_V_5_6;
input  [15:0] kernel_data_V_5_7;
input  [15:0] kernel_data_V_5_8;
input  [15:0] kernel_data_V_5_9;
input  [15:0] kernel_data_V_5_10;
input  [15:0] kernel_data_V_5_11;
input  [15:0] kernel_data_V_5_12;
input  [15:0] kernel_data_V_5_13;
input  [15:0] kernel_data_V_5_14;
input  [15:0] kernel_data_V_5_15;
input  [15:0] kernel_data_V_5_16;
input  [15:0] kernel_data_V_5_17;
input  [15:0] kernel_data_V_5_18;
input  [15:0] kernel_data_V_5_19;
input  [15:0] kernel_data_V_5_20;
input  [15:0] kernel_data_V_5_21;
input  [15:0] kernel_data_V_5_22;
input  [15:0] kernel_data_V_5_23;
input  [15:0] kernel_data_V_5_24;
input  [15:0] kernel_data_V_5_25;
input  [15:0] kernel_data_V_5_26;
input  [15:0] kernel_data_V_5_27;
input  [15:0] kernel_data_V_5_28;
input  [15:0] kernel_data_V_5_29;
input  [15:0] kernel_data_V_5_30;
input  [15:0] kernel_data_V_5_31;
input  [15:0] kernel_data_V_5_32;
input  [15:0] kernel_data_V_5_33;
input  [15:0] kernel_data_V_5_34;
input  [15:0] kernel_data_V_5_35;
input  [15:0] kernel_data_V_5_36;
input  [15:0] kernel_data_V_5_37;
input  [15:0] kernel_data_V_5_38;
input  [15:0] kernel_data_V_5_39;
input  [15:0] kernel_data_V_5_40;
input  [15:0] kernel_data_V_5_41;
input  [15:0] kernel_data_V_5_42;
input  [15:0] kernel_data_V_5_43;
input  [15:0] kernel_data_V_5_44;
input  [15:0] kernel_data_V_5_45;
input  [15:0] kernel_data_V_5_46;
input  [15:0] kernel_data_V_5_47;
input  [15:0] kernel_data_V_5_48;
input  [15:0] kernel_data_V_5_49;
input  [15:0] kernel_data_V_5_50;
input  [15:0] kernel_data_V_5_51;
input  [15:0] kernel_data_V_5_52;
input  [15:0] kernel_data_V_5_53;
input  [15:0] kernel_data_V_5_54;
input  [15:0] kernel_data_V_5_55;
input  [15:0] kernel_data_V_5_56;
input  [15:0] kernel_data_V_5_57;
input  [15:0] kernel_data_V_5_58;
input  [15:0] kernel_data_V_5_59;
input  [15:0] kernel_data_V_5_60;
input  [15:0] kernel_data_V_5_61;
input  [15:0] kernel_data_V_5_62;
input  [15:0] kernel_data_V_5_63;
input  [15:0] kernel_data_V_5_64;
input  [15:0] kernel_data_V_5_65;
input  [15:0] kernel_data_V_5_66;
input  [15:0] kernel_data_V_5_67;
input  [15:0] kernel_data_V_5_68;
input  [15:0] kernel_data_V_5_69;
input  [15:0] kernel_data_V_5_70;
input  [15:0] kernel_data_V_5_71;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln46_fu_264_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] w18_V_address0;
reg    w18_V_ce0;
wire   [10:0] w18_V_q0;
reg   [6:0] in_index7_reg_209;
reg   [15:0] res_V_write_assign5_reg_239;
wire   [6:0] in_index_fu_258_p2;
reg   [6:0] in_index_reg_744;
reg   [0:0] icmp_ln46_reg_749;
reg   [0:0] icmp_ln46_reg_749_pp0_iter1_reg;
reg   [0:0] icmp_ln46_reg_749_pp0_iter2_reg;
reg   [0:0] icmp_ln46_reg_749_pp0_iter3_reg;
reg   [0:0] icmp_ln46_reg_749_pp0_iter4_reg;
wire   [15:0] tmp_fu_558_p74;
reg  signed [15:0] tmp_reg_753;
reg  signed [10:0] w18_V_load_reg_758;
wire  signed [25:0] grp_fu_733_p2;
reg  signed [25:0] r_V_reg_773;
wire   [15:0] acc_0_V_fu_723_p2;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [6:0] ap_phi_mux_in_index7_phi_fu_213_p6;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln59_fu_253_p1;
wire   [15:0] trunc_ln_fu_714_p4;
reg    grp_fu_733_ce;
reg   [15:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to4;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_177;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_return_preg = 16'd0;
end

dense_resource_rf_leq_nin_ap_fixed_ap_fixed_16_6_5_3_0_config18_mult_0_0_w18_V #(
    .DataWidth( 11 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
w18_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w18_V_address0),
    .ce0(w18_V_ce0),
    .q0(w18_V_q0)
);

myproject_axi_mux_727_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 16 ),
    .din65_WIDTH( 16 ),
    .din66_WIDTH( 16 ),
    .din67_WIDTH( 16 ),
    .din68_WIDTH( 16 ),
    .din69_WIDTH( 16 ),
    .din70_WIDTH( 16 ),
    .din71_WIDTH( 16 ),
    .din72_WIDTH( 7 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_727_16_1_1_U1413(
    .din0(kernel_data_V_5_0),
    .din1(kernel_data_V_5_1),
    .din2(kernel_data_V_5_2),
    .din3(kernel_data_V_5_3),
    .din4(kernel_data_V_5_4),
    .din5(kernel_data_V_5_5),
    .din6(kernel_data_V_5_6),
    .din7(kernel_data_V_5_7),
    .din8(kernel_data_V_5_8),
    .din9(kernel_data_V_5_9),
    .din10(kernel_data_V_5_10),
    .din11(kernel_data_V_5_11),
    .din12(kernel_data_V_5_12),
    .din13(kernel_data_V_5_13),
    .din14(kernel_data_V_5_14),
    .din15(kernel_data_V_5_15),
    .din16(kernel_data_V_5_16),
    .din17(kernel_data_V_5_17),
    .din18(kernel_data_V_5_18),
    .din19(kernel_data_V_5_19),
    .din20(kernel_data_V_5_20),
    .din21(kernel_data_V_5_21),
    .din22(kernel_data_V_5_22),
    .din23(kernel_data_V_5_23),
    .din24(kernel_data_V_5_24),
    .din25(kernel_data_V_5_25),
    .din26(kernel_data_V_5_26),
    .din27(kernel_data_V_5_27),
    .din28(kernel_data_V_5_28),
    .din29(kernel_data_V_5_29),
    .din30(kernel_data_V_5_30),
    .din31(kernel_data_V_5_31),
    .din32(kernel_data_V_5_32),
    .din33(kernel_data_V_5_33),
    .din34(kernel_data_V_5_34),
    .din35(kernel_data_V_5_35),
    .din36(kernel_data_V_5_36),
    .din37(kernel_data_V_5_37),
    .din38(kernel_data_V_5_38),
    .din39(kernel_data_V_5_39),
    .din40(kernel_data_V_5_40),
    .din41(kernel_data_V_5_41),
    .din42(kernel_data_V_5_42),
    .din43(kernel_data_V_5_43),
    .din44(kernel_data_V_5_44),
    .din45(kernel_data_V_5_45),
    .din46(kernel_data_V_5_46),
    .din47(kernel_data_V_5_47),
    .din48(kernel_data_V_5_48),
    .din49(kernel_data_V_5_49),
    .din50(kernel_data_V_5_50),
    .din51(kernel_data_V_5_51),
    .din52(kernel_data_V_5_52),
    .din53(kernel_data_V_5_53),
    .din54(kernel_data_V_5_54),
    .din55(kernel_data_V_5_55),
    .din56(kernel_data_V_5_56),
    .din57(kernel_data_V_5_57),
    .din58(kernel_data_V_5_58),
    .din59(kernel_data_V_5_59),
    .din60(kernel_data_V_5_60),
    .din61(kernel_data_V_5_61),
    .din62(kernel_data_V_5_62),
    .din63(kernel_data_V_5_63),
    .din64(kernel_data_V_5_64),
    .din65(kernel_data_V_5_65),
    .din66(kernel_data_V_5_66),
    .din67(kernel_data_V_5_67),
    .din68(kernel_data_V_5_68),
    .din69(kernel_data_V_5_69),
    .din70(kernel_data_V_5_70),
    .din71(kernel_data_V_5_71),
    .din72(in_index7_reg_209),
    .dout(tmp_fu_558_p74)
);

myproject_axi_mul_mul_16s_11s_26_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
myproject_axi_mul_mul_16s_11s_26_3_1_U1414(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_753),
    .din1(w18_V_load_reg_758),
    .ce(grp_fu_733_ce),
    .dout(grp_fu_733_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 16'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_reg_749_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
            ap_return_preg <= acc_0_V_fu_723_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln46_reg_749 == 1'd0))) begin
        in_index7_reg_209 <= in_index_reg_744;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_reg_749 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_index7_reg_209 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln46_reg_749_pp0_iter4_reg == 1'd0))) begin
        res_V_write_assign5_reg_239 <= acc_0_V_fu_723_p2;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_reg_749_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        res_V_write_assign5_reg_239 <= 16'd65366;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln46_reg_749 <= icmp_ln46_fu_264_p2;
        icmp_ln46_reg_749_pp0_iter1_reg <= icmp_ln46_reg_749;
        tmp_reg_753 <= tmp_fu_558_p74;
        w18_V_load_reg_758 <= w18_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln46_reg_749_pp0_iter2_reg <= icmp_ln46_reg_749_pp0_iter1_reg;
        icmp_ln46_reg_749_pp0_iter3_reg <= icmp_ln46_reg_749_pp0_iter2_reg;
        icmp_ln46_reg_749_pp0_iter4_reg <= icmp_ln46_reg_749_pp0_iter3_reg;
        r_V_reg_773 <= grp_fu_733_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_index_reg_744 <= in_index_fu_258_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_reg_749_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_177)) begin
        if ((icmp_ln46_reg_749 == 1'd1)) begin
            ap_phi_mux_in_index7_phi_fu_213_p6 = 7'd0;
        end else if ((icmp_ln46_reg_749 == 1'd0)) begin
            ap_phi_mux_in_index7_phi_fu_213_p6 = in_index_reg_744;
        end else begin
            ap_phi_mux_in_index7_phi_fu_213_p6 = in_index7_reg_209;
        end
    end else begin
        ap_phi_mux_in_index7_phi_fu_213_p6 = in_index7_reg_209;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_fu_264_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to4 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_reg_749_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ap_return = acc_0_V_fu_723_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_733_ce = 1'b1;
    end else begin
        grp_fu_733_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w18_V_ce0 = 1'b1;
    end else begin
        w18_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_0_V_fu_723_p2 = (trunc_ln_fu_714_p4 + res_V_write_assign5_reg_239);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_177 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign icmp_ln46_fu_264_p2 = ((ap_phi_mux_in_index7_phi_fu_213_p6 == 7'd71) ? 1'b1 : 1'b0);

assign in_index_fu_258_p2 = (ap_phi_mux_in_index7_phi_fu_213_p6 + 7'd1);

assign trunc_ln_fu_714_p4 = {{r_V_reg_773[25:10]}};

assign w18_V_address0 = zext_ln59_fu_253_p1;

assign zext_ln59_fu_253_p1 = ap_phi_mux_in_index7_phi_fu_213_p6;

endmodule //dense_resource_rf_leq_nin_ap_fixed_ap_fixed_16_6_5_3_0_config18_mult_0_0
