// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX;
reg   [31:0] sX;
reg   [31:0] pY;
reg   [31:0] sY;
reg   [15:0] kernel_data_V_7_8;
reg   [15:0] kernel_data_V_7_9;
reg   [15:0] kernel_data_V_7_10;
reg   [15:0] kernel_data_V_7_11;
reg   [15:0] kernel_data_V_7_12;
reg   [15:0] kernel_data_V_7_13;
reg   [15:0] kernel_data_V_7_14;
reg   [15:0] kernel_data_V_7_15;
reg   [15:0] kernel_data_V_7_24;
reg   [15:0] kernel_data_V_7_25;
reg   [15:0] kernel_data_V_7_26;
reg   [15:0] kernel_data_V_7_27;
reg   [15:0] kernel_data_V_7_28;
reg   [15:0] kernel_data_V_7_29;
reg   [15:0] kernel_data_V_7_30;
reg   [15:0] kernel_data_V_7_31;
reg    line_buffer_Array_V_7_0_0_ce0;
reg    line_buffer_Array_V_7_0_0_we0;
wire   [15:0] line_buffer_Array_V_7_0_0_q0;
reg    line_buffer_Array_V_7_0_1_ce0;
reg    line_buffer_Array_V_7_0_1_we0;
wire   [15:0] line_buffer_Array_V_7_0_1_q0;
reg    line_buffer_Array_V_7_0_2_ce0;
reg    line_buffer_Array_V_7_0_2_we0;
wire   [15:0] line_buffer_Array_V_7_0_2_q0;
reg    line_buffer_Array_V_7_0_3_ce0;
reg    line_buffer_Array_V_7_0_3_we0;
wire   [15:0] line_buffer_Array_V_7_0_3_q0;
reg    line_buffer_Array_V_7_0_4_ce0;
reg    line_buffer_Array_V_7_0_4_we0;
wire   [15:0] line_buffer_Array_V_7_0_4_q0;
reg    line_buffer_Array_V_7_0_5_ce0;
reg    line_buffer_Array_V_7_0_5_we0;
wire   [15:0] line_buffer_Array_V_7_0_5_q0;
reg    line_buffer_Array_V_7_0_6_ce0;
reg    line_buffer_Array_V_7_0_6_we0;
wire   [15:0] line_buffer_Array_V_7_0_6_q0;
reg    line_buffer_Array_V_7_0_7_ce0;
reg    line_buffer_Array_V_7_0_7_we0;
wire   [15:0] line_buffer_Array_V_7_0_7_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln241_reg_1089;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    res_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] and_ln191_2_reg_1314;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg   [8:0] indvar_flatten_reg_208;
wire   [0:0] icmp_ln241_fu_230_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    io_acc_block_signal_op186;
reg    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln241_reg_1089_pp0_iter1_reg;
wire   [8:0] add_ln241_fu_236_p2;
reg   [8:0] add_ln241_reg_1093;
reg   [15:0] pool_window_3_V_reg_1098;
wire    io_acc_block_signal_op29;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [15:0] pool_window_3_V_reg_1098_pp0_iter1_reg;
reg   [15:0] pool_window_3_V_1_reg_1107;
reg   [15:0] pool_window_3_V_1_reg_1107_pp0_iter1_reg;
reg   [15:0] pool_window_3_V_2_reg_1116;
reg   [15:0] pool_window_3_V_2_reg_1116_pp0_iter1_reg;
reg   [15:0] pool_window_3_V_3_reg_1125;
reg   [15:0] pool_window_3_V_3_reg_1125_pp0_iter1_reg;
reg   [15:0] pool_window_3_V_4_reg_1134;
reg   [15:0] pool_window_3_V_4_reg_1134_pp0_iter1_reg;
reg   [15:0] pool_window_3_V_5_reg_1143;
reg   [15:0] pool_window_3_V_5_reg_1143_pp0_iter1_reg;
reg   [15:0] pool_window_3_V_6_reg_1152;
reg   [15:0] pool_window_3_V_6_reg_1152_pp0_iter1_reg;
reg   [15:0] pool_window_3_V_7_reg_1161;
reg   [15:0] pool_window_3_V_7_reg_1161_pp0_iter1_reg;
reg   [15:0] pool_window_1_V_reg_1170;
reg   [15:0] pool_window_1_V_1_reg_1176;
reg   [15:0] pool_window_1_V_2_reg_1182;
reg   [15:0] pool_window_1_V_3_reg_1188;
reg   [15:0] pool_window_1_V_4_reg_1194;
reg   [15:0] pool_window_1_V_5_reg_1200;
reg   [15:0] pool_window_1_V_6_reg_1206;
reg   [15:0] pool_window_1_V_7_reg_1212;
reg   [15:0] pool_window_0_V_reg_1218;
reg   [15:0] pool_window_0_V_1_reg_1224;
reg   [15:0] pool_window_0_V_2_reg_1230;
reg   [15:0] pool_window_0_V_3_reg_1236;
reg   [15:0] pool_window_0_V_4_reg_1242;
reg   [15:0] pool_window_0_V_5_reg_1248;
reg   [15:0] pool_window_0_V_6_reg_1254;
reg   [15:0] pool_window_0_V_7_reg_1260;
reg   [15:0] pool_window_2_V_reg_1266;
reg   [15:0] pool_window_2_V_1_reg_1272;
reg   [15:0] pool_window_2_V_2_reg_1278;
reg   [15:0] pool_window_2_V_3_reg_1284;
reg   [15:0] pool_window_2_V_4_reg_1290;
reg   [15:0] pool_window_2_V_5_reg_1296;
reg   [15:0] pool_window_2_V_6_reg_1302;
reg   [15:0] pool_window_2_V_7_reg_1308;
wire   [0:0] and_ln191_2_fu_550_p2;
wire   [0:0] icmp_ln1496_fu_556_p2;
reg   [0:0] icmp_ln1496_reg_1318;
wire   [0:0] icmp_ln1496_1_fu_562_p2;
reg   [0:0] icmp_ln1496_1_reg_1324;
wire   [0:0] icmp_ln1496_8_fu_567_p2;
reg   [0:0] icmp_ln1496_8_reg_1330;
wire   [0:0] icmp_ln1496_9_fu_573_p2;
reg   [0:0] icmp_ln1496_9_reg_1336;
wire   [0:0] icmp_ln1496_11_fu_578_p2;
reg   [0:0] icmp_ln1496_11_reg_1342;
wire   [0:0] icmp_ln1496_12_fu_584_p2;
reg   [0:0] icmp_ln1496_12_reg_1348;
wire   [0:0] icmp_ln1496_3_fu_589_p2;
reg   [0:0] icmp_ln1496_3_reg_1354;
wire   [0:0] icmp_ln1496_14_fu_595_p2;
reg   [0:0] icmp_ln1496_14_reg_1360;
wire   [0:0] icmp_ln1496_4_fu_600_p2;
reg   [0:0] icmp_ln1496_4_reg_1366;
wire   [0:0] icmp_ln1496_16_fu_606_p2;
reg   [0:0] icmp_ln1496_16_reg_1372;
wire   [0:0] icmp_ln1496_5_fu_611_p2;
reg   [0:0] icmp_ln1496_5_reg_1378;
wire   [0:0] icmp_ln1496_18_fu_617_p2;
reg   [0:0] icmp_ln1496_18_reg_1384;
wire   [0:0] icmp_ln1496_6_fu_622_p2;
reg   [0:0] icmp_ln1496_6_reg_1390;
wire   [0:0] icmp_ln1496_20_fu_628_p2;
reg   [0:0] icmp_ln1496_20_reg_1396;
wire   [0:0] icmp_ln1496_7_fu_633_p2;
reg   [0:0] icmp_ln1496_7_reg_1402;
wire   [0:0] icmp_ln1496_22_fu_639_p2;
reg   [0:0] icmp_ln1496_22_reg_1408;
wire   [0:0] icmp_ln212_fu_644_p2;
reg   [0:0] icmp_ln212_reg_1414;
wire   [31:0] select_ln227_fu_668_p3;
reg   [31:0] select_ln227_reg_1418;
wire   [0:0] icmp_ln216_fu_688_p2;
reg   [0:0] icmp_ln216_reg_1423;
wire   [31:0] select_ln222_fu_712_p3;
reg   [31:0] select_ln222_reg_1427;
wire   [1:0] select_ln66_3_fu_752_p3;
reg   [1:0] select_ln66_3_reg_1432;
wire   [1:0] select_ln66_7_fu_786_p3;
reg   [1:0] select_ln66_7_reg_1437;
wire   [1:0] select_ln66_11_fu_820_p3;
reg   [1:0] select_ln66_11_reg_1442;
wire   [1:0] select_ln66_15_fu_854_p3;
reg   [1:0] select_ln66_15_reg_1447;
wire   [1:0] select_ln66_19_fu_888_p3;
reg   [1:0] select_ln66_19_reg_1452;
wire   [1:0] select_ln66_23_fu_922_p3;
reg   [1:0] select_ln66_23_reg_1457;
wire   [1:0] select_ln66_27_fu_956_p3;
reg   [1:0] select_ln66_27_reg_1462;
wire   [1:0] select_ln66_31_fu_990_p3;
reg   [1:0] select_ln66_31_reg_1467;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
reg   [8:0] ap_phi_mux_indvar_flatten_phi_fu_212_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_219;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_219;
reg   [31:0] ap_phi_reg_pp0_iter2_storemerge_i_i_reg_219;
wire   [31:0] add_ln225_fu_650_p2;
wire   [31:0] add_ln220_fu_694_p2;
reg   [31:0] ap_sig_allocacmp_sY_load;
wire   [15:0] tmp_data_0_V_fu_1003_p6;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] tmp_data_1_V_fu_1013_p6;
wire   [15:0] tmp_data_2_V_fu_1023_p6;
wire   [15:0] tmp_data_3_V_fu_1033_p6;
wire   [15:0] tmp_data_4_V_fu_1043_p6;
wire   [15:0] tmp_data_5_V_fu_1053_p6;
wire   [15:0] tmp_data_6_V_fu_1063_p6;
wire   [15:0] tmp_data_7_V_fu_1073_p6;
wire   [0:0] icmp_ln191_fu_502_p2;
wire   [0:0] icmp_ln191_1_fu_512_p2;
wire   [0:0] icmp_ln191_2_fu_522_p2;
wire   [0:0] icmp_ln191_3_fu_532_p2;
wire   [0:0] and_ln191_1_fu_544_p2;
wire   [0:0] and_ln191_fu_538_p2;
wire   [31:0] add_ln227_fu_662_p2;
wire   [31:0] add_ln222_fu_706_p2;
wire   [15:0] select_ln66_fu_726_p3;
wire   [15:0] select_ln66_2_fu_738_p3;
wire   [0:0] icmp_ln1496_2_fu_743_p2;
wire   [1:0] select_ln66_1_fu_731_p3;
wire   [1:0] zext_ln66_fu_749_p1;
wire   [15:0] select_ln66_4_fu_760_p3;
wire   [15:0] select_ln66_6_fu_772_p3;
wire   [0:0] icmp_ln1496_10_fu_777_p2;
wire   [1:0] select_ln66_5_fu_765_p3;
wire   [1:0] zext_ln66_1_fu_783_p1;
wire   [15:0] select_ln66_8_fu_794_p3;
wire   [15:0] select_ln66_10_fu_806_p3;
wire   [0:0] icmp_ln1496_13_fu_811_p2;
wire   [1:0] select_ln66_9_fu_799_p3;
wire   [1:0] zext_ln66_2_fu_817_p1;
wire   [15:0] select_ln66_12_fu_828_p3;
wire   [15:0] select_ln66_14_fu_840_p3;
wire   [0:0] icmp_ln1496_15_fu_845_p2;
wire   [1:0] select_ln66_13_fu_833_p3;
wire   [1:0] zext_ln66_3_fu_851_p1;
wire   [15:0] select_ln66_16_fu_862_p3;
wire   [15:0] select_ln66_18_fu_874_p3;
wire   [0:0] icmp_ln1496_17_fu_879_p2;
wire   [1:0] select_ln66_17_fu_867_p3;
wire   [1:0] zext_ln66_4_fu_885_p1;
wire   [15:0] select_ln66_20_fu_896_p3;
wire   [15:0] select_ln66_22_fu_908_p3;
wire   [0:0] icmp_ln1496_19_fu_913_p2;
wire   [1:0] select_ln66_21_fu_901_p3;
wire   [1:0] zext_ln66_5_fu_919_p1;
wire   [15:0] select_ln66_24_fu_930_p3;
wire   [15:0] select_ln66_26_fu_942_p3;
wire   [0:0] icmp_ln1496_21_fu_947_p2;
wire   [1:0] select_ln66_25_fu_935_p3;
wire   [1:0] zext_ln66_6_fu_953_p1;
wire   [15:0] select_ln66_28_fu_964_p3;
wire   [15:0] select_ln66_30_fu_976_p3;
wire   [0:0] icmp_ln1496_23_fu_981_p2;
wire   [1:0] select_ln66_29_fu_969_p3;
wire   [1:0] zext_ln66_7_fu_987_p1;
wire    ap_CS_fsm_state7;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_462;
reg    ap_condition_457;
reg    ap_condition_447;
reg    ap_condition_1041;
reg    ap_condition_399;
reg    ap_condition_1046;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 pX = 32'd0;
#0 sX = 32'd0;
#0 pY = 32'd0;
#0 sY = 32'd0;
#0 kernel_data_V_7_8 = 16'd0;
#0 kernel_data_V_7_9 = 16'd0;
#0 kernel_data_V_7_10 = 16'd0;
#0 kernel_data_V_7_11 = 16'd0;
#0 kernel_data_V_7_12 = 16'd0;
#0 kernel_data_V_7_13 = 16'd0;
#0 kernel_data_V_7_14 = 16'd0;
#0 kernel_data_V_7_15 = 16'd0;
#0 kernel_data_V_7_24 = 16'd0;
#0 kernel_data_V_7_25 = 16'd0;
#0 kernel_data_V_7_26 = 16'd0;
#0 kernel_data_V_7_27 = 16'd0;
#0 kernel_data_V_7_28 = 16'd0;
#0 kernel_data_V_7_29 = 16'd0;
#0 kernel_data_V_7_30 = 16'd0;
#0 kernel_data_V_7_31 = 16'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_7_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(line_buffer_Array_V_7_0_0_ce0),
    .we0(line_buffer_Array_V_7_0_0_we0),
    .d0(pool_window_3_V_reg_1098),
    .q0(line_buffer_Array_V_7_0_0_q0)
);

pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_7_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(line_buffer_Array_V_7_0_1_ce0),
    .we0(line_buffer_Array_V_7_0_1_we0),
    .d0(pool_window_3_V_1_reg_1107),
    .q0(line_buffer_Array_V_7_0_1_q0)
);

pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_7_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(line_buffer_Array_V_7_0_2_ce0),
    .we0(line_buffer_Array_V_7_0_2_we0),
    .d0(pool_window_3_V_2_reg_1116),
    .q0(line_buffer_Array_V_7_0_2_q0)
);

pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_7_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(line_buffer_Array_V_7_0_3_ce0),
    .we0(line_buffer_Array_V_7_0_3_we0),
    .d0(pool_window_3_V_3_reg_1125),
    .q0(line_buffer_Array_V_7_0_3_q0)
);

pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_7_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(line_buffer_Array_V_7_0_4_ce0),
    .we0(line_buffer_Array_V_7_0_4_we0),
    .d0(pool_window_3_V_4_reg_1134),
    .q0(line_buffer_Array_V_7_0_4_q0)
);

pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_7_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(line_buffer_Array_V_7_0_5_ce0),
    .we0(line_buffer_Array_V_7_0_5_we0),
    .d0(pool_window_3_V_5_reg_1143),
    .q0(line_buffer_Array_V_7_0_5_q0)
);

pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_7_0_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(line_buffer_Array_V_7_0_6_ce0),
    .we0(line_buffer_Array_V_7_0_6_we0),
    .d0(pool_window_3_V_6_reg_1152),
    .q0(line_buffer_Array_V_7_0_6_q0)
);

pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_7_0_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(line_buffer_Array_V_7_0_7_ce0),
    .we0(line_buffer_Array_V_7_0_7_we0),
    .d0(pool_window_3_V_7_reg_1161),
    .q0(line_buffer_Array_V_7_0_7_q0)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U263(
    .din0(pool_window_0_V_reg_1218),
    .din1(pool_window_1_V_reg_1170),
    .din2(pool_window_2_V_reg_1266),
    .din3(pool_window_3_V_reg_1098_pp0_iter1_reg),
    .din4(select_ln66_3_reg_1432),
    .dout(tmp_data_0_V_fu_1003_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U264(
    .din0(pool_window_0_V_1_reg_1224),
    .din1(pool_window_1_V_1_reg_1176),
    .din2(pool_window_2_V_1_reg_1272),
    .din3(pool_window_3_V_1_reg_1107_pp0_iter1_reg),
    .din4(select_ln66_7_reg_1437),
    .dout(tmp_data_1_V_fu_1013_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U265(
    .din0(pool_window_0_V_2_reg_1230),
    .din1(pool_window_1_V_2_reg_1182),
    .din2(pool_window_2_V_2_reg_1278),
    .din3(pool_window_3_V_2_reg_1116_pp0_iter1_reg),
    .din4(select_ln66_11_reg_1442),
    .dout(tmp_data_2_V_fu_1023_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U266(
    .din0(pool_window_0_V_3_reg_1236),
    .din1(pool_window_1_V_3_reg_1188),
    .din2(pool_window_2_V_3_reg_1284),
    .din3(pool_window_3_V_3_reg_1125_pp0_iter1_reg),
    .din4(select_ln66_15_reg_1447),
    .dout(tmp_data_3_V_fu_1033_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U267(
    .din0(pool_window_0_V_4_reg_1242),
    .din1(pool_window_1_V_4_reg_1194),
    .din2(pool_window_2_V_4_reg_1290),
    .din3(pool_window_3_V_4_reg_1134_pp0_iter1_reg),
    .din4(select_ln66_19_reg_1452),
    .dout(tmp_data_4_V_fu_1043_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U268(
    .din0(pool_window_0_V_5_reg_1248),
    .din1(pool_window_1_V_5_reg_1200),
    .din2(pool_window_2_V_5_reg_1296),
    .din3(pool_window_3_V_5_reg_1143_pp0_iter1_reg),
    .din4(select_ln66_23_reg_1457),
    .dout(tmp_data_5_V_fu_1053_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U269(
    .din0(pool_window_0_V_6_reg_1254),
    .din1(pool_window_1_V_6_reg_1206),
    .din2(pool_window_2_V_6_reg_1302),
    .din3(pool_window_3_V_6_reg_1152_pp0_iter1_reg),
    .din4(select_ln66_27_reg_1462),
    .dout(tmp_data_6_V_fu_1063_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U270(
    .din0(pool_window_0_V_7_reg_1260),
    .din1(pool_window_1_V_7_reg_1212),
    .din2(pool_window_2_V_7_reg_1308),
    .din3(pool_window_3_V_7_reg_1161_pp0_iter1_reg),
    .din4(select_ln66_31_reg_1467),
    .dout(tmp_data_7_V_fu_1073_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln216_fu_688_p2 == 1'd1) & (icmp_ln212_fu_644_p2 == 1'd1) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_219 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_219 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_219;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_457)) begin
        if ((1'b1 == ap_condition_462)) begin
            ap_phi_reg_pp0_iter2_storemerge_i_i_reg_219 <= select_ln222_reg_1427;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_storemerge_i_i_reg_219 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_219;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_208 <= add_ln241_reg_1093;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_208 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_447)) begin
        if ((icmp_ln212_fu_644_p2 == 1'd1)) begin
            pX <= 32'd0;
        end else if ((icmp_ln212_fu_644_p2 == 1'd0)) begin
            pX <= add_ln225_fu_650_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1041)) begin
        if ((icmp_ln216_fu_688_p2 == 1'd1)) begin
            pY <= 32'd0;
        end else if ((icmp_ln216_fu_688_p2 == 1'd0)) begin
            pY <= add_ln220_fu_694_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1046)) begin
            sX <= select_ln227_reg_1418;
        end else if ((1'b1 == ap_condition_399)) begin
            sX <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln241_reg_1093 <= add_ln241_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln191_2_reg_1314 <= and_ln191_2_fu_550_p2;
        pool_window_0_V_1_reg_1224 <= kernel_data_V_7_9;
        pool_window_0_V_2_reg_1230 <= kernel_data_V_7_10;
        pool_window_0_V_3_reg_1236 <= kernel_data_V_7_11;
        pool_window_0_V_4_reg_1242 <= kernel_data_V_7_12;
        pool_window_0_V_5_reg_1248 <= kernel_data_V_7_13;
        pool_window_0_V_6_reg_1254 <= kernel_data_V_7_14;
        pool_window_0_V_7_reg_1260 <= kernel_data_V_7_15;
        pool_window_0_V_reg_1218 <= kernel_data_V_7_8;
        pool_window_1_V_1_reg_1176 <= line_buffer_Array_V_7_0_1_q0;
        pool_window_1_V_2_reg_1182 <= line_buffer_Array_V_7_0_2_q0;
        pool_window_1_V_3_reg_1188 <= line_buffer_Array_V_7_0_3_q0;
        pool_window_1_V_4_reg_1194 <= line_buffer_Array_V_7_0_4_q0;
        pool_window_1_V_5_reg_1200 <= line_buffer_Array_V_7_0_5_q0;
        pool_window_1_V_6_reg_1206 <= line_buffer_Array_V_7_0_6_q0;
        pool_window_1_V_7_reg_1212 <= line_buffer_Array_V_7_0_7_q0;
        pool_window_1_V_reg_1170 <= line_buffer_Array_V_7_0_0_q0;
        pool_window_2_V_1_reg_1272 <= kernel_data_V_7_25;
        pool_window_2_V_2_reg_1278 <= kernel_data_V_7_26;
        pool_window_2_V_3_reg_1284 <= kernel_data_V_7_27;
        pool_window_2_V_4_reg_1290 <= kernel_data_V_7_28;
        pool_window_2_V_5_reg_1296 <= kernel_data_V_7_29;
        pool_window_2_V_6_reg_1302 <= kernel_data_V_7_30;
        pool_window_2_V_7_reg_1308 <= kernel_data_V_7_31;
        pool_window_2_V_reg_1266 <= kernel_data_V_7_24;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_fu_550_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1496_11_reg_1342 <= icmp_ln1496_11_fu_578_p2;
        icmp_ln1496_12_reg_1348 <= icmp_ln1496_12_fu_584_p2;
        icmp_ln1496_14_reg_1360 <= icmp_ln1496_14_fu_595_p2;
        icmp_ln1496_16_reg_1372 <= icmp_ln1496_16_fu_606_p2;
        icmp_ln1496_18_reg_1384 <= icmp_ln1496_18_fu_617_p2;
        icmp_ln1496_1_reg_1324 <= icmp_ln1496_1_fu_562_p2;
        icmp_ln1496_20_reg_1396 <= icmp_ln1496_20_fu_628_p2;
        icmp_ln1496_22_reg_1408 <= icmp_ln1496_22_fu_639_p2;
        icmp_ln1496_3_reg_1354 <= icmp_ln1496_3_fu_589_p2;
        icmp_ln1496_4_reg_1366 <= icmp_ln1496_4_fu_600_p2;
        icmp_ln1496_5_reg_1378 <= icmp_ln1496_5_fu_611_p2;
        icmp_ln1496_6_reg_1390 <= icmp_ln1496_6_fu_622_p2;
        icmp_ln1496_7_reg_1402 <= icmp_ln1496_7_fu_633_p2;
        icmp_ln1496_8_reg_1330 <= icmp_ln1496_8_fu_567_p2;
        icmp_ln1496_9_reg_1336 <= icmp_ln1496_9_fu_573_p2;
        icmp_ln1496_reg_1318 <= icmp_ln1496_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln212_reg_1414 <= icmp_ln212_fu_644_p2;
        icmp_ln241_reg_1089 <= icmp_ln241_fu_230_p2;
        icmp_ln241_reg_1089_pp0_iter1_reg <= icmp_ln241_reg_1089;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_644_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln216_reg_1423 <= icmp_ln216_fu_688_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_data_V_7_10 <= line_buffer_Array_V_7_0_2_q0;
        kernel_data_V_7_11 <= line_buffer_Array_V_7_0_3_q0;
        kernel_data_V_7_12 <= line_buffer_Array_V_7_0_4_q0;
        kernel_data_V_7_13 <= line_buffer_Array_V_7_0_5_q0;
        kernel_data_V_7_14 <= line_buffer_Array_V_7_0_6_q0;
        kernel_data_V_7_15 <= line_buffer_Array_V_7_0_7_q0;
        kernel_data_V_7_24 <= pool_window_3_V_reg_1098;
        kernel_data_V_7_25 <= pool_window_3_V_1_reg_1107;
        kernel_data_V_7_26 <= pool_window_3_V_2_reg_1116;
        kernel_data_V_7_27 <= pool_window_3_V_3_reg_1125;
        kernel_data_V_7_28 <= pool_window_3_V_4_reg_1134;
        kernel_data_V_7_29 <= pool_window_3_V_5_reg_1143;
        kernel_data_V_7_30 <= pool_window_3_V_6_reg_1152;
        kernel_data_V_7_31 <= pool_window_3_V_7_reg_1161;
        kernel_data_V_7_8 <= line_buffer_Array_V_7_0_0_q0;
        kernel_data_V_7_9 <= line_buffer_Array_V_7_0_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1089 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        pool_window_3_V_1_reg_1107 <= data_V_data_1_V_dout;
        pool_window_3_V_2_reg_1116 <= data_V_data_2_V_dout;
        pool_window_3_V_3_reg_1125 <= data_V_data_3_V_dout;
        pool_window_3_V_4_reg_1134 <= data_V_data_4_V_dout;
        pool_window_3_V_5_reg_1143 <= data_V_data_5_V_dout;
        pool_window_3_V_6_reg_1152 <= data_V_data_6_V_dout;
        pool_window_3_V_7_reg_1161 <= data_V_data_7_V_dout;
        pool_window_3_V_reg_1098 <= data_V_data_0_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        pool_window_3_V_1_reg_1107_pp0_iter1_reg <= pool_window_3_V_1_reg_1107;
        pool_window_3_V_2_reg_1116_pp0_iter1_reg <= pool_window_3_V_2_reg_1116;
        pool_window_3_V_3_reg_1125_pp0_iter1_reg <= pool_window_3_V_3_reg_1125;
        pool_window_3_V_4_reg_1134_pp0_iter1_reg <= pool_window_3_V_4_reg_1134;
        pool_window_3_V_5_reg_1143_pp0_iter1_reg <= pool_window_3_V_5_reg_1143;
        pool_window_3_V_6_reg_1152_pp0_iter1_reg <= pool_window_3_V_6_reg_1152;
        pool_window_3_V_7_reg_1161_pp0_iter1_reg <= pool_window_3_V_7_reg_1161;
        pool_window_3_V_reg_1098_pp0_iter1_reg <= pool_window_3_V_reg_1098;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_reg_1414 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sY <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_219;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_644_p2 == 1'd1) & (icmp_ln216_fu_688_p2 == 1'd0) & (icmp_ln241_reg_1089 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln222_reg_1427 <= select_ln222_fu_712_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_644_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln227_reg_1418 <= select_ln227_fu_668_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_1314) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln66_11_reg_1442 <= select_ln66_11_fu_820_p3;
        select_ln66_15_reg_1447 <= select_ln66_15_fu_854_p3;
        select_ln66_19_reg_1452 <= select_ln66_19_fu_888_p3;
        select_ln66_23_reg_1457 <= select_ln66_23_fu_922_p3;
        select_ln66_27_reg_1462 <= select_ln66_27_fu_956_p3;
        select_ln66_31_reg_1467 <= select_ln66_31_fu_990_p3;
        select_ln66_3_reg_1432 <= select_ln66_3_fu_752_p3;
        select_ln66_7_reg_1437 <= select_ln66_7_fu_786_p3;
    end
end

always @ (*) begin
    if ((icmp_ln241_fu_230_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_212_p4 = add_ln241_reg_1093;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_212_p4 = indvar_flatten_reg_208;
    end
end

always @ (*) begin
    if (((icmp_ln212_reg_1414 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_sY_load = ap_phi_reg_pp0_iter2_storemerge_i_i_reg_219;
    end else begin
        ap_sig_allocacmp_sY_load = sY;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_7_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_7_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_7_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_7_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_7_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_7_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_7_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_7_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_7_0_4_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_7_0_4_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_7_0_5_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_7_0_5_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_7_0_6_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_7_0_6_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_7_0_7_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_7_0_7_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1314) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_1314) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1314) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_1314) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1314) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_1314) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1314) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_1314) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1314) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_1314) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1314) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_1314) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1314) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_1314) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1314) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_1314) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_230_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_230_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_694_p2 = (pY + 32'd1);

assign add_ln222_fu_706_p2 = (ap_sig_allocacmp_sY_load + 32'd1);

assign add_ln225_fu_650_p2 = (pX + 32'd1);

assign add_ln227_fu_662_p2 = (sX + 32'd1);

assign add_ln241_fu_236_p2 = (ap_phi_mux_indvar_flatten_phi_fu_212_p4 + 9'd1);

assign and_ln191_1_fu_544_p2 = (icmp_ln191_3_fu_532_p2 & icmp_ln191_2_fu_522_p2);

assign and_ln191_2_fu_550_p2 = (and_ln191_fu_538_p2 & and_ln191_1_fu_544_p2);

assign and_ln191_fu_538_p2 = (icmp_ln191_fu_502_p2 & icmp_ln191_1_fu_512_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((io_acc_block_signal_op186 == 1'b0) & (1'd1 == and_ln191_2_reg_1314) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((io_acc_block_signal_op186 == 1'b0) & (1'd1 == and_ln191_2_reg_1314) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((io_acc_block_signal_op186 == 1'b0) & (1'd1 == and_ln191_2_reg_1314) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((io_acc_block_signal_op29 == 1'b0) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((io_acc_block_signal_op29 == 1'b0) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((io_acc_block_signal_op29 == 1'b0) & (icmp_ln241_reg_1089 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = ((io_acc_block_signal_op186 == 1'b0) & (1'd1 == and_ln191_2_reg_1314));
end

always @ (*) begin
    ap_condition_1041 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_644_p2 == 1'd1) & (icmp_ln241_reg_1089 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_1046 = ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_reg_1414 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_399 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_644_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_447 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_457 = ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_462 = ((icmp_ln212_reg_1414 == 1'd1) & (icmp_ln216_reg_1423 == 1'd0) & (icmp_ln241_reg_1089_pp0_iter1_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_219 = 'bx;

assign ap_ready = internal_ap_ready;

assign icmp_ln1496_10_fu_777_p2 = (($signed(select_ln66_4_fu_760_p3) < $signed(select_ln66_6_fu_772_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_11_fu_578_p2 = (($signed(kernel_data_V_7_10) < $signed(line_buffer_Array_V_7_0_2_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_12_fu_584_p2 = (($signed(kernel_data_V_7_26) < $signed(pool_window_3_V_2_reg_1116)) ? 1'b1 : 1'b0);

assign icmp_ln1496_13_fu_811_p2 = (($signed(select_ln66_8_fu_794_p3) < $signed(select_ln66_10_fu_806_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_14_fu_595_p2 = (($signed(kernel_data_V_7_27) < $signed(pool_window_3_V_3_reg_1125)) ? 1'b1 : 1'b0);

assign icmp_ln1496_15_fu_845_p2 = (($signed(select_ln66_12_fu_828_p3) < $signed(select_ln66_14_fu_840_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_16_fu_606_p2 = (($signed(kernel_data_V_7_28) < $signed(pool_window_3_V_4_reg_1134)) ? 1'b1 : 1'b0);

assign icmp_ln1496_17_fu_879_p2 = (($signed(select_ln66_16_fu_862_p3) < $signed(select_ln66_18_fu_874_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_18_fu_617_p2 = (($signed(kernel_data_V_7_29) < $signed(pool_window_3_V_5_reg_1143)) ? 1'b1 : 1'b0);

assign icmp_ln1496_19_fu_913_p2 = (($signed(select_ln66_20_fu_896_p3) < $signed(select_ln66_22_fu_908_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_1_fu_562_p2 = (($signed(kernel_data_V_7_24) < $signed(pool_window_3_V_reg_1098)) ? 1'b1 : 1'b0);

assign icmp_ln1496_20_fu_628_p2 = (($signed(kernel_data_V_7_30) < $signed(pool_window_3_V_6_reg_1152)) ? 1'b1 : 1'b0);

assign icmp_ln1496_21_fu_947_p2 = (($signed(select_ln66_24_fu_930_p3) < $signed(select_ln66_26_fu_942_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_22_fu_639_p2 = (($signed(kernel_data_V_7_31) < $signed(pool_window_3_V_7_reg_1161)) ? 1'b1 : 1'b0);

assign icmp_ln1496_23_fu_981_p2 = (($signed(select_ln66_28_fu_964_p3) < $signed(select_ln66_30_fu_976_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_743_p2 = (($signed(select_ln66_fu_726_p3) < $signed(select_ln66_2_fu_738_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_589_p2 = (($signed(kernel_data_V_7_11) < $signed(line_buffer_Array_V_7_0_3_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_600_p2 = (($signed(kernel_data_V_7_12) < $signed(line_buffer_Array_V_7_0_4_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_611_p2 = (($signed(kernel_data_V_7_13) < $signed(line_buffer_Array_V_7_0_5_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_622_p2 = (($signed(kernel_data_V_7_14) < $signed(line_buffer_Array_V_7_0_6_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_633_p2 = (($signed(kernel_data_V_7_15) < $signed(line_buffer_Array_V_7_0_7_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_567_p2 = (($signed(kernel_data_V_7_9) < $signed(line_buffer_Array_V_7_0_1_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_573_p2 = (($signed(kernel_data_V_7_25) < $signed(pool_window_3_V_1_reg_1107)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_556_p2 = (($signed(kernel_data_V_7_8) < $signed(line_buffer_Array_V_7_0_0_q0)) ? 1'b1 : 1'b0);

assign icmp_ln191_1_fu_512_p2 = ((ap_sig_allocacmp_sY_load == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln191_2_fu_522_p2 = (($signed(pY) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_3_fu_532_p2 = (($signed(pX) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_502_p2 = ((sX == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_644_p2 = ((pX == 32'd15) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_688_p2 = ((pY == 32'd15) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_230_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_212_p4 == 9'd256) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op186 = (res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op29 = (data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign res_V_data_0_V_din = tmp_data_0_V_fu_1003_p6;

assign res_V_data_1_V_din = tmp_data_1_V_fu_1013_p6;

assign res_V_data_2_V_din = tmp_data_2_V_fu_1023_p6;

assign res_V_data_3_V_din = tmp_data_3_V_fu_1033_p6;

assign res_V_data_4_V_din = tmp_data_4_V_fu_1043_p6;

assign res_V_data_5_V_din = tmp_data_5_V_fu_1053_p6;

assign res_V_data_6_V_din = tmp_data_6_V_fu_1063_p6;

assign res_V_data_7_V_din = tmp_data_7_V_fu_1073_p6;

assign select_ln222_fu_712_p3 = ((icmp_ln191_1_fu_512_p2[0:0] === 1'b1) ? 32'd0 : add_ln222_fu_706_p2);

assign select_ln227_fu_668_p3 = ((icmp_ln191_fu_502_p2[0:0] === 1'b1) ? 32'd0 : add_ln227_fu_662_p2);

assign select_ln66_10_fu_806_p3 = ((icmp_ln1496_12_reg_1348[0:0] === 1'b1) ? pool_window_3_V_2_reg_1116 : pool_window_2_V_2_reg_1278);

assign select_ln66_11_fu_820_p3 = ((icmp_ln1496_13_fu_811_p2[0:0] === 1'b1) ? select_ln66_9_fu_799_p3 : zext_ln66_2_fu_817_p1);

assign select_ln66_12_fu_828_p3 = ((icmp_ln1496_3_reg_1354[0:0] === 1'b1) ? pool_window_1_V_3_reg_1188 : pool_window_0_V_3_reg_1236);

assign select_ln66_13_fu_833_p3 = ((icmp_ln1496_14_reg_1360[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln66_14_fu_840_p3 = ((icmp_ln1496_14_reg_1360[0:0] === 1'b1) ? pool_window_3_V_3_reg_1125 : pool_window_2_V_3_reg_1284);

assign select_ln66_15_fu_854_p3 = ((icmp_ln1496_15_fu_845_p2[0:0] === 1'b1) ? select_ln66_13_fu_833_p3 : zext_ln66_3_fu_851_p1);

assign select_ln66_16_fu_862_p3 = ((icmp_ln1496_4_reg_1366[0:0] === 1'b1) ? pool_window_1_V_4_reg_1194 : pool_window_0_V_4_reg_1242);

assign select_ln66_17_fu_867_p3 = ((icmp_ln1496_16_reg_1372[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln66_18_fu_874_p3 = ((icmp_ln1496_16_reg_1372[0:0] === 1'b1) ? pool_window_3_V_4_reg_1134 : pool_window_2_V_4_reg_1290);

assign select_ln66_19_fu_888_p3 = ((icmp_ln1496_17_fu_879_p2[0:0] === 1'b1) ? select_ln66_17_fu_867_p3 : zext_ln66_4_fu_885_p1);

assign select_ln66_1_fu_731_p3 = ((icmp_ln1496_1_reg_1324[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln66_20_fu_896_p3 = ((icmp_ln1496_5_reg_1378[0:0] === 1'b1) ? pool_window_1_V_5_reg_1200 : pool_window_0_V_5_reg_1248);

assign select_ln66_21_fu_901_p3 = ((icmp_ln1496_18_reg_1384[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln66_22_fu_908_p3 = ((icmp_ln1496_18_reg_1384[0:0] === 1'b1) ? pool_window_3_V_5_reg_1143 : pool_window_2_V_5_reg_1296);

assign select_ln66_23_fu_922_p3 = ((icmp_ln1496_19_fu_913_p2[0:0] === 1'b1) ? select_ln66_21_fu_901_p3 : zext_ln66_5_fu_919_p1);

assign select_ln66_24_fu_930_p3 = ((icmp_ln1496_6_reg_1390[0:0] === 1'b1) ? pool_window_1_V_6_reg_1206 : pool_window_0_V_6_reg_1254);

assign select_ln66_25_fu_935_p3 = ((icmp_ln1496_20_reg_1396[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln66_26_fu_942_p3 = ((icmp_ln1496_20_reg_1396[0:0] === 1'b1) ? pool_window_3_V_6_reg_1152 : pool_window_2_V_6_reg_1302);

assign select_ln66_27_fu_956_p3 = ((icmp_ln1496_21_fu_947_p2[0:0] === 1'b1) ? select_ln66_25_fu_935_p3 : zext_ln66_6_fu_953_p1);

assign select_ln66_28_fu_964_p3 = ((icmp_ln1496_7_reg_1402[0:0] === 1'b1) ? pool_window_1_V_7_reg_1212 : pool_window_0_V_7_reg_1260);

assign select_ln66_29_fu_969_p3 = ((icmp_ln1496_22_reg_1408[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln66_2_fu_738_p3 = ((icmp_ln1496_1_reg_1324[0:0] === 1'b1) ? pool_window_3_V_reg_1098 : pool_window_2_V_reg_1266);

assign select_ln66_30_fu_976_p3 = ((icmp_ln1496_22_reg_1408[0:0] === 1'b1) ? pool_window_3_V_7_reg_1161 : pool_window_2_V_7_reg_1308);

assign select_ln66_31_fu_990_p3 = ((icmp_ln1496_23_fu_981_p2[0:0] === 1'b1) ? select_ln66_29_fu_969_p3 : zext_ln66_7_fu_987_p1);

assign select_ln66_3_fu_752_p3 = ((icmp_ln1496_2_fu_743_p2[0:0] === 1'b1) ? select_ln66_1_fu_731_p3 : zext_ln66_fu_749_p1);

assign select_ln66_4_fu_760_p3 = ((icmp_ln1496_8_reg_1330[0:0] === 1'b1) ? pool_window_1_V_1_reg_1176 : pool_window_0_V_1_reg_1224);

assign select_ln66_5_fu_765_p3 = ((icmp_ln1496_9_reg_1336[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln66_6_fu_772_p3 = ((icmp_ln1496_9_reg_1336[0:0] === 1'b1) ? pool_window_3_V_1_reg_1107 : pool_window_2_V_1_reg_1272);

assign select_ln66_7_fu_786_p3 = ((icmp_ln1496_10_fu_777_p2[0:0] === 1'b1) ? select_ln66_5_fu_765_p3 : zext_ln66_1_fu_783_p1);

assign select_ln66_8_fu_794_p3 = ((icmp_ln1496_11_reg_1342[0:0] === 1'b1) ? pool_window_1_V_2_reg_1182 : pool_window_0_V_2_reg_1230);

assign select_ln66_9_fu_799_p3 = ((icmp_ln1496_12_reg_1348[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln66_fu_726_p3 = ((icmp_ln1496_reg_1318[0:0] === 1'b1) ? pool_window_1_V_reg_1170 : pool_window_0_V_reg_1218);

assign start_out = real_start;

assign zext_ln66_1_fu_783_p1 = icmp_ln1496_8_reg_1330;

assign zext_ln66_2_fu_817_p1 = icmp_ln1496_11_reg_1342;

assign zext_ln66_3_fu_851_p1 = icmp_ln1496_3_reg_1354;

assign zext_ln66_4_fu_885_p1 = icmp_ln1496_4_reg_1366;

assign zext_ln66_5_fu_919_p1 = icmp_ln1496_5_reg_1378;

assign zext_ln66_6_fu_953_p1 = icmp_ln1496_6_reg_1390;

assign zext_ln66_7_fu_987_p1 = icmp_ln1496_7_reg_1402;

assign zext_ln66_fu_749_p1 = icmp_ln1496_reg_1318;

endmodule //pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s
