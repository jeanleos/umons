// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module toyuv_toyuv_Pipeline_VITIS_LOOP_24_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ch_r_TVALID,
        ch_g_TVALID,
        ch_b_TVALID,
        ch_y_TREADY,
        ch_u_TREADY,
        ch_v_TREADY,
        total,
        ch_r_TDATA,
        ch_r_TREADY,
        ch_r_TKEEP,
        ch_r_TSTRB,
        ch_r_TUSER,
        ch_r_TLAST,
        ch_r_TID,
        ch_r_TDEST,
        ch_g_TDATA,
        ch_g_TREADY,
        ch_g_TKEEP,
        ch_g_TSTRB,
        ch_g_TUSER,
        ch_g_TLAST,
        ch_g_TID,
        ch_g_TDEST,
        ch_b_TDATA,
        ch_b_TREADY,
        ch_b_TKEEP,
        ch_b_TSTRB,
        ch_b_TUSER,
        ch_b_TLAST,
        ch_b_TID,
        ch_b_TDEST,
        ch_y_TDATA,
        ch_y_TVALID,
        ch_y_TKEEP,
        ch_y_TSTRB,
        ch_y_TUSER,
        ch_y_TLAST,
        ch_y_TID,
        ch_y_TDEST,
        ch_u_TDATA,
        ch_u_TVALID,
        ch_u_TKEEP,
        ch_u_TSTRB,
        ch_u_TUSER,
        ch_u_TLAST,
        ch_u_TID,
        ch_u_TDEST,
        ch_v_TDATA,
        ch_v_TVALID,
        ch_v_TKEEP,
        ch_v_TSTRB,
        ch_v_TUSER,
        ch_v_TLAST,
        ch_v_TID,
        ch_v_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ch_r_TVALID;
input   ch_g_TVALID;
input   ch_b_TVALID;
input   ch_y_TREADY;
input   ch_u_TREADY;
input   ch_v_TREADY;
input  [31:0] total;
input  [31:0] ch_r_TDATA;
output   ch_r_TREADY;
input  [3:0] ch_r_TKEEP;
input  [3:0] ch_r_TSTRB;
input  [1:0] ch_r_TUSER;
input  [0:0] ch_r_TLAST;
input  [4:0] ch_r_TID;
input  [5:0] ch_r_TDEST;
input  [31:0] ch_g_TDATA;
output   ch_g_TREADY;
input  [3:0] ch_g_TKEEP;
input  [3:0] ch_g_TSTRB;
input  [1:0] ch_g_TUSER;
input  [0:0] ch_g_TLAST;
input  [4:0] ch_g_TID;
input  [5:0] ch_g_TDEST;
input  [31:0] ch_b_TDATA;
output   ch_b_TREADY;
input  [3:0] ch_b_TKEEP;
input  [3:0] ch_b_TSTRB;
input  [1:0] ch_b_TUSER;
input  [0:0] ch_b_TLAST;
input  [4:0] ch_b_TID;
input  [5:0] ch_b_TDEST;
output  [31:0] ch_y_TDATA;
output   ch_y_TVALID;
output  [3:0] ch_y_TKEEP;
output  [3:0] ch_y_TSTRB;
output  [1:0] ch_y_TUSER;
output  [0:0] ch_y_TLAST;
output  [4:0] ch_y_TID;
output  [5:0] ch_y_TDEST;
output  [31:0] ch_u_TDATA;
output   ch_u_TVALID;
output  [3:0] ch_u_TKEEP;
output  [3:0] ch_u_TSTRB;
output  [1:0] ch_u_TUSER;
output  [0:0] ch_u_TLAST;
output  [4:0] ch_u_TID;
output  [5:0] ch_u_TDEST;
output  [31:0] ch_v_TDATA;
output   ch_v_TVALID;
output  [3:0] ch_v_TKEEP;
output  [3:0] ch_v_TSTRB;
output  [1:0] ch_v_TUSER;
output  [0:0] ch_v_TLAST;
output  [4:0] ch_v_TID;
output  [5:0] ch_v_TDEST;

reg ap_idle;
reg ch_r_TREADY;
reg ch_g_TREADY;
reg ch_b_TREADY;
reg ch_y_TVALID;
reg ch_u_TVALID;
reg ch_v_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1_grp1;
reg    ap_block_state9_pp0_stage0_iter8_grp1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln24_fu_372_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ch_r_TDATA_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    ch_g_TDATA_blk_n;
reg    ch_b_TDATA_blk_n;
reg    ch_y_TDATA_blk_n;
reg    ch_u_TDATA_blk_n;
reg    ch_v_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001;
reg  signed [31:0] p_r_data_1_reg_1002;
reg    ap_block_pp0_stage0_11001_grp1;
reg  signed [31:0] p_r_data_1_reg_1002_pp0_iter2_reg;
reg   [3:0] p_r_keep_reg_1012;
reg   [3:0] p_r_keep_reg_1012_pp0_iter2_reg;
reg   [3:0] p_r_keep_reg_1012_pp0_iter3_reg;
reg   [3:0] p_r_keep_reg_1012_pp0_iter4_reg;
reg   [3:0] p_r_keep_reg_1012_pp0_iter5_reg;
reg   [3:0] p_r_keep_reg_1012_pp0_iter6_reg;
reg   [3:0] p_r_keep_reg_1012_pp0_iter7_reg;
reg   [3:0] p_r_strb_reg_1017;
reg   [3:0] p_r_strb_reg_1017_pp0_iter2_reg;
reg   [3:0] p_r_strb_reg_1017_pp0_iter3_reg;
reg   [3:0] p_r_strb_reg_1017_pp0_iter4_reg;
reg   [3:0] p_r_strb_reg_1017_pp0_iter5_reg;
reg   [3:0] p_r_strb_reg_1017_pp0_iter6_reg;
reg   [3:0] p_r_strb_reg_1017_pp0_iter7_reg;
reg   [1:0] p_r_user_reg_1022;
reg   [1:0] p_r_user_reg_1022_pp0_iter2_reg;
reg   [1:0] p_r_user_reg_1022_pp0_iter3_reg;
reg   [1:0] p_r_user_reg_1022_pp0_iter4_reg;
reg   [1:0] p_r_user_reg_1022_pp0_iter5_reg;
reg   [1:0] p_r_user_reg_1022_pp0_iter6_reg;
reg   [1:0] p_r_user_reg_1022_pp0_iter7_reg;
reg   [0:0] p_r_last_reg_1027;
reg   [0:0] p_r_last_reg_1027_pp0_iter2_reg;
reg   [0:0] p_r_last_reg_1027_pp0_iter3_reg;
reg   [0:0] p_r_last_reg_1027_pp0_iter4_reg;
reg   [0:0] p_r_last_reg_1027_pp0_iter5_reg;
reg   [0:0] p_r_last_reg_1027_pp0_iter6_reg;
reg   [0:0] p_r_last_reg_1027_pp0_iter7_reg;
reg   [4:0] p_r_id_reg_1032;
reg   [4:0] p_r_id_reg_1032_pp0_iter2_reg;
reg   [4:0] p_r_id_reg_1032_pp0_iter3_reg;
reg   [4:0] p_r_id_reg_1032_pp0_iter4_reg;
reg   [4:0] p_r_id_reg_1032_pp0_iter5_reg;
reg   [4:0] p_r_id_reg_1032_pp0_iter6_reg;
reg   [4:0] p_r_id_reg_1032_pp0_iter7_reg;
reg   [5:0] p_r_dest_reg_1037;
reg   [5:0] p_r_dest_reg_1037_pp0_iter2_reg;
reg   [5:0] p_r_dest_reg_1037_pp0_iter3_reg;
reg   [5:0] p_r_dest_reg_1037_pp0_iter4_reg;
reg   [5:0] p_r_dest_reg_1037_pp0_iter5_reg;
reg   [5:0] p_r_dest_reg_1037_pp0_iter6_reg;
reg   [5:0] p_r_dest_reg_1037_pp0_iter7_reg;
reg  signed [31:0] p_g_data_1_reg_1042;
reg  signed [31:0] p_g_data_1_reg_1042_pp0_iter2_reg;
reg   [3:0] p_g_keep_reg_1052;
reg   [3:0] p_g_keep_reg_1052_pp0_iter2_reg;
reg   [3:0] p_g_keep_reg_1052_pp0_iter3_reg;
reg   [3:0] p_g_keep_reg_1052_pp0_iter4_reg;
reg   [3:0] p_g_keep_reg_1052_pp0_iter5_reg;
reg   [3:0] p_g_keep_reg_1052_pp0_iter6_reg;
reg   [3:0] p_g_keep_reg_1052_pp0_iter7_reg;
reg   [3:0] p_g_strb_reg_1057;
reg   [3:0] p_g_strb_reg_1057_pp0_iter2_reg;
reg   [3:0] p_g_strb_reg_1057_pp0_iter3_reg;
reg   [3:0] p_g_strb_reg_1057_pp0_iter4_reg;
reg   [3:0] p_g_strb_reg_1057_pp0_iter5_reg;
reg   [3:0] p_g_strb_reg_1057_pp0_iter6_reg;
reg   [3:0] p_g_strb_reg_1057_pp0_iter7_reg;
reg   [1:0] p_g_user_reg_1062;
reg   [1:0] p_g_user_reg_1062_pp0_iter2_reg;
reg   [1:0] p_g_user_reg_1062_pp0_iter3_reg;
reg   [1:0] p_g_user_reg_1062_pp0_iter4_reg;
reg   [1:0] p_g_user_reg_1062_pp0_iter5_reg;
reg   [1:0] p_g_user_reg_1062_pp0_iter6_reg;
reg   [1:0] p_g_user_reg_1062_pp0_iter7_reg;
reg   [0:0] p_g_last_reg_1067;
reg   [0:0] p_g_last_reg_1067_pp0_iter2_reg;
reg   [0:0] p_g_last_reg_1067_pp0_iter3_reg;
reg   [0:0] p_g_last_reg_1067_pp0_iter4_reg;
reg   [0:0] p_g_last_reg_1067_pp0_iter5_reg;
reg   [0:0] p_g_last_reg_1067_pp0_iter6_reg;
reg   [0:0] p_g_last_reg_1067_pp0_iter7_reg;
reg   [4:0] p_g_id_reg_1072;
reg   [4:0] p_g_id_reg_1072_pp0_iter2_reg;
reg   [4:0] p_g_id_reg_1072_pp0_iter3_reg;
reg   [4:0] p_g_id_reg_1072_pp0_iter4_reg;
reg   [4:0] p_g_id_reg_1072_pp0_iter5_reg;
reg   [4:0] p_g_id_reg_1072_pp0_iter6_reg;
reg   [4:0] p_g_id_reg_1072_pp0_iter7_reg;
reg   [5:0] p_g_dest_reg_1077;
reg   [5:0] p_g_dest_reg_1077_pp0_iter2_reg;
reg   [5:0] p_g_dest_reg_1077_pp0_iter3_reg;
reg   [5:0] p_g_dest_reg_1077_pp0_iter4_reg;
reg   [5:0] p_g_dest_reg_1077_pp0_iter5_reg;
reg   [5:0] p_g_dest_reg_1077_pp0_iter6_reg;
reg   [5:0] p_g_dest_reg_1077_pp0_iter7_reg;
reg  signed [31:0] p_b_data_1_reg_1082;
reg  signed [31:0] p_b_data_1_reg_1082_pp0_iter2_reg;
reg   [3:0] p_b_keep_reg_1098;
reg   [3:0] p_b_keep_reg_1098_pp0_iter2_reg;
reg   [3:0] p_b_keep_reg_1098_pp0_iter3_reg;
reg   [3:0] p_b_keep_reg_1098_pp0_iter4_reg;
reg   [3:0] p_b_keep_reg_1098_pp0_iter5_reg;
reg   [3:0] p_b_keep_reg_1098_pp0_iter6_reg;
reg   [3:0] p_b_keep_reg_1098_pp0_iter7_reg;
reg   [3:0] p_b_strb_reg_1103;
reg   [3:0] p_b_strb_reg_1103_pp0_iter2_reg;
reg   [3:0] p_b_strb_reg_1103_pp0_iter3_reg;
reg   [3:0] p_b_strb_reg_1103_pp0_iter4_reg;
reg   [3:0] p_b_strb_reg_1103_pp0_iter5_reg;
reg   [3:0] p_b_strb_reg_1103_pp0_iter6_reg;
reg   [3:0] p_b_strb_reg_1103_pp0_iter7_reg;
reg   [1:0] p_b_user_reg_1108;
reg   [1:0] p_b_user_reg_1108_pp0_iter2_reg;
reg   [1:0] p_b_user_reg_1108_pp0_iter3_reg;
reg   [1:0] p_b_user_reg_1108_pp0_iter4_reg;
reg   [1:0] p_b_user_reg_1108_pp0_iter5_reg;
reg   [1:0] p_b_user_reg_1108_pp0_iter6_reg;
reg   [1:0] p_b_user_reg_1108_pp0_iter7_reg;
reg   [0:0] p_b_last_reg_1113;
reg   [0:0] p_b_last_reg_1113_pp0_iter2_reg;
reg   [0:0] p_b_last_reg_1113_pp0_iter3_reg;
reg   [0:0] p_b_last_reg_1113_pp0_iter4_reg;
reg   [0:0] p_b_last_reg_1113_pp0_iter5_reg;
reg   [0:0] p_b_last_reg_1113_pp0_iter6_reg;
reg   [0:0] p_b_last_reg_1113_pp0_iter7_reg;
reg   [4:0] p_b_id_reg_1118;
reg   [4:0] p_b_id_reg_1118_pp0_iter2_reg;
reg   [4:0] p_b_id_reg_1118_pp0_iter3_reg;
reg   [4:0] p_b_id_reg_1118_pp0_iter4_reg;
reg   [4:0] p_b_id_reg_1118_pp0_iter5_reg;
reg   [4:0] p_b_id_reg_1118_pp0_iter6_reg;
reg   [4:0] p_b_id_reg_1118_pp0_iter7_reg;
reg   [5:0] p_b_dest_reg_1123;
reg   [5:0] p_b_dest_reg_1123_pp0_iter2_reg;
reg   [5:0] p_b_dest_reg_1123_pp0_iter3_reg;
reg   [5:0] p_b_dest_reg_1123_pp0_iter4_reg;
reg   [5:0] p_b_dest_reg_1123_pp0_iter5_reg;
reg   [5:0] p_b_dest_reg_1123_pp0_iter6_reg;
reg   [5:0] p_b_dest_reg_1123_pp0_iter7_reg;
wire   [31:0] shl_ln36_1_fu_479_p2;
reg   [31:0] shl_ln36_1_reg_1128;
reg   [31:0] shl_ln36_1_reg_1128_pp0_iter2_reg;
wire   [31:0] add_ln36_2_fu_497_p2;
reg   [31:0] add_ln36_2_reg_1133;
wire   [31:0] add_ln36_5_fu_527_p2;
reg   [31:0] add_ln36_5_reg_1138;
wire   [31:0] shl_ln36_4_fu_543_p2;
reg   [31:0] shl_ln36_4_reg_1143;
wire   [31:0] sub_ln36_3_fu_548_p2;
reg   [31:0] sub_ln36_3_reg_1148;
wire   [31:0] add_ln36_7_fu_569_p2;
reg   [31:0] add_ln36_7_reg_1153;
wire   [31:0] sub_ln36_8_fu_596_p2;
reg   [31:0] sub_ln36_8_reg_1158;
wire   [31:0] add_ln37_4_fu_634_p2;
reg   [31:0] add_ln37_4_reg_1163;
wire   [31:0] sub_ln36_4_fu_655_p2;
reg   [31:0] sub_ln36_4_reg_1168;
wire   [31:0] sub_ln36_6_fu_676_p2;
reg   [31:0] sub_ln36_6_reg_1173;
wire   [31:0] add_ln36_10_fu_697_p2;
reg   [31:0] add_ln36_10_reg_1178;
wire   [31:0] grp_fu_340_p2;
reg   [31:0] mul_ln37_reg_1183;
wire   [31:0] grp_fu_345_p2;
reg   [31:0] mul_ln37_1_reg_1188;
wire   [31:0] add_ln37_6_fu_718_p2;
reg   [31:0] add_ln37_6_reg_1193;
wire   [31:0] sub_ln38_3_fu_739_p2;
reg   [31:0] sub_ln38_3_reg_1198;
wire   [31:0] grp_fu_350_p2;
reg   [31:0] mul_ln38_reg_1203;
wire   [31:0] grp_fu_355_p2;
reg   [31:0] mul_ln38_1_reg_1208;
wire  signed [31:0] add_ln36_1_fu_749_p2;
reg  signed [31:0] add_ln36_1_reg_1213;
reg   [0:0] tmp_reg_1218;
reg   [0:0] tmp_reg_1218_pp0_iter5_reg;
reg   [0:0] tmp_reg_1218_pp0_iter6_reg;
wire  signed [31:0] add_ln37_1_fu_766_p2;
reg  signed [31:0] add_ln37_1_reg_1224;
reg   [0:0] tmp_1_reg_1229;
reg   [0:0] tmp_1_reg_1229_pp0_iter5_reg;
reg   [0:0] tmp_1_reg_1229_pp0_iter6_reg;
wire  signed [31:0] add_ln38_1_fu_783_p2;
reg  signed [31:0] add_ln38_1_reg_1235;
reg   [0:0] tmp_2_reg_1240;
reg   [0:0] tmp_2_reg_1240_pp0_iter5_reg;
reg   [0:0] tmp_2_reg_1240_pp0_iter6_reg;
wire   [64:0] grp_fu_325_p2;
reg   [64:0] mul_ln36_reg_1261;
reg   [15:0] tmp_1_cast1_reg_1267;
wire   [64:0] grp_fu_330_p2;
reg   [64:0] mul_ln37_2_reg_1272;
reg   [15:0] tmp_3_cast2_reg_1278;
wire   [64:0] grp_fu_335_p2;
reg   [64:0] mul_ln38_2_reg_1283;
reg   [15:0] tmp_5_cast3_reg_1289;
wire   [15:0] y_fu_879_p3;
reg   [15:0] y_reg_1294;
wire   [15:0] u_fu_926_p3;
reg   [15:0] u_reg_1299;
wire   [15:0] v_fu_973_p3;
reg   [15:0] v_reg_1304;
reg   [30:0] i_fu_186;
wire   [30:0] add_ln24_fu_378_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_i_load;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001_grp1;
wire   [33:0] grp_fu_325_p1;
wire   [33:0] grp_fu_330_p1;
wire   [33:0] grp_fu_335_p1;
wire  signed [14:0] grp_fu_340_p1;
wire  signed [15:0] grp_fu_345_p1;
wire  signed [16:0] grp_fu_350_p1;
wire  signed [14:0] grp_fu_355_p1;
wire   [31:0] i_cast_fu_368_p1;
wire  signed [31:0] shl_ln36_fu_473_p0;
wire  signed [31:0] shl_ln36_1_fu_479_p0;
wire   [31:0] shl_ln36_fu_473_p2;
wire  signed [31:0] shl_ln36_2_fu_491_p0;
wire   [31:0] sub_ln36_2_fu_485_p2;
wire   [31:0] shl_ln36_2_fu_491_p2;
wire  signed [31:0] shl_ln36_7_fu_503_p0;
wire  signed [31:0] shl_ln36_8_fu_509_p0;
wire   [31:0] shl_ln36_7_fu_503_p2;
wire   [31:0] shl_ln36_8_fu_509_p2;
wire  signed [31:0] shl_ln36_9_fu_521_p0;
wire   [31:0] sub_ln36_5_fu_515_p2;
wire   [31:0] shl_ln36_9_fu_521_p2;
wire   [31:0] shl_ln36_3_fu_533_p2;
wire   [31:0] add_ln36_3_fu_538_p2;
wire   [31:0] shl_ln36_10_fu_554_p2;
wire   [31:0] add_ln36_6_fu_559_p2;
wire   [31:0] shl_ln36_11_fu_564_p2;
wire   [31:0] shl_ln36_14_fu_575_p2;
wire   [31:0] shl_ln36_15_fu_580_p2;
wire   [31:0] sub_ln36_7_fu_585_p2;
wire   [31:0] shl_ln36_16_fu_591_p2;
wire   [31:0] shl_ln37_fu_602_p2;
wire   [31:0] shl_ln37_1_fu_607_p2;
wire   [31:0] add_ln37_2_fu_612_p2;
wire   [31:0] shl_ln37_2_fu_618_p2;
wire   [31:0] add_ln37_3_fu_623_p2;
wire   [31:0] shl_ln37_3_fu_629_p2;
wire   [31:0] shl_ln36_5_fu_640_p2;
wire   [31:0] add_ln36_4_fu_645_p2;
wire   [31:0] shl_ln36_6_fu_650_p2;
wire   [31:0] shl_ln36_12_fu_661_p2;
wire   [31:0] add_ln36_8_fu_666_p2;
wire   [31:0] shl_ln36_13_fu_671_p2;
wire   [31:0] shl_ln36_17_fu_682_p2;
wire   [31:0] add_ln36_9_fu_687_p2;
wire   [31:0] shl_ln36_18_fu_692_p2;
wire   [31:0] shl_ln37_4_fu_703_p2;
wire   [31:0] add_ln37_5_fu_708_p2;
wire   [31:0] shl_ln37_5_fu_713_p2;
wire   [31:0] shl_ln38_fu_724_p2;
wire   [31:0] sub_ln38_2_fu_729_p2;
wire   [31:0] add_ln38_2_fu_734_p2;
wire   [31:0] add_ln36_fu_745_p2;
wire   [31:0] add_ln37_fu_762_p2;
wire   [31:0] add_ln38_fu_779_p2;
wire   [64:0] sub_ln36_fu_838_p2;
wire   [14:0] tmp_cast_fu_843_p4;
wire   [14:0] tmp_1_cast_fu_853_p4;
wire   [14:0] select_ln36_fu_862_p3;
wire   [15:0] zext_ln36_fu_869_p1;
wire   [15:0] sub_ln36_1_fu_873_p2;
wire   [64:0] sub_ln37_fu_885_p2;
wire   [14:0] tmp_2_cast_fu_890_p4;
wire   [14:0] tmp_3_cast_fu_900_p4;
wire   [14:0] select_ln37_fu_909_p3;
wire   [15:0] zext_ln37_fu_916_p1;
wire   [15:0] sub_ln37_1_fu_920_p2;
wire   [64:0] sub_ln38_fu_932_p2;
wire   [14:0] tmp_4_cast_fu_937_p4;
wire   [14:0] tmp_5_cast_fu_947_p4;
wire   [14:0] select_ln38_fu_956_p3;
wire   [15:0] zext_ln38_fu_963_p1;
wire   [15:0] sub_ln38_1_fu_967_p2;
reg    grp_fu_325_ce;
reg    grp_fu_330_ce;
reg    grp_fu_335_ce;
reg    grp_fu_340_ce;
reg    grp_fu_345_ce;
reg    grp_fu_350_ce;
reg    grp_fu_355_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 i_fu_186 = 31'd0;
#0 ap_done_reg = 1'b0;
end

toyuv_mul_32s_34ns_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln36_1_reg_1213),
    .din1(grp_fu_325_p1),
    .ce(grp_fu_325_ce),
    .dout(grp_fu_325_p2)
);

toyuv_mul_32s_34ns_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln37_1_reg_1224),
    .din1(grp_fu_330_p1),
    .ce(grp_fu_330_ce),
    .dout(grp_fu_330_p2)
);

toyuv_mul_32s_34ns_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln38_1_reg_1235),
    .din1(grp_fu_335_p1),
    .ce(grp_fu_335_ce),
    .dout(grp_fu_335_p2)
);

toyuv_mul_32s_15s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 32 ))
mul_32s_15s_32_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_data_1_reg_1002),
    .din1(grp_fu_340_p1),
    .ce(grp_fu_340_ce),
    .dout(grp_fu_340_p2)
);

toyuv_mul_32s_16s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_g_data_1_reg_1042),
    .din1(grp_fu_345_p1),
    .ce(grp_fu_345_ce),
    .dout(grp_fu_345_p2)
);

toyuv_mul_32s_17s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_32s_17s_32_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_g_data_1_reg_1042),
    .din1(grp_fu_350_p1),
    .ce(grp_fu_350_ce),
    .dout(grp_fu_350_p2)
);

toyuv_mul_32s_15s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 32 ))
mul_32s_15s_32_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_b_data_1_reg_1082),
    .din1(grp_fu_355_p1),
    .ce(grp_fu_355_ce),
    .dout(grp_fu_355_p2)
);

toyuv_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln24_fu_372_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_186 <= add_ln24_fu_378_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_186 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        add_ln36_10_reg_1178 <= add_ln36_10_fu_697_p2;
        add_ln36_1_reg_1213 <= add_ln36_1_fu_749_p2;
        add_ln36_7_reg_1153 <= add_ln36_7_fu_569_p2;
        add_ln37_1_reg_1224 <= add_ln37_1_fu_766_p2;
        add_ln37_4_reg_1163 <= add_ln37_4_fu_634_p2;
        add_ln37_6_reg_1193 <= add_ln37_6_fu_718_p2;
        add_ln38_1_reg_1235 <= add_ln38_1_fu_783_p2;
        mul_ln36_reg_1261 <= grp_fu_325_p2;
        mul_ln37_1_reg_1188 <= grp_fu_345_p2;
        mul_ln37_2_reg_1272 <= grp_fu_330_p2;
        mul_ln37_reg_1183 <= grp_fu_340_p2;
        mul_ln38_1_reg_1208 <= grp_fu_355_p2;
        mul_ln38_2_reg_1283 <= grp_fu_335_p2;
        mul_ln38_reg_1203 <= grp_fu_350_p2;
        p_b_data_1_reg_1082_pp0_iter2_reg <= p_b_data_1_reg_1082;
        p_b_dest_reg_1123_pp0_iter2_reg <= p_b_dest_reg_1123;
        p_b_dest_reg_1123_pp0_iter3_reg <= p_b_dest_reg_1123_pp0_iter2_reg;
        p_b_dest_reg_1123_pp0_iter4_reg <= p_b_dest_reg_1123_pp0_iter3_reg;
        p_b_dest_reg_1123_pp0_iter5_reg <= p_b_dest_reg_1123_pp0_iter4_reg;
        p_b_dest_reg_1123_pp0_iter6_reg <= p_b_dest_reg_1123_pp0_iter5_reg;
        p_b_dest_reg_1123_pp0_iter7_reg <= p_b_dest_reg_1123_pp0_iter6_reg;
        p_b_id_reg_1118_pp0_iter2_reg <= p_b_id_reg_1118;
        p_b_id_reg_1118_pp0_iter3_reg <= p_b_id_reg_1118_pp0_iter2_reg;
        p_b_id_reg_1118_pp0_iter4_reg <= p_b_id_reg_1118_pp0_iter3_reg;
        p_b_id_reg_1118_pp0_iter5_reg <= p_b_id_reg_1118_pp0_iter4_reg;
        p_b_id_reg_1118_pp0_iter6_reg <= p_b_id_reg_1118_pp0_iter5_reg;
        p_b_id_reg_1118_pp0_iter7_reg <= p_b_id_reg_1118_pp0_iter6_reg;
        p_b_keep_reg_1098_pp0_iter2_reg <= p_b_keep_reg_1098;
        p_b_keep_reg_1098_pp0_iter3_reg <= p_b_keep_reg_1098_pp0_iter2_reg;
        p_b_keep_reg_1098_pp0_iter4_reg <= p_b_keep_reg_1098_pp0_iter3_reg;
        p_b_keep_reg_1098_pp0_iter5_reg <= p_b_keep_reg_1098_pp0_iter4_reg;
        p_b_keep_reg_1098_pp0_iter6_reg <= p_b_keep_reg_1098_pp0_iter5_reg;
        p_b_keep_reg_1098_pp0_iter7_reg <= p_b_keep_reg_1098_pp0_iter6_reg;
        p_b_last_reg_1113_pp0_iter2_reg <= p_b_last_reg_1113;
        p_b_last_reg_1113_pp0_iter3_reg <= p_b_last_reg_1113_pp0_iter2_reg;
        p_b_last_reg_1113_pp0_iter4_reg <= p_b_last_reg_1113_pp0_iter3_reg;
        p_b_last_reg_1113_pp0_iter5_reg <= p_b_last_reg_1113_pp0_iter4_reg;
        p_b_last_reg_1113_pp0_iter6_reg <= p_b_last_reg_1113_pp0_iter5_reg;
        p_b_last_reg_1113_pp0_iter7_reg <= p_b_last_reg_1113_pp0_iter6_reg;
        p_b_strb_reg_1103_pp0_iter2_reg <= p_b_strb_reg_1103;
        p_b_strb_reg_1103_pp0_iter3_reg <= p_b_strb_reg_1103_pp0_iter2_reg;
        p_b_strb_reg_1103_pp0_iter4_reg <= p_b_strb_reg_1103_pp0_iter3_reg;
        p_b_strb_reg_1103_pp0_iter5_reg <= p_b_strb_reg_1103_pp0_iter4_reg;
        p_b_strb_reg_1103_pp0_iter6_reg <= p_b_strb_reg_1103_pp0_iter5_reg;
        p_b_strb_reg_1103_pp0_iter7_reg <= p_b_strb_reg_1103_pp0_iter6_reg;
        p_b_user_reg_1108_pp0_iter2_reg <= p_b_user_reg_1108;
        p_b_user_reg_1108_pp0_iter3_reg <= p_b_user_reg_1108_pp0_iter2_reg;
        p_b_user_reg_1108_pp0_iter4_reg <= p_b_user_reg_1108_pp0_iter3_reg;
        p_b_user_reg_1108_pp0_iter5_reg <= p_b_user_reg_1108_pp0_iter4_reg;
        p_b_user_reg_1108_pp0_iter6_reg <= p_b_user_reg_1108_pp0_iter5_reg;
        p_b_user_reg_1108_pp0_iter7_reg <= p_b_user_reg_1108_pp0_iter6_reg;
        p_g_data_1_reg_1042_pp0_iter2_reg <= p_g_data_1_reg_1042;
        p_g_dest_reg_1077_pp0_iter2_reg <= p_g_dest_reg_1077;
        p_g_dest_reg_1077_pp0_iter3_reg <= p_g_dest_reg_1077_pp0_iter2_reg;
        p_g_dest_reg_1077_pp0_iter4_reg <= p_g_dest_reg_1077_pp0_iter3_reg;
        p_g_dest_reg_1077_pp0_iter5_reg <= p_g_dest_reg_1077_pp0_iter4_reg;
        p_g_dest_reg_1077_pp0_iter6_reg <= p_g_dest_reg_1077_pp0_iter5_reg;
        p_g_dest_reg_1077_pp0_iter7_reg <= p_g_dest_reg_1077_pp0_iter6_reg;
        p_g_id_reg_1072_pp0_iter2_reg <= p_g_id_reg_1072;
        p_g_id_reg_1072_pp0_iter3_reg <= p_g_id_reg_1072_pp0_iter2_reg;
        p_g_id_reg_1072_pp0_iter4_reg <= p_g_id_reg_1072_pp0_iter3_reg;
        p_g_id_reg_1072_pp0_iter5_reg <= p_g_id_reg_1072_pp0_iter4_reg;
        p_g_id_reg_1072_pp0_iter6_reg <= p_g_id_reg_1072_pp0_iter5_reg;
        p_g_id_reg_1072_pp0_iter7_reg <= p_g_id_reg_1072_pp0_iter6_reg;
        p_g_keep_reg_1052_pp0_iter2_reg <= p_g_keep_reg_1052;
        p_g_keep_reg_1052_pp0_iter3_reg <= p_g_keep_reg_1052_pp0_iter2_reg;
        p_g_keep_reg_1052_pp0_iter4_reg <= p_g_keep_reg_1052_pp0_iter3_reg;
        p_g_keep_reg_1052_pp0_iter5_reg <= p_g_keep_reg_1052_pp0_iter4_reg;
        p_g_keep_reg_1052_pp0_iter6_reg <= p_g_keep_reg_1052_pp0_iter5_reg;
        p_g_keep_reg_1052_pp0_iter7_reg <= p_g_keep_reg_1052_pp0_iter6_reg;
        p_g_last_reg_1067_pp0_iter2_reg <= p_g_last_reg_1067;
        p_g_last_reg_1067_pp0_iter3_reg <= p_g_last_reg_1067_pp0_iter2_reg;
        p_g_last_reg_1067_pp0_iter4_reg <= p_g_last_reg_1067_pp0_iter3_reg;
        p_g_last_reg_1067_pp0_iter5_reg <= p_g_last_reg_1067_pp0_iter4_reg;
        p_g_last_reg_1067_pp0_iter6_reg <= p_g_last_reg_1067_pp0_iter5_reg;
        p_g_last_reg_1067_pp0_iter7_reg <= p_g_last_reg_1067_pp0_iter6_reg;
        p_g_strb_reg_1057_pp0_iter2_reg <= p_g_strb_reg_1057;
        p_g_strb_reg_1057_pp0_iter3_reg <= p_g_strb_reg_1057_pp0_iter2_reg;
        p_g_strb_reg_1057_pp0_iter4_reg <= p_g_strb_reg_1057_pp0_iter3_reg;
        p_g_strb_reg_1057_pp0_iter5_reg <= p_g_strb_reg_1057_pp0_iter4_reg;
        p_g_strb_reg_1057_pp0_iter6_reg <= p_g_strb_reg_1057_pp0_iter5_reg;
        p_g_strb_reg_1057_pp0_iter7_reg <= p_g_strb_reg_1057_pp0_iter6_reg;
        p_g_user_reg_1062_pp0_iter2_reg <= p_g_user_reg_1062;
        p_g_user_reg_1062_pp0_iter3_reg <= p_g_user_reg_1062_pp0_iter2_reg;
        p_g_user_reg_1062_pp0_iter4_reg <= p_g_user_reg_1062_pp0_iter3_reg;
        p_g_user_reg_1062_pp0_iter5_reg <= p_g_user_reg_1062_pp0_iter4_reg;
        p_g_user_reg_1062_pp0_iter6_reg <= p_g_user_reg_1062_pp0_iter5_reg;
        p_g_user_reg_1062_pp0_iter7_reg <= p_g_user_reg_1062_pp0_iter6_reg;
        p_r_data_1_reg_1002_pp0_iter2_reg <= p_r_data_1_reg_1002;
        p_r_dest_reg_1037_pp0_iter2_reg <= p_r_dest_reg_1037;
        p_r_dest_reg_1037_pp0_iter3_reg <= p_r_dest_reg_1037_pp0_iter2_reg;
        p_r_dest_reg_1037_pp0_iter4_reg <= p_r_dest_reg_1037_pp0_iter3_reg;
        p_r_dest_reg_1037_pp0_iter5_reg <= p_r_dest_reg_1037_pp0_iter4_reg;
        p_r_dest_reg_1037_pp0_iter6_reg <= p_r_dest_reg_1037_pp0_iter5_reg;
        p_r_dest_reg_1037_pp0_iter7_reg <= p_r_dest_reg_1037_pp0_iter6_reg;
        p_r_id_reg_1032_pp0_iter2_reg <= p_r_id_reg_1032;
        p_r_id_reg_1032_pp0_iter3_reg <= p_r_id_reg_1032_pp0_iter2_reg;
        p_r_id_reg_1032_pp0_iter4_reg <= p_r_id_reg_1032_pp0_iter3_reg;
        p_r_id_reg_1032_pp0_iter5_reg <= p_r_id_reg_1032_pp0_iter4_reg;
        p_r_id_reg_1032_pp0_iter6_reg <= p_r_id_reg_1032_pp0_iter5_reg;
        p_r_id_reg_1032_pp0_iter7_reg <= p_r_id_reg_1032_pp0_iter6_reg;
        p_r_keep_reg_1012_pp0_iter2_reg <= p_r_keep_reg_1012;
        p_r_keep_reg_1012_pp0_iter3_reg <= p_r_keep_reg_1012_pp0_iter2_reg;
        p_r_keep_reg_1012_pp0_iter4_reg <= p_r_keep_reg_1012_pp0_iter3_reg;
        p_r_keep_reg_1012_pp0_iter5_reg <= p_r_keep_reg_1012_pp0_iter4_reg;
        p_r_keep_reg_1012_pp0_iter6_reg <= p_r_keep_reg_1012_pp0_iter5_reg;
        p_r_keep_reg_1012_pp0_iter7_reg <= p_r_keep_reg_1012_pp0_iter6_reg;
        p_r_last_reg_1027_pp0_iter2_reg <= p_r_last_reg_1027;
        p_r_last_reg_1027_pp0_iter3_reg <= p_r_last_reg_1027_pp0_iter2_reg;
        p_r_last_reg_1027_pp0_iter4_reg <= p_r_last_reg_1027_pp0_iter3_reg;
        p_r_last_reg_1027_pp0_iter5_reg <= p_r_last_reg_1027_pp0_iter4_reg;
        p_r_last_reg_1027_pp0_iter6_reg <= p_r_last_reg_1027_pp0_iter5_reg;
        p_r_last_reg_1027_pp0_iter7_reg <= p_r_last_reg_1027_pp0_iter6_reg;
        p_r_strb_reg_1017_pp0_iter2_reg <= p_r_strb_reg_1017;
        p_r_strb_reg_1017_pp0_iter3_reg <= p_r_strb_reg_1017_pp0_iter2_reg;
        p_r_strb_reg_1017_pp0_iter4_reg <= p_r_strb_reg_1017_pp0_iter3_reg;
        p_r_strb_reg_1017_pp0_iter5_reg <= p_r_strb_reg_1017_pp0_iter4_reg;
        p_r_strb_reg_1017_pp0_iter6_reg <= p_r_strb_reg_1017_pp0_iter5_reg;
        p_r_strb_reg_1017_pp0_iter7_reg <= p_r_strb_reg_1017_pp0_iter6_reg;
        p_r_user_reg_1022_pp0_iter2_reg <= p_r_user_reg_1022;
        p_r_user_reg_1022_pp0_iter3_reg <= p_r_user_reg_1022_pp0_iter2_reg;
        p_r_user_reg_1022_pp0_iter4_reg <= p_r_user_reg_1022_pp0_iter3_reg;
        p_r_user_reg_1022_pp0_iter5_reg <= p_r_user_reg_1022_pp0_iter4_reg;
        p_r_user_reg_1022_pp0_iter6_reg <= p_r_user_reg_1022_pp0_iter5_reg;
        p_r_user_reg_1022_pp0_iter7_reg <= p_r_user_reg_1022_pp0_iter6_reg;
        shl_ln36_1_reg_1128_pp0_iter2_reg <= shl_ln36_1_reg_1128;
        shl_ln36_4_reg_1143 <= shl_ln36_4_fu_543_p2;
        sub_ln36_3_reg_1148 <= sub_ln36_3_fu_548_p2;
        sub_ln36_4_reg_1168 <= sub_ln36_4_fu_655_p2;
        sub_ln36_6_reg_1173 <= sub_ln36_6_fu_676_p2;
        sub_ln36_8_reg_1158 <= sub_ln36_8_fu_596_p2;
        sub_ln38_3_reg_1198 <= sub_ln38_3_fu_739_p2;
        tmp_1_cast1_reg_1267 <= {{grp_fu_325_p2[64:49]}};
        tmp_1_reg_1229 <= add_ln37_1_fu_766_p2[32'd31];
        tmp_1_reg_1229_pp0_iter5_reg <= tmp_1_reg_1229;
        tmp_1_reg_1229_pp0_iter6_reg <= tmp_1_reg_1229_pp0_iter5_reg;
        tmp_2_reg_1240 <= add_ln38_1_fu_783_p2[32'd31];
        tmp_2_reg_1240_pp0_iter5_reg <= tmp_2_reg_1240;
        tmp_2_reg_1240_pp0_iter6_reg <= tmp_2_reg_1240_pp0_iter5_reg;
        tmp_3_cast2_reg_1278 <= {{grp_fu_330_p2[64:49]}};
        tmp_5_cast3_reg_1289 <= {{grp_fu_335_p2[64:49]}};
        tmp_reg_1218 <= add_ln36_1_fu_749_p2[32'd31];
        tmp_reg_1218_pp0_iter5_reg <= tmp_reg_1218;
        tmp_reg_1218_pp0_iter6_reg <= tmp_reg_1218_pp0_iter5_reg;
        u_reg_1299 <= u_fu_926_p3;
        v_reg_1304 <= v_fu_973_p3;
        y_reg_1294 <= y_fu_879_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln36_2_reg_1133 <= add_ln36_2_fu_497_p2;
        add_ln36_5_reg_1138 <= add_ln36_5_fu_527_p2;
        p_b_data_1_reg_1082 <= ch_b_TDATA;
        p_b_dest_reg_1123 <= ch_b_TDEST;
        p_b_id_reg_1118 <= ch_b_TID;
        p_b_keep_reg_1098 <= ch_b_TKEEP;
        p_b_last_reg_1113 <= ch_b_TLAST;
        p_b_strb_reg_1103 <= ch_b_TSTRB;
        p_b_user_reg_1108 <= ch_b_TUSER;
        p_g_data_1_reg_1042 <= ch_g_TDATA;
        p_g_dest_reg_1077 <= ch_g_TDEST;
        p_g_id_reg_1072 <= ch_g_TID;
        p_g_keep_reg_1052 <= ch_g_TKEEP;
        p_g_last_reg_1067 <= ch_g_TLAST;
        p_g_strb_reg_1057 <= ch_g_TSTRB;
        p_g_user_reg_1062 <= ch_g_TUSER;
        p_r_data_1_reg_1002 <= ch_r_TDATA;
        p_r_dest_reg_1037 <= ch_r_TDEST;
        p_r_id_reg_1032 <= ch_r_TID;
        p_r_keep_reg_1012 <= ch_r_TKEEP;
        p_r_last_reg_1027 <= ch_r_TLAST;
        p_r_strb_reg_1017 <= ch_r_TSTRB;
        p_r_user_reg_1022 <= ch_r_TUSER;
        shl_ln36_1_reg_1128 <= shl_ln36_1_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_372_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 31'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_186;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_b_TDATA_blk_n = ch_b_TVALID;
    end else begin
        ch_b_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_b_TREADY = 1'b1;
    end else begin
        ch_b_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_g_TDATA_blk_n = ch_g_TVALID;
    end else begin
        ch_g_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_g_TREADY = 1'b1;
    end else begin
        ch_g_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_r_TDATA_blk_n = ch_r_TVALID;
    end else begin
        ch_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_r_TREADY = 1'b1;
    end else begin
        ch_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        ch_u_TDATA_blk_n = ch_u_TREADY;
    end else begin
        ch_u_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        ch_u_TVALID = 1'b1;
    end else begin
        ch_u_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        ch_v_TDATA_blk_n = ch_v_TREADY;
    end else begin
        ch_v_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        ch_v_TVALID = 1'b1;
    end else begin
        ch_v_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        ch_y_TDATA_blk_n = ch_y_TREADY;
    end else begin
        ch_y_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        ch_y_TVALID = 1'b1;
    end else begin
        ch_y_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_325_ce = 1'b1;
    end else begin
        grp_fu_325_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_330_ce = 1'b1;
    end else begin
        grp_fu_330_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_335_ce = 1'b1;
    end else begin
        grp_fu_335_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_340_ce = 1'b1;
    end else begin
        grp_fu_340_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_345_ce = 1'b1;
    end else begin
        grp_fu_345_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_350_ce = 1'b1;
    end else begin
        grp_fu_350_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_355_ce = 1'b1;
    end else begin
        grp_fu_355_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_fu_378_p2 = (ap_sig_allocacmp_i_load + 31'd1);

assign add_ln36_10_fu_697_p2 = (add_ln36_9_fu_687_p2 + shl_ln36_18_fu_692_p2);

assign add_ln36_1_fu_749_p2 = (add_ln36_fu_745_p2 + sub_ln36_6_reg_1173);

assign add_ln36_2_fu_497_p2 = (sub_ln36_2_fu_485_p2 + shl_ln36_2_fu_491_p2);

assign add_ln36_3_fu_538_p2 = (add_ln36_2_reg_1133 + shl_ln36_3_fu_533_p2);

assign add_ln36_4_fu_645_p2 = (sub_ln36_3_reg_1148 + shl_ln36_5_fu_640_p2);

assign add_ln36_5_fu_527_p2 = (sub_ln36_5_fu_515_p2 + shl_ln36_9_fu_521_p2);

assign add_ln36_6_fu_559_p2 = (add_ln36_5_reg_1138 + shl_ln36_10_fu_554_p2);

assign add_ln36_7_fu_569_p2 = (add_ln36_6_fu_559_p2 + shl_ln36_11_fu_564_p2);

assign add_ln36_8_fu_666_p2 = (add_ln36_7_reg_1153 + shl_ln36_12_fu_661_p2);

assign add_ln36_9_fu_687_p2 = (sub_ln36_8_reg_1158 + shl_ln36_17_fu_682_p2);

assign add_ln36_fu_745_p2 = (sub_ln36_4_reg_1168 + add_ln36_10_reg_1178);

assign add_ln37_1_fu_766_p2 = (add_ln37_fu_762_p2 + mul_ln37_1_reg_1188);

assign add_ln37_2_fu_612_p2 = (shl_ln37_fu_602_p2 + shl_ln37_1_fu_607_p2);

assign add_ln37_3_fu_623_p2 = (add_ln37_2_fu_612_p2 + shl_ln37_2_fu_618_p2);

assign add_ln37_4_fu_634_p2 = (add_ln37_3_fu_623_p2 + shl_ln37_3_fu_629_p2);

assign add_ln37_5_fu_708_p2 = (add_ln37_4_reg_1163 + shl_ln37_4_fu_703_p2);

assign add_ln37_6_fu_718_p2 = (add_ln37_5_fu_708_p2 + shl_ln37_5_fu_713_p2);

assign add_ln37_fu_762_p2 = (mul_ln37_reg_1183 + add_ln37_6_reg_1193);

assign add_ln38_1_fu_783_p2 = (add_ln38_fu_779_p2 + mul_ln38_reg_1203);

assign add_ln38_2_fu_734_p2 = (sub_ln38_2_fu_729_p2 + shl_ln36_4_reg_1143);

assign add_ln38_fu_779_p2 = (sub_ln38_3_reg_1198 + mul_ln38_1_reg_1208);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8_grp1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8_grp1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8_grp1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1)));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8_grp1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1_grp1 = ((ch_b_TVALID == 1'b0) | (ch_g_TVALID == 1'b0) | (ch_r_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter8_grp1 = ((ch_v_TREADY == 1'b0) | (ch_u_TREADY == 1'b0) | (ch_y_TREADY == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign ch_u_TDATA = $signed(u_reg_1299);

assign ch_u_TDEST = p_g_dest_reg_1077_pp0_iter7_reg;

assign ch_u_TID = p_g_id_reg_1072_pp0_iter7_reg;

assign ch_u_TKEEP = p_g_keep_reg_1052_pp0_iter7_reg;

assign ch_u_TLAST = p_g_last_reg_1067_pp0_iter7_reg;

assign ch_u_TSTRB = p_g_strb_reg_1057_pp0_iter7_reg;

assign ch_u_TUSER = p_g_user_reg_1062_pp0_iter7_reg;

assign ch_v_TDATA = $signed(v_reg_1304);

assign ch_v_TDEST = p_b_dest_reg_1123_pp0_iter7_reg;

assign ch_v_TID = p_b_id_reg_1118_pp0_iter7_reg;

assign ch_v_TKEEP = p_b_keep_reg_1098_pp0_iter7_reg;

assign ch_v_TLAST = p_b_last_reg_1113_pp0_iter7_reg;

assign ch_v_TSTRB = p_b_strb_reg_1103_pp0_iter7_reg;

assign ch_v_TUSER = p_b_user_reg_1108_pp0_iter7_reg;

assign ch_y_TDATA = $signed(y_reg_1294);

assign ch_y_TDEST = p_r_dest_reg_1037_pp0_iter7_reg;

assign ch_y_TID = p_r_id_reg_1032_pp0_iter7_reg;

assign ch_y_TKEEP = p_r_keep_reg_1012_pp0_iter7_reg;

assign ch_y_TLAST = p_r_last_reg_1027_pp0_iter7_reg;

assign ch_y_TSTRB = p_r_strb_reg_1017_pp0_iter7_reg;

assign ch_y_TUSER = p_r_user_reg_1022_pp0_iter7_reg;

assign grp_fu_325_p1 = 65'd5629499535;

assign grp_fu_330_p1 = 65'd5629499535;

assign grp_fu_335_p1 = 65'd5629499535;

assign grp_fu_340_p1 = 32'd4294952583;

assign grp_fu_345_p1 = 32'd4294938410;

assign grp_fu_350_p1 = 32'd4294915797;

assign grp_fu_355_p1 = 32'd4294957295;

assign i_cast_fu_368_p1 = ap_sig_allocacmp_i_load;

assign icmp_ln24_fu_372_p2 = (($signed(i_cast_fu_368_p1) < $signed(total)) ? 1'b1 : 1'b0);

assign select_ln36_fu_862_p3 = ((tmp_reg_1218_pp0_iter6_reg[0:0] == 1'b1) ? tmp_cast_fu_843_p4 : tmp_1_cast_fu_853_p4);

assign select_ln37_fu_909_p3 = ((tmp_1_reg_1229_pp0_iter6_reg[0:0] == 1'b1) ? tmp_2_cast_fu_890_p4 : tmp_3_cast_fu_900_p4);

assign select_ln38_fu_956_p3 = ((tmp_2_reg_1240_pp0_iter6_reg[0:0] == 1'b1) ? tmp_4_cast_fu_937_p4 : tmp_5_cast_fu_947_p4);

assign shl_ln36_10_fu_554_p2 = p_g_data_1_reg_1042 << 32'd8;

assign shl_ln36_11_fu_564_p2 = p_g_data_1_reg_1042 << 32'd6;

assign shl_ln36_12_fu_661_p2 = p_g_data_1_reg_1042_pp0_iter2_reg << 32'd4;

assign shl_ln36_13_fu_671_p2 = p_g_data_1_reg_1042_pp0_iter2_reg << 32'd2;

assign shl_ln36_14_fu_575_p2 = p_b_data_1_reg_1082 << 32'd14;

assign shl_ln36_15_fu_580_p2 = p_b_data_1_reg_1082 << 32'd12;

assign shl_ln36_16_fu_591_p2 = p_b_data_1_reg_1082 << 32'd10;

assign shl_ln36_17_fu_682_p2 = p_b_data_1_reg_1082_pp0_iter2_reg << 32'd7;

assign shl_ln36_18_fu_692_p2 = p_b_data_1_reg_1082_pp0_iter2_reg << 32'd3;

assign shl_ln36_1_fu_479_p0 = ch_r_TDATA;

assign shl_ln36_1_fu_479_p2 = shl_ln36_1_fu_479_p0 << 32'd12;

assign shl_ln36_2_fu_491_p0 = ch_r_TDATA;

assign shl_ln36_2_fu_491_p2 = shl_ln36_2_fu_491_p0 << 32'd10;

assign shl_ln36_3_fu_533_p2 = p_r_data_1_reg_1002 << 32'd8;

assign shl_ln36_4_fu_543_p2 = p_r_data_1_reg_1002 << 32'd6;

assign shl_ln36_5_fu_640_p2 = p_r_data_1_reg_1002_pp0_iter2_reg << 32'd4;

assign shl_ln36_6_fu_650_p2 = p_r_data_1_reg_1002_pp0_iter2_reg << 32'd2;

assign shl_ln36_7_fu_503_p0 = ch_g_TDATA;

assign shl_ln36_7_fu_503_p2 = shl_ln36_7_fu_503_p0 << 32'd16;

assign shl_ln36_8_fu_509_p0 = ch_g_TDATA;

assign shl_ln36_8_fu_509_p2 = shl_ln36_8_fu_509_p0 << 32'd13;

assign shl_ln36_9_fu_521_p0 = ch_g_TDATA;

assign shl_ln36_9_fu_521_p2 = shl_ln36_9_fu_521_p0 << 32'd10;

assign shl_ln36_fu_473_p0 = ch_r_TDATA;

assign shl_ln36_fu_473_p2 = shl_ln36_fu_473_p0 << 32'd15;

assign shl_ln37_1_fu_607_p2 = p_b_data_1_reg_1082 << 32'd13;

assign shl_ln37_2_fu_618_p2 = p_b_data_1_reg_1082 << 32'd11;

assign shl_ln37_3_fu_629_p2 = p_b_data_1_reg_1082 << 32'd9;

assign shl_ln37_4_fu_703_p2 = p_b_data_1_reg_1082_pp0_iter2_reg << 32'd6;

assign shl_ln37_5_fu_713_p2 = p_b_data_1_reg_1082_pp0_iter2_reg << 32'd4;

assign shl_ln37_fu_602_p2 = p_b_data_1_reg_1082 << 32'd15;

assign shl_ln38_fu_724_p2 = p_r_data_1_reg_1002_pp0_iter2_reg << 32'd16;

assign sub_ln36_1_fu_873_p2 = (16'd0 - zext_ln36_fu_869_p1);

assign sub_ln36_2_fu_485_p2 = (shl_ln36_fu_473_p2 - shl_ln36_1_fu_479_p2);

assign sub_ln36_3_fu_548_p2 = (add_ln36_3_fu_538_p2 - shl_ln36_4_fu_543_p2);

assign sub_ln36_4_fu_655_p2 = (add_ln36_4_fu_645_p2 - shl_ln36_6_fu_650_p2);

assign sub_ln36_5_fu_515_p2 = (shl_ln36_7_fu_503_p2 - shl_ln36_8_fu_509_p2);

assign sub_ln36_6_fu_676_p2 = (add_ln36_8_fu_666_p2 - shl_ln36_13_fu_671_p2);

assign sub_ln36_7_fu_585_p2 = (shl_ln36_14_fu_575_p2 - shl_ln36_15_fu_580_p2);

assign sub_ln36_8_fu_596_p2 = (sub_ln36_7_fu_585_p2 - shl_ln36_16_fu_591_p2);

assign sub_ln36_fu_838_p2 = (65'd0 - mul_ln36_reg_1261);

assign sub_ln37_1_fu_920_p2 = (16'd0 - zext_ln37_fu_916_p1);

assign sub_ln37_fu_885_p2 = (65'd0 - mul_ln37_2_reg_1272);

assign sub_ln38_1_fu_967_p2 = (16'd0 - zext_ln38_fu_963_p1);

assign sub_ln38_2_fu_729_p2 = (shl_ln38_fu_724_p2 - shl_ln36_1_reg_1128_pp0_iter2_reg);

assign sub_ln38_3_fu_739_p2 = (add_ln38_2_fu_734_p2 - shl_ln36_6_fu_650_p2);

assign sub_ln38_fu_932_p2 = (65'd0 - mul_ln38_2_reg_1283);

assign tmp_1_cast_fu_853_p4 = {{mul_ln36_reg_1261[63:49]}};

assign tmp_2_cast_fu_890_p4 = {{sub_ln37_fu_885_p2[63:49]}};

assign tmp_3_cast_fu_900_p4 = {{mul_ln37_2_reg_1272[63:49]}};

assign tmp_4_cast_fu_937_p4 = {{sub_ln38_fu_932_p2[63:49]}};

assign tmp_5_cast_fu_947_p4 = {{mul_ln38_2_reg_1283[63:49]}};

assign tmp_cast_fu_843_p4 = {{sub_ln36_fu_838_p2[63:49]}};

assign u_fu_926_p3 = ((tmp_1_reg_1229_pp0_iter6_reg[0:0] == 1'b1) ? sub_ln37_1_fu_920_p2 : tmp_3_cast2_reg_1278);

assign v_fu_973_p3 = ((tmp_2_reg_1240_pp0_iter6_reg[0:0] == 1'b1) ? sub_ln38_1_fu_967_p2 : tmp_5_cast3_reg_1289);

assign y_fu_879_p3 = ((tmp_reg_1218_pp0_iter6_reg[0:0] == 1'b1) ? sub_ln36_1_fu_873_p2 : tmp_1_cast1_reg_1267);

assign zext_ln36_fu_869_p1 = select_ln36_fu_862_p3;

assign zext_ln37_fu_916_p1 = select_ln37_fu_909_p3;

assign zext_ln38_fu_963_p1 = select_ln38_fu_956_p3;

endmodule //toyuv_toyuv_Pipeline_VITIS_LOOP_24_1
