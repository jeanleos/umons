-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity toyuv_toyuv_Pipeline_VITIS_LOOP_24_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ch_r_TVALID : IN STD_LOGIC;
    ch_g_TVALID : IN STD_LOGIC;
    ch_b_TVALID : IN STD_LOGIC;
    ch_y_TREADY : IN STD_LOGIC;
    ch_u_TREADY : IN STD_LOGIC;
    ch_v_TREADY : IN STD_LOGIC;
    total : IN STD_LOGIC_VECTOR (31 downto 0);
    ch_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    ch_r_TREADY : OUT STD_LOGIC;
    ch_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_r_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    ch_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    ch_r_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    ch_r_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    ch_g_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    ch_g_TREADY : OUT STD_LOGIC;
    ch_g_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_g_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_g_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    ch_g_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    ch_g_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    ch_g_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    ch_b_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    ch_b_TREADY : OUT STD_LOGIC;
    ch_b_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_b_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_b_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    ch_b_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    ch_b_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    ch_b_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    ch_y_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    ch_y_TVALID : OUT STD_LOGIC;
    ch_y_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_y_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_y_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    ch_y_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ch_y_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    ch_y_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    ch_u_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    ch_u_TVALID : OUT STD_LOGIC;
    ch_u_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_u_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_u_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    ch_u_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ch_u_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    ch_u_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    ch_v_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    ch_v_TVALID : OUT STD_LOGIC;
    ch_v_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_v_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_v_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    ch_v_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ch_v_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    ch_v_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of toyuv_toyuv_Pipeline_VITIS_LOOP_24_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv65_14F8B588F : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101001111100010110101100010001111";
    constant ap_const_lv32_FFFFC687 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111100011010000111";
    constant ap_const_lv32_FFFF8F2A : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111000111100101010";
    constant ap_const_lv32_FFFF36D5 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110011011011010101";
    constant ap_const_lv32_FFFFD8EF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111101100011101111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1_grp1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln24_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ch_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal ch_g_TDATA_blk_n : STD_LOGIC;
    signal ch_b_TDATA_blk_n : STD_LOGIC;
    signal ch_y_TDATA_blk_n : STD_LOGIC;
    signal ch_u_TDATA_blk_n : STD_LOGIC;
    signal ch_v_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_r_data_1_reg_1002 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal p_r_data_1_reg_1002_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_keep_reg_1012 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_keep_reg_1012_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_keep_reg_1012_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_keep_reg_1012_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_keep_reg_1012_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_keep_reg_1012_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_keep_reg_1012_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_strb_reg_1017 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_strb_reg_1017_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_strb_reg_1017_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_strb_reg_1017_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_strb_reg_1017_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_strb_reg_1017_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_strb_reg_1017_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_user_reg_1022 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_r_user_reg_1022_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_r_user_reg_1022_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_r_user_reg_1022_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_r_user_reg_1022_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_r_user_reg_1022_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_r_user_reg_1022_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_r_last_reg_1027 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_r_last_reg_1027_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_r_last_reg_1027_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_r_last_reg_1027_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_r_last_reg_1027_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_r_last_reg_1027_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_r_last_reg_1027_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_r_id_reg_1032 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_r_id_reg_1032_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_r_id_reg_1032_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_r_id_reg_1032_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_r_id_reg_1032_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_r_id_reg_1032_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_r_id_reg_1032_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_r_dest_reg_1037 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_r_dest_reg_1037_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_r_dest_reg_1037_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_r_dest_reg_1037_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_r_dest_reg_1037_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_r_dest_reg_1037_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_r_dest_reg_1037_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_g_data_1_reg_1042 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_g_data_1_reg_1042_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_g_keep_reg_1052 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_g_keep_reg_1052_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_g_keep_reg_1052_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_g_keep_reg_1052_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_g_keep_reg_1052_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_g_keep_reg_1052_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_g_keep_reg_1052_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_g_strb_reg_1057 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_g_strb_reg_1057_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_g_strb_reg_1057_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_g_strb_reg_1057_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_g_strb_reg_1057_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_g_strb_reg_1057_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_g_strb_reg_1057_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_g_user_reg_1062 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_g_user_reg_1062_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_g_user_reg_1062_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_g_user_reg_1062_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_g_user_reg_1062_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_g_user_reg_1062_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_g_user_reg_1062_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_g_last_reg_1067 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_g_last_reg_1067_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_g_last_reg_1067_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_g_last_reg_1067_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_g_last_reg_1067_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_g_last_reg_1067_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_g_last_reg_1067_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_g_id_reg_1072 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_g_id_reg_1072_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_g_id_reg_1072_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_g_id_reg_1072_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_g_id_reg_1072_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_g_id_reg_1072_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_g_id_reg_1072_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_g_dest_reg_1077 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_g_dest_reg_1077_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_g_dest_reg_1077_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_g_dest_reg_1077_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_g_dest_reg_1077_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_g_dest_reg_1077_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_g_dest_reg_1077_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_b_data_1_reg_1082 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_b_data_1_reg_1082_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_b_keep_reg_1098 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_b_keep_reg_1098_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_b_keep_reg_1098_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_b_keep_reg_1098_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_b_keep_reg_1098_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_b_keep_reg_1098_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_b_keep_reg_1098_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_b_strb_reg_1103 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_b_strb_reg_1103_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_b_strb_reg_1103_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_b_strb_reg_1103_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_b_strb_reg_1103_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_b_strb_reg_1103_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_b_strb_reg_1103_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_b_user_reg_1108 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_b_user_reg_1108_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_b_user_reg_1108_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_b_user_reg_1108_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_b_user_reg_1108_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_b_user_reg_1108_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_b_user_reg_1108_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_b_last_reg_1113 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_b_last_reg_1113_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_b_last_reg_1113_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_b_last_reg_1113_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_b_last_reg_1113_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_b_last_reg_1113_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_b_last_reg_1113_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_b_id_reg_1118 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_b_id_reg_1118_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_b_id_reg_1118_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_b_id_reg_1118_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_b_id_reg_1118_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_b_id_reg_1118_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_b_id_reg_1118_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_b_dest_reg_1123 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_b_dest_reg_1123_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_b_dest_reg_1123_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_b_dest_reg_1123_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_b_dest_reg_1123_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_b_dest_reg_1123_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_b_dest_reg_1123_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln36_1_fu_479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_1_reg_1128 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_1_reg_1128_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_2_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_2_reg_1133 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_5_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_5_reg_1138 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_4_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_4_reg_1143 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_3_fu_548_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_3_reg_1148 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_7_fu_569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_7_reg_1153 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_8_fu_596_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_8_reg_1158 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_4_fu_634_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_4_reg_1163 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_4_fu_655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_4_reg_1168 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_6_fu_676_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_6_reg_1173 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_10_fu_697_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_10_reg_1178 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_reg_1183 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_1_reg_1188 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_6_fu_718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_6_reg_1193 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln38_3_fu_739_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln38_3_reg_1198 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_reg_1203 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_1_reg_1208 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_1_fu_749_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_1_reg_1213 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1218 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1218_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1218_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_1_fu_766_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_1_reg_1224 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1229 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1229_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1229_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_1_fu_783_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_1_reg_1235 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1240 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1240_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1240_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln36_reg_1261 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_1_cast1_reg_1267 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln37_2_reg_1272 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_3_cast2_reg_1278 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_335_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln38_2_reg_1283 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_5_cast3_reg_1289 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_fu_879_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_1294 : STD_LOGIC_VECTOR (15 downto 0);
    signal u_fu_926_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal u_reg_1299 : STD_LOGIC_VECTOR (15 downto 0);
    signal v_fu_973_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal v_reg_1304 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_186 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln24_fu_378_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal grp_fu_325_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_330_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_335_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_340_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_345_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_350_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_355_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_cast_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_fu_473_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_1_fu_479_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_fu_473_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_2_fu_491_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_2_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_2_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_7_fu_503_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_8_fu_509_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_7_fu_503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_8_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_9_fu_521_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_5_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_9_fu_521_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_3_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_3_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_10_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_6_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_11_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_14_fu_575_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_15_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_7_fu_585_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_16_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln37_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln37_1_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_2_fu_612_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln37_2_fu_618_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_3_fu_623_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln37_3_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_5_fu_640_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_4_fu_645_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_6_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_12_fu_661_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_8_fu_666_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_13_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_17_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_9_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_18_fu_692_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln37_4_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_5_fu_708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln37_5_fu_713_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_fu_724_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln38_2_fu_729_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_2_fu_734_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_fu_745_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_fu_762_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_fu_779_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_fu_838_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_cast_fu_843_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_cast_fu_853_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln36_fu_862_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln36_fu_869_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln36_1_fu_873_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln37_fu_885_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_2_cast_fu_890_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_cast_fu_900_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln37_fu_909_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln37_fu_916_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln37_1_fu_920_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln38_fu_932_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_4_cast_fu_937_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_cast_fu_947_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln38_fu_956_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln38_fu_963_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln38_1_fu_967_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_325_ce : STD_LOGIC;
    signal grp_fu_330_ce : STD_LOGIC;
    signal grp_fu_335_ce : STD_LOGIC;
    signal grp_fu_340_ce : STD_LOGIC;
    signal grp_fu_345_ce : STD_LOGIC;
    signal grp_fu_350_ce : STD_LOGIC;
    signal grp_fu_355_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component toyuv_mul_32s_34ns_65_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component toyuv_mul_32s_15s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toyuv_mul_32s_16s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toyuv_mul_32s_17s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toyuv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_34ns_65_2_1_U1 : component toyuv_mul_32s_34ns_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln36_1_reg_1213,
        din1 => grp_fu_325_p1,
        ce => grp_fu_325_ce,
        dout => grp_fu_325_p2);

    mul_32s_34ns_65_2_1_U2 : component toyuv_mul_32s_34ns_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln37_1_reg_1224,
        din1 => grp_fu_330_p1,
        ce => grp_fu_330_ce,
        dout => grp_fu_330_p2);

    mul_32s_34ns_65_2_1_U3 : component toyuv_mul_32s_34ns_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln38_1_reg_1235,
        din1 => grp_fu_335_p1,
        ce => grp_fu_335_ce,
        dout => grp_fu_335_p2);

    mul_32s_15s_32_2_1_U4 : component toyuv_mul_32s_15s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 15,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_data_1_reg_1002,
        din1 => grp_fu_340_p1,
        ce => grp_fu_340_ce,
        dout => grp_fu_340_p2);

    mul_32s_16s_32_2_1_U5 : component toyuv_mul_32s_16s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_g_data_1_reg_1042,
        din1 => grp_fu_345_p1,
        ce => grp_fu_345_ce,
        dout => grp_fu_345_p2);

    mul_32s_17s_32_2_1_U6 : component toyuv_mul_32s_17s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 17,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_g_data_1_reg_1042,
        din1 => grp_fu_350_p1,
        ce => grp_fu_350_ce,
        dout => grp_fu_350_p2);

    mul_32s_15s_32_2_1_U7 : component toyuv_mul_32s_15s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 15,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_b_data_1_reg_1082,
        din1 => grp_fu_355_p1,
        ce => grp_fu_355_ce,
        dout => grp_fu_355_p2);

    flow_control_loop_pipe_sequential_init_U : component toyuv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    i_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln24_fu_372_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_186 <= add_ln24_fu_378_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_186 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                add_ln36_10_reg_1178 <= add_ln36_10_fu_697_p2;
                add_ln36_1_reg_1213 <= add_ln36_1_fu_749_p2;
                add_ln36_7_reg_1153 <= add_ln36_7_fu_569_p2;
                add_ln37_1_reg_1224 <= add_ln37_1_fu_766_p2;
                add_ln37_4_reg_1163 <= add_ln37_4_fu_634_p2;
                add_ln37_6_reg_1193 <= add_ln37_6_fu_718_p2;
                add_ln38_1_reg_1235 <= add_ln38_1_fu_783_p2;
                mul_ln36_reg_1261 <= grp_fu_325_p2;
                mul_ln37_1_reg_1188 <= grp_fu_345_p2;
                mul_ln37_2_reg_1272 <= grp_fu_330_p2;
                mul_ln37_reg_1183 <= grp_fu_340_p2;
                mul_ln38_1_reg_1208 <= grp_fu_355_p2;
                mul_ln38_2_reg_1283 <= grp_fu_335_p2;
                mul_ln38_reg_1203 <= grp_fu_350_p2;
                p_b_data_1_reg_1082_pp0_iter2_reg <= p_b_data_1_reg_1082;
                p_b_dest_reg_1123_pp0_iter2_reg <= p_b_dest_reg_1123;
                p_b_dest_reg_1123_pp0_iter3_reg <= p_b_dest_reg_1123_pp0_iter2_reg;
                p_b_dest_reg_1123_pp0_iter4_reg <= p_b_dest_reg_1123_pp0_iter3_reg;
                p_b_dest_reg_1123_pp0_iter5_reg <= p_b_dest_reg_1123_pp0_iter4_reg;
                p_b_dest_reg_1123_pp0_iter6_reg <= p_b_dest_reg_1123_pp0_iter5_reg;
                p_b_dest_reg_1123_pp0_iter7_reg <= p_b_dest_reg_1123_pp0_iter6_reg;
                p_b_id_reg_1118_pp0_iter2_reg <= p_b_id_reg_1118;
                p_b_id_reg_1118_pp0_iter3_reg <= p_b_id_reg_1118_pp0_iter2_reg;
                p_b_id_reg_1118_pp0_iter4_reg <= p_b_id_reg_1118_pp0_iter3_reg;
                p_b_id_reg_1118_pp0_iter5_reg <= p_b_id_reg_1118_pp0_iter4_reg;
                p_b_id_reg_1118_pp0_iter6_reg <= p_b_id_reg_1118_pp0_iter5_reg;
                p_b_id_reg_1118_pp0_iter7_reg <= p_b_id_reg_1118_pp0_iter6_reg;
                p_b_keep_reg_1098_pp0_iter2_reg <= p_b_keep_reg_1098;
                p_b_keep_reg_1098_pp0_iter3_reg <= p_b_keep_reg_1098_pp0_iter2_reg;
                p_b_keep_reg_1098_pp0_iter4_reg <= p_b_keep_reg_1098_pp0_iter3_reg;
                p_b_keep_reg_1098_pp0_iter5_reg <= p_b_keep_reg_1098_pp0_iter4_reg;
                p_b_keep_reg_1098_pp0_iter6_reg <= p_b_keep_reg_1098_pp0_iter5_reg;
                p_b_keep_reg_1098_pp0_iter7_reg <= p_b_keep_reg_1098_pp0_iter6_reg;
                p_b_last_reg_1113_pp0_iter2_reg <= p_b_last_reg_1113;
                p_b_last_reg_1113_pp0_iter3_reg <= p_b_last_reg_1113_pp0_iter2_reg;
                p_b_last_reg_1113_pp0_iter4_reg <= p_b_last_reg_1113_pp0_iter3_reg;
                p_b_last_reg_1113_pp0_iter5_reg <= p_b_last_reg_1113_pp0_iter4_reg;
                p_b_last_reg_1113_pp0_iter6_reg <= p_b_last_reg_1113_pp0_iter5_reg;
                p_b_last_reg_1113_pp0_iter7_reg <= p_b_last_reg_1113_pp0_iter6_reg;
                p_b_strb_reg_1103_pp0_iter2_reg <= p_b_strb_reg_1103;
                p_b_strb_reg_1103_pp0_iter3_reg <= p_b_strb_reg_1103_pp0_iter2_reg;
                p_b_strb_reg_1103_pp0_iter4_reg <= p_b_strb_reg_1103_pp0_iter3_reg;
                p_b_strb_reg_1103_pp0_iter5_reg <= p_b_strb_reg_1103_pp0_iter4_reg;
                p_b_strb_reg_1103_pp0_iter6_reg <= p_b_strb_reg_1103_pp0_iter5_reg;
                p_b_strb_reg_1103_pp0_iter7_reg <= p_b_strb_reg_1103_pp0_iter6_reg;
                p_b_user_reg_1108_pp0_iter2_reg <= p_b_user_reg_1108;
                p_b_user_reg_1108_pp0_iter3_reg <= p_b_user_reg_1108_pp0_iter2_reg;
                p_b_user_reg_1108_pp0_iter4_reg <= p_b_user_reg_1108_pp0_iter3_reg;
                p_b_user_reg_1108_pp0_iter5_reg <= p_b_user_reg_1108_pp0_iter4_reg;
                p_b_user_reg_1108_pp0_iter6_reg <= p_b_user_reg_1108_pp0_iter5_reg;
                p_b_user_reg_1108_pp0_iter7_reg <= p_b_user_reg_1108_pp0_iter6_reg;
                p_g_data_1_reg_1042_pp0_iter2_reg <= p_g_data_1_reg_1042;
                p_g_dest_reg_1077_pp0_iter2_reg <= p_g_dest_reg_1077;
                p_g_dest_reg_1077_pp0_iter3_reg <= p_g_dest_reg_1077_pp0_iter2_reg;
                p_g_dest_reg_1077_pp0_iter4_reg <= p_g_dest_reg_1077_pp0_iter3_reg;
                p_g_dest_reg_1077_pp0_iter5_reg <= p_g_dest_reg_1077_pp0_iter4_reg;
                p_g_dest_reg_1077_pp0_iter6_reg <= p_g_dest_reg_1077_pp0_iter5_reg;
                p_g_dest_reg_1077_pp0_iter7_reg <= p_g_dest_reg_1077_pp0_iter6_reg;
                p_g_id_reg_1072_pp0_iter2_reg <= p_g_id_reg_1072;
                p_g_id_reg_1072_pp0_iter3_reg <= p_g_id_reg_1072_pp0_iter2_reg;
                p_g_id_reg_1072_pp0_iter4_reg <= p_g_id_reg_1072_pp0_iter3_reg;
                p_g_id_reg_1072_pp0_iter5_reg <= p_g_id_reg_1072_pp0_iter4_reg;
                p_g_id_reg_1072_pp0_iter6_reg <= p_g_id_reg_1072_pp0_iter5_reg;
                p_g_id_reg_1072_pp0_iter7_reg <= p_g_id_reg_1072_pp0_iter6_reg;
                p_g_keep_reg_1052_pp0_iter2_reg <= p_g_keep_reg_1052;
                p_g_keep_reg_1052_pp0_iter3_reg <= p_g_keep_reg_1052_pp0_iter2_reg;
                p_g_keep_reg_1052_pp0_iter4_reg <= p_g_keep_reg_1052_pp0_iter3_reg;
                p_g_keep_reg_1052_pp0_iter5_reg <= p_g_keep_reg_1052_pp0_iter4_reg;
                p_g_keep_reg_1052_pp0_iter6_reg <= p_g_keep_reg_1052_pp0_iter5_reg;
                p_g_keep_reg_1052_pp0_iter7_reg <= p_g_keep_reg_1052_pp0_iter6_reg;
                p_g_last_reg_1067_pp0_iter2_reg <= p_g_last_reg_1067;
                p_g_last_reg_1067_pp0_iter3_reg <= p_g_last_reg_1067_pp0_iter2_reg;
                p_g_last_reg_1067_pp0_iter4_reg <= p_g_last_reg_1067_pp0_iter3_reg;
                p_g_last_reg_1067_pp0_iter5_reg <= p_g_last_reg_1067_pp0_iter4_reg;
                p_g_last_reg_1067_pp0_iter6_reg <= p_g_last_reg_1067_pp0_iter5_reg;
                p_g_last_reg_1067_pp0_iter7_reg <= p_g_last_reg_1067_pp0_iter6_reg;
                p_g_strb_reg_1057_pp0_iter2_reg <= p_g_strb_reg_1057;
                p_g_strb_reg_1057_pp0_iter3_reg <= p_g_strb_reg_1057_pp0_iter2_reg;
                p_g_strb_reg_1057_pp0_iter4_reg <= p_g_strb_reg_1057_pp0_iter3_reg;
                p_g_strb_reg_1057_pp0_iter5_reg <= p_g_strb_reg_1057_pp0_iter4_reg;
                p_g_strb_reg_1057_pp0_iter6_reg <= p_g_strb_reg_1057_pp0_iter5_reg;
                p_g_strb_reg_1057_pp0_iter7_reg <= p_g_strb_reg_1057_pp0_iter6_reg;
                p_g_user_reg_1062_pp0_iter2_reg <= p_g_user_reg_1062;
                p_g_user_reg_1062_pp0_iter3_reg <= p_g_user_reg_1062_pp0_iter2_reg;
                p_g_user_reg_1062_pp0_iter4_reg <= p_g_user_reg_1062_pp0_iter3_reg;
                p_g_user_reg_1062_pp0_iter5_reg <= p_g_user_reg_1062_pp0_iter4_reg;
                p_g_user_reg_1062_pp0_iter6_reg <= p_g_user_reg_1062_pp0_iter5_reg;
                p_g_user_reg_1062_pp0_iter7_reg <= p_g_user_reg_1062_pp0_iter6_reg;
                p_r_data_1_reg_1002_pp0_iter2_reg <= p_r_data_1_reg_1002;
                p_r_dest_reg_1037_pp0_iter2_reg <= p_r_dest_reg_1037;
                p_r_dest_reg_1037_pp0_iter3_reg <= p_r_dest_reg_1037_pp0_iter2_reg;
                p_r_dest_reg_1037_pp0_iter4_reg <= p_r_dest_reg_1037_pp0_iter3_reg;
                p_r_dest_reg_1037_pp0_iter5_reg <= p_r_dest_reg_1037_pp0_iter4_reg;
                p_r_dest_reg_1037_pp0_iter6_reg <= p_r_dest_reg_1037_pp0_iter5_reg;
                p_r_dest_reg_1037_pp0_iter7_reg <= p_r_dest_reg_1037_pp0_iter6_reg;
                p_r_id_reg_1032_pp0_iter2_reg <= p_r_id_reg_1032;
                p_r_id_reg_1032_pp0_iter3_reg <= p_r_id_reg_1032_pp0_iter2_reg;
                p_r_id_reg_1032_pp0_iter4_reg <= p_r_id_reg_1032_pp0_iter3_reg;
                p_r_id_reg_1032_pp0_iter5_reg <= p_r_id_reg_1032_pp0_iter4_reg;
                p_r_id_reg_1032_pp0_iter6_reg <= p_r_id_reg_1032_pp0_iter5_reg;
                p_r_id_reg_1032_pp0_iter7_reg <= p_r_id_reg_1032_pp0_iter6_reg;
                p_r_keep_reg_1012_pp0_iter2_reg <= p_r_keep_reg_1012;
                p_r_keep_reg_1012_pp0_iter3_reg <= p_r_keep_reg_1012_pp0_iter2_reg;
                p_r_keep_reg_1012_pp0_iter4_reg <= p_r_keep_reg_1012_pp0_iter3_reg;
                p_r_keep_reg_1012_pp0_iter5_reg <= p_r_keep_reg_1012_pp0_iter4_reg;
                p_r_keep_reg_1012_pp0_iter6_reg <= p_r_keep_reg_1012_pp0_iter5_reg;
                p_r_keep_reg_1012_pp0_iter7_reg <= p_r_keep_reg_1012_pp0_iter6_reg;
                p_r_last_reg_1027_pp0_iter2_reg <= p_r_last_reg_1027;
                p_r_last_reg_1027_pp0_iter3_reg <= p_r_last_reg_1027_pp0_iter2_reg;
                p_r_last_reg_1027_pp0_iter4_reg <= p_r_last_reg_1027_pp0_iter3_reg;
                p_r_last_reg_1027_pp0_iter5_reg <= p_r_last_reg_1027_pp0_iter4_reg;
                p_r_last_reg_1027_pp0_iter6_reg <= p_r_last_reg_1027_pp0_iter5_reg;
                p_r_last_reg_1027_pp0_iter7_reg <= p_r_last_reg_1027_pp0_iter6_reg;
                p_r_strb_reg_1017_pp0_iter2_reg <= p_r_strb_reg_1017;
                p_r_strb_reg_1017_pp0_iter3_reg <= p_r_strb_reg_1017_pp0_iter2_reg;
                p_r_strb_reg_1017_pp0_iter4_reg <= p_r_strb_reg_1017_pp0_iter3_reg;
                p_r_strb_reg_1017_pp0_iter5_reg <= p_r_strb_reg_1017_pp0_iter4_reg;
                p_r_strb_reg_1017_pp0_iter6_reg <= p_r_strb_reg_1017_pp0_iter5_reg;
                p_r_strb_reg_1017_pp0_iter7_reg <= p_r_strb_reg_1017_pp0_iter6_reg;
                p_r_user_reg_1022_pp0_iter2_reg <= p_r_user_reg_1022;
                p_r_user_reg_1022_pp0_iter3_reg <= p_r_user_reg_1022_pp0_iter2_reg;
                p_r_user_reg_1022_pp0_iter4_reg <= p_r_user_reg_1022_pp0_iter3_reg;
                p_r_user_reg_1022_pp0_iter5_reg <= p_r_user_reg_1022_pp0_iter4_reg;
                p_r_user_reg_1022_pp0_iter6_reg <= p_r_user_reg_1022_pp0_iter5_reg;
                p_r_user_reg_1022_pp0_iter7_reg <= p_r_user_reg_1022_pp0_iter6_reg;
                shl_ln36_1_reg_1128_pp0_iter2_reg <= shl_ln36_1_reg_1128;
                shl_ln36_4_reg_1143 <= shl_ln36_4_fu_543_p2;
                sub_ln36_3_reg_1148 <= sub_ln36_3_fu_548_p2;
                sub_ln36_4_reg_1168 <= sub_ln36_4_fu_655_p2;
                sub_ln36_6_reg_1173 <= sub_ln36_6_fu_676_p2;
                sub_ln36_8_reg_1158 <= sub_ln36_8_fu_596_p2;
                sub_ln38_3_reg_1198 <= sub_ln38_3_fu_739_p2;
                tmp_1_cast1_reg_1267 <= grp_fu_325_p2(64 downto 49);
                tmp_1_reg_1229 <= add_ln37_1_fu_766_p2(31 downto 31);
                tmp_1_reg_1229_pp0_iter5_reg <= tmp_1_reg_1229;
                tmp_1_reg_1229_pp0_iter6_reg <= tmp_1_reg_1229_pp0_iter5_reg;
                tmp_2_reg_1240 <= add_ln38_1_fu_783_p2(31 downto 31);
                tmp_2_reg_1240_pp0_iter5_reg <= tmp_2_reg_1240;
                tmp_2_reg_1240_pp0_iter6_reg <= tmp_2_reg_1240_pp0_iter5_reg;
                tmp_3_cast2_reg_1278 <= grp_fu_330_p2(64 downto 49);
                tmp_5_cast3_reg_1289 <= grp_fu_335_p2(64 downto 49);
                tmp_reg_1218 <= add_ln36_1_fu_749_p2(31 downto 31);
                tmp_reg_1218_pp0_iter5_reg <= tmp_reg_1218;
                tmp_reg_1218_pp0_iter6_reg <= tmp_reg_1218_pp0_iter5_reg;
                u_reg_1299 <= u_fu_926_p3;
                v_reg_1304 <= v_fu_973_p3;
                y_reg_1294 <= y_fu_879_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln36_2_reg_1133 <= add_ln36_2_fu_497_p2;
                add_ln36_5_reg_1138 <= add_ln36_5_fu_527_p2;
                p_b_data_1_reg_1082 <= ch_b_TDATA;
                p_b_dest_reg_1123 <= ch_b_TDEST;
                p_b_id_reg_1118 <= ch_b_TID;
                p_b_keep_reg_1098 <= ch_b_TKEEP;
                p_b_last_reg_1113 <= ch_b_TLAST;
                p_b_strb_reg_1103 <= ch_b_TSTRB;
                p_b_user_reg_1108 <= ch_b_TUSER;
                p_g_data_1_reg_1042 <= ch_g_TDATA;
                p_g_dest_reg_1077 <= ch_g_TDEST;
                p_g_id_reg_1072 <= ch_g_TID;
                p_g_keep_reg_1052 <= ch_g_TKEEP;
                p_g_last_reg_1067 <= ch_g_TLAST;
                p_g_strb_reg_1057 <= ch_g_TSTRB;
                p_g_user_reg_1062 <= ch_g_TUSER;
                p_r_data_1_reg_1002 <= ch_r_TDATA;
                p_r_dest_reg_1037 <= ch_r_TDEST;
                p_r_id_reg_1032 <= ch_r_TID;
                p_r_keep_reg_1012 <= ch_r_TKEEP;
                p_r_last_reg_1027 <= ch_r_TLAST;
                p_r_strb_reg_1017 <= ch_r_TSTRB;
                p_r_user_reg_1022 <= ch_r_TUSER;
                shl_ln36_1_reg_1128 <= shl_ln36_1_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln24_fu_378_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv31_1));
    add_ln36_10_fu_697_p2 <= std_logic_vector(unsigned(add_ln36_9_fu_687_p2) + unsigned(shl_ln36_18_fu_692_p2));
    add_ln36_1_fu_749_p2 <= std_logic_vector(unsigned(add_ln36_fu_745_p2) + unsigned(sub_ln36_6_reg_1173));
    add_ln36_2_fu_497_p2 <= std_logic_vector(unsigned(sub_ln36_2_fu_485_p2) + unsigned(shl_ln36_2_fu_491_p2));
    add_ln36_3_fu_538_p2 <= std_logic_vector(unsigned(add_ln36_2_reg_1133) + unsigned(shl_ln36_3_fu_533_p2));
    add_ln36_4_fu_645_p2 <= std_logic_vector(unsigned(sub_ln36_3_reg_1148) + unsigned(shl_ln36_5_fu_640_p2));
    add_ln36_5_fu_527_p2 <= std_logic_vector(unsigned(sub_ln36_5_fu_515_p2) + unsigned(shl_ln36_9_fu_521_p2));
    add_ln36_6_fu_559_p2 <= std_logic_vector(unsigned(add_ln36_5_reg_1138) + unsigned(shl_ln36_10_fu_554_p2));
    add_ln36_7_fu_569_p2 <= std_logic_vector(unsigned(add_ln36_6_fu_559_p2) + unsigned(shl_ln36_11_fu_564_p2));
    add_ln36_8_fu_666_p2 <= std_logic_vector(unsigned(add_ln36_7_reg_1153) + unsigned(shl_ln36_12_fu_661_p2));
    add_ln36_9_fu_687_p2 <= std_logic_vector(unsigned(sub_ln36_8_reg_1158) + unsigned(shl_ln36_17_fu_682_p2));
    add_ln36_fu_745_p2 <= std_logic_vector(unsigned(sub_ln36_4_reg_1168) + unsigned(add_ln36_10_reg_1178));
    add_ln37_1_fu_766_p2 <= std_logic_vector(unsigned(add_ln37_fu_762_p2) + unsigned(mul_ln37_1_reg_1188));
    add_ln37_2_fu_612_p2 <= std_logic_vector(unsigned(shl_ln37_fu_602_p2) + unsigned(shl_ln37_1_fu_607_p2));
    add_ln37_3_fu_623_p2 <= std_logic_vector(unsigned(add_ln37_2_fu_612_p2) + unsigned(shl_ln37_2_fu_618_p2));
    add_ln37_4_fu_634_p2 <= std_logic_vector(unsigned(add_ln37_3_fu_623_p2) + unsigned(shl_ln37_3_fu_629_p2));
    add_ln37_5_fu_708_p2 <= std_logic_vector(unsigned(add_ln37_4_reg_1163) + unsigned(shl_ln37_4_fu_703_p2));
    add_ln37_6_fu_718_p2 <= std_logic_vector(unsigned(add_ln37_5_fu_708_p2) + unsigned(shl_ln37_5_fu_713_p2));
    add_ln37_fu_762_p2 <= std_logic_vector(unsigned(mul_ln37_reg_1183) + unsigned(add_ln37_6_reg_1193));
    add_ln38_1_fu_783_p2 <= std_logic_vector(unsigned(add_ln38_fu_779_p2) + unsigned(mul_ln38_reg_1203));
    add_ln38_2_fu_734_p2 <= std_logic_vector(unsigned(sub_ln38_2_fu_729_p2) + unsigned(shl_ln36_4_reg_1143));
    add_ln38_fu_779_p2 <= std_logic_vector(unsigned(sub_ln38_3_reg_1198) + unsigned(mul_ln38_1_reg_1208));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_state9_pp0_stage0_iter8_grp1)
    begin
                ap_block_pp0_stage0_01001_grp1 <= (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_pp0_stage0_iter8_grp1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_state9_pp0_stage0_iter8_grp1)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_pp0_stage0_iter8_grp1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1)));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_state9_pp0_stage0_iter8_grp1)
    begin
                ap_block_pp0_stage0_11001_grp1 <= (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_pp0_stage0_iter8_grp1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1)));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_state9_pp0_stage0_iter8_grp1)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_pp0_stage0_iter8_grp1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_grp1_assign_proc : process(ch_r_TVALID, ch_g_TVALID, ch_b_TVALID)
    begin
                ap_block_state2_pp0_stage0_iter1_grp1 <= ((ch_b_TVALID = ap_const_logic_0) or (ch_g_TVALID = ap_const_logic_0) or (ch_r_TVALID = ap_const_logic_0));
    end process;


    ap_block_state9_pp0_stage0_iter8_grp1_assign_proc : process(ch_y_TREADY, ch_u_TREADY, ch_v_TREADY)
    begin
                ap_block_state9_pp0_stage0_iter8_grp1 <= ((ch_v_TREADY = ap_const_logic_0) or (ch_u_TREADY = ap_const_logic_0) or (ch_y_TREADY = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln24_fu_372_p2)
    begin
        if (((icmp_ln24_fu_372_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, i_fu_186, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_186;
        end if; 
    end process;


    ch_b_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ch_b_TVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_b_TDATA_blk_n <= ch_b_TVALID;
        else 
            ch_b_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ch_b_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_b_TREADY <= ap_const_logic_1;
        else 
            ch_b_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    ch_g_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ch_g_TVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_g_TDATA_blk_n <= ch_g_TVALID;
        else 
            ch_g_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ch_g_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_g_TREADY <= ap_const_logic_1;
        else 
            ch_g_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    ch_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ch_r_TVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_r_TDATA_blk_n <= ch_r_TVALID;
        else 
            ch_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ch_r_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_r_TREADY <= ap_const_logic_1;
        else 
            ch_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;

        ch_u_TDATA <= std_logic_vector(IEEE.numeric_std.resize(signed(u_reg_1299),32));


    ch_u_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter8, ch_u_TREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            ch_u_TDATA_blk_n <= ch_u_TREADY;
        else 
            ch_u_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ch_u_TDEST <= p_g_dest_reg_1077_pp0_iter7_reg;
    ch_u_TID <= p_g_id_reg_1072_pp0_iter7_reg;
    ch_u_TKEEP <= p_g_keep_reg_1052_pp0_iter7_reg;
    ch_u_TLAST <= p_g_last_reg_1067_pp0_iter7_reg;
    ch_u_TSTRB <= p_g_strb_reg_1057_pp0_iter7_reg;
    ch_u_TUSER <= p_g_user_reg_1062_pp0_iter7_reg;

    ch_u_TVALID_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            ch_u_TVALID <= ap_const_logic_1;
        else 
            ch_u_TVALID <= ap_const_logic_0;
        end if; 
    end process;

        ch_v_TDATA <= std_logic_vector(IEEE.numeric_std.resize(signed(v_reg_1304),32));


    ch_v_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter8, ch_v_TREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            ch_v_TDATA_blk_n <= ch_v_TREADY;
        else 
            ch_v_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ch_v_TDEST <= p_b_dest_reg_1123_pp0_iter7_reg;
    ch_v_TID <= p_b_id_reg_1118_pp0_iter7_reg;
    ch_v_TKEEP <= p_b_keep_reg_1098_pp0_iter7_reg;
    ch_v_TLAST <= p_b_last_reg_1113_pp0_iter7_reg;
    ch_v_TSTRB <= p_b_strb_reg_1103_pp0_iter7_reg;
    ch_v_TUSER <= p_b_user_reg_1108_pp0_iter7_reg;

    ch_v_TVALID_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            ch_v_TVALID <= ap_const_logic_1;
        else 
            ch_v_TVALID <= ap_const_logic_0;
        end if; 
    end process;

        ch_y_TDATA <= std_logic_vector(IEEE.numeric_std.resize(signed(y_reg_1294),32));


    ch_y_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter8, ch_y_TREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            ch_y_TDATA_blk_n <= ch_y_TREADY;
        else 
            ch_y_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ch_y_TDEST <= p_r_dest_reg_1037_pp0_iter7_reg;
    ch_y_TID <= p_r_id_reg_1032_pp0_iter7_reg;
    ch_y_TKEEP <= p_r_keep_reg_1012_pp0_iter7_reg;
    ch_y_TLAST <= p_r_last_reg_1027_pp0_iter7_reg;
    ch_y_TSTRB <= p_r_strb_reg_1017_pp0_iter7_reg;
    ch_y_TUSER <= p_r_user_reg_1022_pp0_iter7_reg;

    ch_y_TVALID_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            ch_y_TVALID <= ap_const_logic_1;
        else 
            ch_y_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_325_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_325_ce <= ap_const_logic_1;
        else 
            grp_fu_325_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_325_p1 <= ap_const_lv65_14F8B588F(34 - 1 downto 0);

    grp_fu_330_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_330_ce <= ap_const_logic_1;
        else 
            grp_fu_330_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_330_p1 <= ap_const_lv65_14F8B588F(34 - 1 downto 0);

    grp_fu_335_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_335_ce <= ap_const_logic_1;
        else 
            grp_fu_335_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_335_p1 <= ap_const_lv65_14F8B588F(34 - 1 downto 0);

    grp_fu_340_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_340_ce <= ap_const_logic_1;
        else 
            grp_fu_340_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_340_p1 <= ap_const_lv32_FFFFC687(15 - 1 downto 0);

    grp_fu_345_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_345_ce <= ap_const_logic_1;
        else 
            grp_fu_345_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_345_p1 <= ap_const_lv32_FFFF8F2A(16 - 1 downto 0);

    grp_fu_350_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_350_ce <= ap_const_logic_1;
        else 
            grp_fu_350_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_350_p1 <= ap_const_lv32_FFFF36D5(17 - 1 downto 0);

    grp_fu_355_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_355_ce <= ap_const_logic_1;
        else 
            grp_fu_355_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_355_p1 <= ap_const_lv32_FFFFD8EF(15 - 1 downto 0);
    i_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_load),32));
    icmp_ln24_fu_372_p2 <= "1" when (signed(i_cast_fu_368_p1) < signed(total)) else "0";
    select_ln36_fu_862_p3 <= 
        tmp_cast_fu_843_p4 when (tmp_reg_1218_pp0_iter6_reg(0) = '1') else 
        tmp_1_cast_fu_853_p4;
    select_ln37_fu_909_p3 <= 
        tmp_2_cast_fu_890_p4 when (tmp_1_reg_1229_pp0_iter6_reg(0) = '1') else 
        tmp_3_cast_fu_900_p4;
    select_ln38_fu_956_p3 <= 
        tmp_4_cast_fu_937_p4 when (tmp_2_reg_1240_pp0_iter6_reg(0) = '1') else 
        tmp_5_cast_fu_947_p4;
    shl_ln36_10_fu_554_p2 <= std_logic_vector(shift_left(unsigned(p_g_data_1_reg_1042),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln36_11_fu_564_p2 <= std_logic_vector(shift_left(unsigned(p_g_data_1_reg_1042),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    shl_ln36_12_fu_661_p2 <= std_logic_vector(shift_left(unsigned(p_g_data_1_reg_1042_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln36_13_fu_671_p2 <= std_logic_vector(shift_left(unsigned(p_g_data_1_reg_1042_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln36_14_fu_575_p2 <= std_logic_vector(shift_left(unsigned(p_b_data_1_reg_1082),to_integer(unsigned('0' & ap_const_lv32_E(31-1 downto 0)))));
    shl_ln36_15_fu_580_p2 <= std_logic_vector(shift_left(unsigned(p_b_data_1_reg_1082),to_integer(unsigned('0' & ap_const_lv32_C(31-1 downto 0)))));
    shl_ln36_16_fu_591_p2 <= std_logic_vector(shift_left(unsigned(p_b_data_1_reg_1082),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    shl_ln36_17_fu_682_p2 <= std_logic_vector(shift_left(unsigned(p_b_data_1_reg_1082_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_7(31-1 downto 0)))));
    shl_ln36_18_fu_692_p2 <= std_logic_vector(shift_left(unsigned(p_b_data_1_reg_1082_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    shl_ln36_1_fu_479_p0 <= ch_r_TDATA;
    shl_ln36_1_fu_479_p2 <= std_logic_vector(shift_left(unsigned(shl_ln36_1_fu_479_p0),to_integer(unsigned('0' & ap_const_lv32_C(31-1 downto 0)))));
    shl_ln36_2_fu_491_p0 <= ch_r_TDATA;
    shl_ln36_2_fu_491_p2 <= std_logic_vector(shift_left(unsigned(shl_ln36_2_fu_491_p0),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    shl_ln36_3_fu_533_p2 <= std_logic_vector(shift_left(unsigned(p_r_data_1_reg_1002),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln36_4_fu_543_p2 <= std_logic_vector(shift_left(unsigned(p_r_data_1_reg_1002),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    shl_ln36_5_fu_640_p2 <= std_logic_vector(shift_left(unsigned(p_r_data_1_reg_1002_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln36_6_fu_650_p2 <= std_logic_vector(shift_left(unsigned(p_r_data_1_reg_1002_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln36_7_fu_503_p0 <= ch_g_TDATA;
    shl_ln36_7_fu_503_p2 <= std_logic_vector(shift_left(unsigned(shl_ln36_7_fu_503_p0),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    shl_ln36_8_fu_509_p0 <= ch_g_TDATA;
    shl_ln36_8_fu_509_p2 <= std_logic_vector(shift_left(unsigned(shl_ln36_8_fu_509_p0),to_integer(unsigned('0' & ap_const_lv32_D(31-1 downto 0)))));
    shl_ln36_9_fu_521_p0 <= ch_g_TDATA;
    shl_ln36_9_fu_521_p2 <= std_logic_vector(shift_left(unsigned(shl_ln36_9_fu_521_p0),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    shl_ln36_fu_473_p0 <= ch_r_TDATA;
    shl_ln36_fu_473_p2 <= std_logic_vector(shift_left(unsigned(shl_ln36_fu_473_p0),to_integer(unsigned('0' & ap_const_lv32_F(31-1 downto 0)))));
    shl_ln37_1_fu_607_p2 <= std_logic_vector(shift_left(unsigned(p_b_data_1_reg_1082),to_integer(unsigned('0' & ap_const_lv32_D(31-1 downto 0)))));
    shl_ln37_2_fu_618_p2 <= std_logic_vector(shift_left(unsigned(p_b_data_1_reg_1082),to_integer(unsigned('0' & ap_const_lv32_B(31-1 downto 0)))));
    shl_ln37_3_fu_629_p2 <= std_logic_vector(shift_left(unsigned(p_b_data_1_reg_1082),to_integer(unsigned('0' & ap_const_lv32_9(31-1 downto 0)))));
    shl_ln37_4_fu_703_p2 <= std_logic_vector(shift_left(unsigned(p_b_data_1_reg_1082_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    shl_ln37_5_fu_713_p2 <= std_logic_vector(shift_left(unsigned(p_b_data_1_reg_1082_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln37_fu_602_p2 <= std_logic_vector(shift_left(unsigned(p_b_data_1_reg_1082),to_integer(unsigned('0' & ap_const_lv32_F(31-1 downto 0)))));
    shl_ln38_fu_724_p2 <= std_logic_vector(shift_left(unsigned(p_r_data_1_reg_1002_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    sub_ln36_1_fu_873_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln36_fu_869_p1));
    sub_ln36_2_fu_485_p2 <= std_logic_vector(unsigned(shl_ln36_fu_473_p2) - unsigned(shl_ln36_1_fu_479_p2));
    sub_ln36_3_fu_548_p2 <= std_logic_vector(unsigned(add_ln36_3_fu_538_p2) - unsigned(shl_ln36_4_fu_543_p2));
    sub_ln36_4_fu_655_p2 <= std_logic_vector(unsigned(add_ln36_4_fu_645_p2) - unsigned(shl_ln36_6_fu_650_p2));
    sub_ln36_5_fu_515_p2 <= std_logic_vector(unsigned(shl_ln36_7_fu_503_p2) - unsigned(shl_ln36_8_fu_509_p2));
    sub_ln36_6_fu_676_p2 <= std_logic_vector(unsigned(add_ln36_8_fu_666_p2) - unsigned(shl_ln36_13_fu_671_p2));
    sub_ln36_7_fu_585_p2 <= std_logic_vector(unsigned(shl_ln36_14_fu_575_p2) - unsigned(shl_ln36_15_fu_580_p2));
    sub_ln36_8_fu_596_p2 <= std_logic_vector(unsigned(sub_ln36_7_fu_585_p2) - unsigned(shl_ln36_16_fu_591_p2));
    sub_ln36_fu_838_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln36_reg_1261));
    sub_ln37_1_fu_920_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln37_fu_916_p1));
    sub_ln37_fu_885_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln37_2_reg_1272));
    sub_ln38_1_fu_967_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln38_fu_963_p1));
    sub_ln38_2_fu_729_p2 <= std_logic_vector(unsigned(shl_ln38_fu_724_p2) - unsigned(shl_ln36_1_reg_1128_pp0_iter2_reg));
    sub_ln38_3_fu_739_p2 <= std_logic_vector(unsigned(add_ln38_2_fu_734_p2) - unsigned(shl_ln36_6_fu_650_p2));
    sub_ln38_fu_932_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln38_2_reg_1283));
    tmp_1_cast_fu_853_p4 <= mul_ln36_reg_1261(63 downto 49);
    tmp_2_cast_fu_890_p4 <= sub_ln37_fu_885_p2(63 downto 49);
    tmp_3_cast_fu_900_p4 <= mul_ln37_2_reg_1272(63 downto 49);
    tmp_4_cast_fu_937_p4 <= sub_ln38_fu_932_p2(63 downto 49);
    tmp_5_cast_fu_947_p4 <= mul_ln38_2_reg_1283(63 downto 49);
    tmp_cast_fu_843_p4 <= sub_ln36_fu_838_p2(63 downto 49);
    u_fu_926_p3 <= 
        sub_ln37_1_fu_920_p2 when (tmp_1_reg_1229_pp0_iter6_reg(0) = '1') else 
        tmp_3_cast2_reg_1278;
    v_fu_973_p3 <= 
        sub_ln38_1_fu_967_p2 when (tmp_2_reg_1240_pp0_iter6_reg(0) = '1') else 
        tmp_5_cast3_reg_1289;
    y_fu_879_p3 <= 
        sub_ln36_1_fu_873_p2 when (tmp_reg_1218_pp0_iter6_reg(0) = '1') else 
        tmp_1_cast1_reg_1267;
    zext_ln36_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_fu_862_p3),16));
    zext_ln37_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_fu_909_p3),16));
    zext_ln38_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_fu_956_p3),16));
end behav;
