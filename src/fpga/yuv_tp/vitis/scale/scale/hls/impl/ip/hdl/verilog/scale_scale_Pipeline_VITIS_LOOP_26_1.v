// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module scale_scale_Pipeline_VITIS_LOOP_26_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ch_in_TVALID,
        ch_out_TREADY,
        total_data,
        ch_in_TDATA,
        ch_in_TREADY,
        ch_in_TKEEP,
        ch_in_TSTRB,
        ch_in_TUSER,
        ch_in_TLAST,
        ch_in_TID,
        ch_in_TDEST,
        scale_factor,
        ch_out_TDATA,
        ch_out_TVALID,
        ch_out_TKEEP,
        ch_out_TSTRB,
        ch_out_TUSER,
        ch_out_TLAST,
        ch_out_TID,
        ch_out_TDEST,
        grp_fu_130_p_din0,
        grp_fu_130_p_din1,
        grp_fu_130_p_dout0,
        grp_fu_130_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ch_in_TVALID;
input   ch_out_TREADY;
input  [31:0] total_data;
input  [31:0] ch_in_TDATA;
output   ch_in_TREADY;
input  [3:0] ch_in_TKEEP;
input  [3:0] ch_in_TSTRB;
input  [1:0] ch_in_TUSER;
input  [0:0] ch_in_TLAST;
input  [4:0] ch_in_TID;
input  [5:0] ch_in_TDEST;
input  [31:0] scale_factor;
output  [31:0] ch_out_TDATA;
output   ch_out_TVALID;
output  [3:0] ch_out_TKEEP;
output  [3:0] ch_out_TSTRB;
output  [1:0] ch_out_TUSER;
output  [0:0] ch_out_TLAST;
output  [4:0] ch_out_TID;
output  [5:0] ch_out_TDEST;
output  [31:0] grp_fu_130_p_din0;
output  [31:0] grp_fu_130_p_din1;
input  [31:0] grp_fu_130_p_dout0;
output   grp_fu_130_p_ce;

reg ap_idle;
reg ch_in_TREADY;
reg ch_out_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln26_fu_143_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ch_in_TDATA_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    ch_out_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001_grp1;
reg    ap_block_pp0_stage0_11001;
reg  signed [31:0] p_tmp_data_1_reg_204;
reg   [3:0] p_tmp_keep_reg_209;
reg   [3:0] p_tmp_keep_reg_209_pp0_iter2_reg;
reg   [3:0] p_tmp_keep_reg_209_pp0_iter3_reg;
reg   [3:0] p_tmp_strb_reg_214;
reg   [3:0] p_tmp_strb_reg_214_pp0_iter2_reg;
reg   [3:0] p_tmp_strb_reg_214_pp0_iter3_reg;
reg   [1:0] p_tmp_user_reg_219;
reg   [1:0] p_tmp_user_reg_219_pp0_iter2_reg;
reg   [1:0] p_tmp_user_reg_219_pp0_iter3_reg;
reg   [0:0] p_tmp_last_reg_224;
reg   [0:0] p_tmp_last_reg_224_pp0_iter2_reg;
reg   [0:0] p_tmp_last_reg_224_pp0_iter3_reg;
reg   [4:0] p_tmp_id_reg_229;
reg   [4:0] p_tmp_id_reg_229_pp0_iter2_reg;
reg   [4:0] p_tmp_id_reg_229_pp0_iter3_reg;
reg   [5:0] p_tmp_dest_reg_234;
reg   [5:0] p_tmp_dest_reg_234_pp0_iter2_reg;
reg   [5:0] p_tmp_dest_reg_234_pp0_iter3_reg;
reg   [31:0] tmp_out_reg_239;
reg   [30:0] i_fu_68;
wire   [30:0] add_ln26_fu_149_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_i_load;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001_grp1;
wire   [31:0] i_cast_fu_139_p1;
reg    grp_fu_127_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 i_fu_68 = 31'd0;
#0 ap_done_reg = 1'b0;
end

scale_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln26_fu_143_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_68 <= add_ln26_fu_149_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_68 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_tmp_data_1_reg_204 <= ch_in_TDATA;
        p_tmp_dest_reg_234 <= ch_in_TDEST;
        p_tmp_id_reg_229 <= ch_in_TID;
        p_tmp_keep_reg_209 <= ch_in_TKEEP;
        p_tmp_last_reg_224 <= ch_in_TLAST;
        p_tmp_strb_reg_214 <= ch_in_TSTRB;
        p_tmp_user_reg_219 <= ch_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        p_tmp_dest_reg_234_pp0_iter2_reg <= p_tmp_dest_reg_234;
        p_tmp_dest_reg_234_pp0_iter3_reg <= p_tmp_dest_reg_234_pp0_iter2_reg;
        p_tmp_id_reg_229_pp0_iter2_reg <= p_tmp_id_reg_229;
        p_tmp_id_reg_229_pp0_iter3_reg <= p_tmp_id_reg_229_pp0_iter2_reg;
        p_tmp_keep_reg_209_pp0_iter2_reg <= p_tmp_keep_reg_209;
        p_tmp_keep_reg_209_pp0_iter3_reg <= p_tmp_keep_reg_209_pp0_iter2_reg;
        p_tmp_last_reg_224_pp0_iter2_reg <= p_tmp_last_reg_224;
        p_tmp_last_reg_224_pp0_iter3_reg <= p_tmp_last_reg_224_pp0_iter2_reg;
        p_tmp_strb_reg_214_pp0_iter2_reg <= p_tmp_strb_reg_214;
        p_tmp_strb_reg_214_pp0_iter3_reg <= p_tmp_strb_reg_214_pp0_iter2_reg;
        p_tmp_user_reg_219_pp0_iter2_reg <= p_tmp_user_reg_219;
        p_tmp_user_reg_219_pp0_iter3_reg <= p_tmp_user_reg_219_pp0_iter2_reg;
        tmp_out_reg_239 <= grp_fu_130_p_dout0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_143_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 31'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_in_TDATA_blk_n = ch_in_TVALID;
    end else begin
        ch_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_in_TREADY = 1'b1;
    end else begin
        ch_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ch_out_TDATA_blk_n = ch_out_TREADY;
    end else begin
        ch_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ch_out_TVALID = 1'b1;
    end else begin
        ch_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_127_ce = 1'b1;
    end else begin
        grp_fu_127_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_fu_149_p2 = (ap_sig_allocacmp_i_load + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = (((ch_out_TREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ch_in_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ch_out_TREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ch_in_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = (((ch_out_TREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ch_in_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ch_out_TREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ch_in_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign ch_out_TDATA = tmp_out_reg_239;

assign ch_out_TDEST = p_tmp_dest_reg_234_pp0_iter3_reg;

assign ch_out_TID = p_tmp_id_reg_229_pp0_iter3_reg;

assign ch_out_TKEEP = p_tmp_keep_reg_209_pp0_iter3_reg;

assign ch_out_TLAST = p_tmp_last_reg_224_pp0_iter3_reg;

assign ch_out_TSTRB = p_tmp_strb_reg_214_pp0_iter3_reg;

assign ch_out_TUSER = p_tmp_user_reg_219_pp0_iter3_reg;

assign grp_fu_130_p_ce = grp_fu_127_ce;

assign grp_fu_130_p_din0 = p_tmp_data_1_reg_204;

assign grp_fu_130_p_din1 = scale_factor;

assign i_cast_fu_139_p1 = ap_sig_allocacmp_i_load;

assign icmp_ln26_fu_143_p2 = (($signed(i_cast_fu_139_p1) < $signed(total_data)) ? 1'b1 : 1'b0);

endmodule //scale_scale_Pipeline_VITIS_LOOP_26_1
