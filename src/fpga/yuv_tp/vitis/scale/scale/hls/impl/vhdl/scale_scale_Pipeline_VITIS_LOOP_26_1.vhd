-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scale_scale_Pipeline_VITIS_LOOP_26_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ch_in_TVALID : IN STD_LOGIC;
    ch_out_TREADY : IN STD_LOGIC;
    total_data : IN STD_LOGIC_VECTOR (31 downto 0);
    ch_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    ch_in_TREADY : OUT STD_LOGIC;
    ch_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_in_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_in_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    ch_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    ch_in_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    ch_in_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    scale_factor : IN STD_LOGIC_VECTOR (31 downto 0);
    ch_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    ch_out_TVALID : OUT STD_LOGIC;
    ch_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_out_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    ch_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ch_out_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    ch_out_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    grp_fu_130_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_130_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_130_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_130_p_ce : OUT STD_LOGIC );
end;


architecture behav of scale_scale_Pipeline_VITIS_LOOP_26_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln26_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ch_in_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal ch_out_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_tmp_data_1_reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_keep_reg_209 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_tmp_keep_reg_209_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_tmp_keep_reg_209_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_tmp_strb_reg_214 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_tmp_strb_reg_214_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_tmp_strb_reg_214_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_tmp_user_reg_219 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_tmp_user_reg_219_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_tmp_user_reg_219_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_tmp_last_reg_224 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_tmp_last_reg_224_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_tmp_last_reg_224_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_tmp_id_reg_229 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_tmp_id_reg_229_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_tmp_id_reg_229_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_tmp_dest_reg_234 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_tmp_dest_reg_234_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_tmp_dest_reg_234_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_out_reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_68 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln26_fu_149_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal i_cast_fu_139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_127_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component scale_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component scale_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component scale_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln26_fu_143_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_68 <= add_ln26_fu_149_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_68 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_tmp_data_1_reg_204 <= ch_in_TDATA;
                p_tmp_dest_reg_234 <= ch_in_TDEST;
                p_tmp_id_reg_229 <= ch_in_TID;
                p_tmp_keep_reg_209 <= ch_in_TKEEP;
                p_tmp_last_reg_224 <= ch_in_TLAST;
                p_tmp_strb_reg_214 <= ch_in_TSTRB;
                p_tmp_user_reg_219 <= ch_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                p_tmp_dest_reg_234_pp0_iter2_reg <= p_tmp_dest_reg_234;
                p_tmp_dest_reg_234_pp0_iter3_reg <= p_tmp_dest_reg_234_pp0_iter2_reg;
                p_tmp_id_reg_229_pp0_iter2_reg <= p_tmp_id_reg_229;
                p_tmp_id_reg_229_pp0_iter3_reg <= p_tmp_id_reg_229_pp0_iter2_reg;
                p_tmp_keep_reg_209_pp0_iter2_reg <= p_tmp_keep_reg_209;
                p_tmp_keep_reg_209_pp0_iter3_reg <= p_tmp_keep_reg_209_pp0_iter2_reg;
                p_tmp_last_reg_224_pp0_iter2_reg <= p_tmp_last_reg_224;
                p_tmp_last_reg_224_pp0_iter3_reg <= p_tmp_last_reg_224_pp0_iter2_reg;
                p_tmp_strb_reg_214_pp0_iter2_reg <= p_tmp_strb_reg_214;
                p_tmp_strb_reg_214_pp0_iter3_reg <= p_tmp_strb_reg_214_pp0_iter2_reg;
                p_tmp_user_reg_219_pp0_iter2_reg <= p_tmp_user_reg_219;
                p_tmp_user_reg_219_pp0_iter3_reg <= p_tmp_user_reg_219_pp0_iter2_reg;
                tmp_out_reg_239 <= grp_fu_130_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln26_fu_149_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ch_in_TVALID, ch_out_TREADY)
    begin
                ap_block_pp0_stage0_01001_grp1 <= (((ch_out_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ch_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ch_in_TVALID, ch_out_TREADY)
    begin
                ap_block_pp0_stage0_11001 <= (((ch_out_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ch_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ch_in_TVALID, ch_out_TREADY)
    begin
                ap_block_pp0_stage0_11001_grp1 <= (((ch_out_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ch_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ch_in_TVALID, ch_out_TREADY)
    begin
                ap_block_pp0_stage0_subdone <= (((ch_out_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ch_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln26_fu_143_p2)
    begin
        if (((icmp_ln26_fu_143_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, i_fu_68, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_68;
        end if; 
    end process;


    ch_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ch_in_TVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_in_TDATA_blk_n <= ch_in_TVALID;
        else 
            ch_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ch_in_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_in_TREADY <= ap_const_logic_1;
        else 
            ch_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    ch_out_TDATA <= tmp_out_reg_239;

    ch_out_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, ch_out_TREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ch_out_TDATA_blk_n <= ch_out_TREADY;
        else 
            ch_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ch_out_TDEST <= p_tmp_dest_reg_234_pp0_iter3_reg;
    ch_out_TID <= p_tmp_id_reg_229_pp0_iter3_reg;
    ch_out_TKEEP <= p_tmp_keep_reg_209_pp0_iter3_reg;
    ch_out_TLAST <= p_tmp_last_reg_224_pp0_iter3_reg;
    ch_out_TSTRB <= p_tmp_strb_reg_214_pp0_iter3_reg;
    ch_out_TUSER <= p_tmp_user_reg_219_pp0_iter3_reg;

    ch_out_TVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ch_out_TVALID <= ap_const_logic_1;
        else 
            ch_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_127_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_127_ce <= ap_const_logic_1;
        else 
            grp_fu_127_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_130_p_ce <= grp_fu_127_ce;
    grp_fu_130_p_din0 <= p_tmp_data_1_reg_204;
    grp_fu_130_p_din1 <= scale_factor;
    i_cast_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_load),32));
    icmp_ln26_fu_143_p2 <= "1" when (signed(i_cast_fu_139_p1) < signed(total_data)) else "0";
end behav;
