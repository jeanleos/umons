// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module torgb_torgb_Pipeline_VITIS_LOOP_24_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ch_y_TVALID,
        ch_u_TVALID,
        ch_v_TVALID,
        ch_r_TREADY,
        ch_g_TREADY,
        ch_b_TREADY,
        total,
        ch_y_TDATA,
        ch_y_TREADY,
        ch_y_TKEEP,
        ch_y_TSTRB,
        ch_y_TUSER,
        ch_y_TLAST,
        ch_y_TID,
        ch_y_TDEST,
        ch_u_TDATA,
        ch_u_TREADY,
        ch_u_TKEEP,
        ch_u_TSTRB,
        ch_u_TUSER,
        ch_u_TLAST,
        ch_u_TID,
        ch_u_TDEST,
        ch_v_TDATA,
        ch_v_TREADY,
        ch_v_TKEEP,
        ch_v_TSTRB,
        ch_v_TUSER,
        ch_v_TLAST,
        ch_v_TID,
        ch_v_TDEST,
        ch_r_TDATA,
        ch_r_TVALID,
        ch_r_TKEEP,
        ch_r_TSTRB,
        ch_r_TUSER,
        ch_r_TLAST,
        ch_r_TID,
        ch_r_TDEST,
        ch_g_TDATA,
        ch_g_TVALID,
        ch_g_TKEEP,
        ch_g_TSTRB,
        ch_g_TUSER,
        ch_g_TLAST,
        ch_g_TID,
        ch_g_TDEST,
        ch_b_TDATA,
        ch_b_TVALID,
        ch_b_TKEEP,
        ch_b_TSTRB,
        ch_b_TUSER,
        ch_b_TLAST,
        ch_b_TID,
        ch_b_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ch_y_TVALID;
input   ch_u_TVALID;
input   ch_v_TVALID;
input   ch_r_TREADY;
input   ch_g_TREADY;
input   ch_b_TREADY;
input  [31:0] total;
input  [31:0] ch_y_TDATA;
output   ch_y_TREADY;
input  [3:0] ch_y_TKEEP;
input  [3:0] ch_y_TSTRB;
input  [1:0] ch_y_TUSER;
input  [0:0] ch_y_TLAST;
input  [4:0] ch_y_TID;
input  [5:0] ch_y_TDEST;
input  [31:0] ch_u_TDATA;
output   ch_u_TREADY;
input  [3:0] ch_u_TKEEP;
input  [3:0] ch_u_TSTRB;
input  [1:0] ch_u_TUSER;
input  [0:0] ch_u_TLAST;
input  [4:0] ch_u_TID;
input  [5:0] ch_u_TDEST;
input  [31:0] ch_v_TDATA;
output   ch_v_TREADY;
input  [3:0] ch_v_TKEEP;
input  [3:0] ch_v_TSTRB;
input  [1:0] ch_v_TUSER;
input  [0:0] ch_v_TLAST;
input  [4:0] ch_v_TID;
input  [5:0] ch_v_TDEST;
output  [31:0] ch_r_TDATA;
output   ch_r_TVALID;
output  [3:0] ch_r_TKEEP;
output  [3:0] ch_r_TSTRB;
output  [1:0] ch_r_TUSER;
output  [0:0] ch_r_TLAST;
output  [4:0] ch_r_TID;
output  [5:0] ch_r_TDEST;
output  [31:0] ch_g_TDATA;
output   ch_g_TVALID;
output  [3:0] ch_g_TKEEP;
output  [3:0] ch_g_TSTRB;
output  [1:0] ch_g_TUSER;
output  [0:0] ch_g_TLAST;
output  [4:0] ch_g_TID;
output  [5:0] ch_g_TDEST;
output  [31:0] ch_b_TDATA;
output   ch_b_TVALID;
output  [3:0] ch_b_TKEEP;
output  [3:0] ch_b_TSTRB;
output  [1:0] ch_b_TUSER;
output  [0:0] ch_b_TLAST;
output  [4:0] ch_b_TID;
output  [5:0] ch_b_TDEST;

reg ap_idle;
reg ch_y_TREADY;
reg ch_u_TREADY;
reg ch_v_TREADY;
reg ch_r_TVALID;
reg ch_g_TVALID;
reg ch_b_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1_grp1;
reg    ap_block_pp0_stage0_subdone_grp1_done_reg;
reg    ap_block_pp0_stage0_subdone_grp1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_state2_pp0_stage0_iter1_grp2;
reg    ap_block_pp0_stage0_subdone_grp2_done_reg;
reg    ap_block_pp0_stage0_subdone_grp2;
reg    ap_block_state2_pp0_stage0_iter1_grp3;
reg    ap_block_pp0_stage0_subdone_grp3_done_reg;
reg    ap_block_pp0_stage0_subdone_grp3;
wire   [0:0] icmp_ln24_fu_286_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ch_y_TDATA_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    ch_u_TDATA_blk_n;
wire    ap_block_pp0_stage0_grp2;
reg    ch_v_TDATA_blk_n;
wire    ap_block_pp0_stage0_grp3;
reg    ch_r_TDATA_blk_n;
reg    ch_g_TDATA_blk_n;
reg    ch_b_TDATA_blk_n;
reg   [30:0] i_fu_132;
wire   [30:0] add_ln24_fu_292_p2;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_11001;
reg   [30:0] ap_sig_allocacmp_i_load;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001_grp1;
reg    ap_block_pp0_stage0_11001_grp2;
reg    ap_block_pp0_stage0_11001_grp3;
reg    ap_block_pp0_stage0_01001_grp1;
reg    ap_block_pp0_stage0_01001_grp2;
reg    ap_block_pp0_stage0_01001_grp3;
wire   [31:0] i_cast_fu_282_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp1_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp2_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp3_done_reg = 1'b0;
#0 i_fu_132 = 31'd0;
#0 ap_done_reg = 1'b0;
end

torgb_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp1)) begin
            ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp2)) begin
            ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp3_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp3_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp3)) begin
            ap_block_pp0_stage0_subdone_grp3_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln24_fu_286_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_132 <= add_ln24_fu_292_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_132 <= 31'd0;
        end
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_286_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 31'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_132;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (1'b0 == ap_block_pp0_stage0_grp3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_b_TDATA_blk_n = ch_b_TREADY;
    end else begin
        ch_b_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_b_TVALID = 1'b1;
    end else begin
        ch_b_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b0 == ap_block_pp0_stage0_grp2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_g_TDATA_blk_n = ch_g_TREADY;
    end else begin
        ch_g_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_g_TVALID = 1'b1;
    end else begin
        ch_g_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_r_TDATA_blk_n = ch_r_TREADY;
    end else begin
        ch_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_r_TVALID = 1'b1;
    end else begin
        ch_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b0 == ap_block_pp0_stage0_grp2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_u_TDATA_blk_n = ch_u_TVALID;
    end else begin
        ch_u_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_u_TREADY = 1'b1;
    end else begin
        ch_u_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (1'b0 == ap_block_pp0_stage0_grp3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_v_TDATA_blk_n = ch_v_TVALID;
    end else begin
        ch_v_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_v_TREADY = 1'b1;
    end else begin
        ch_v_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_y_TDATA_blk_n = ch_y_TVALID;
    end else begin
        ch_y_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_y_TREADY = 1'b1;
    end else begin
        ch_y_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_fu_292_p2 = (ap_sig_allocacmp_i_load + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1));
end

always @ (*) begin
    ap_block_pp0_stage0_01001_grp2 = ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp2));
end

always @ (*) begin
    ap_block_pp0_stage0_01001_grp3 = ((1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp3));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp3)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp2)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp2 = ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp2));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp3 = ((1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp3));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp3)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp2)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp1 = ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp2 = ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp2));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp3 = ((1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp3));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1_grp1 = ((ch_r_TREADY == 1'b0) | (ch_y_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1_grp2 = ((ch_g_TREADY == 1'b0) | (ch_u_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1_grp3 = ((ch_b_TREADY == 1'b0) | (ch_v_TVALID == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign ch_b_TDATA = 32'd255;

assign ch_b_TDEST = ch_v_TDEST;

assign ch_b_TID = ch_v_TID;

assign ch_b_TKEEP = ch_v_TKEEP;

assign ch_b_TLAST = ch_v_TLAST;

assign ch_b_TSTRB = ch_v_TSTRB;

assign ch_b_TUSER = ch_v_TUSER;

assign ch_g_TDATA = 32'd255;

assign ch_g_TDEST = ch_u_TDEST;

assign ch_g_TID = ch_u_TID;

assign ch_g_TKEEP = ch_u_TKEEP;

assign ch_g_TLAST = ch_u_TLAST;

assign ch_g_TSTRB = ch_u_TSTRB;

assign ch_g_TUSER = ch_u_TUSER;

assign ch_r_TDATA = 32'd255;

assign ch_r_TDEST = ch_y_TDEST;

assign ch_r_TID = ch_y_TID;

assign ch_r_TKEEP = ch_y_TKEEP;

assign ch_r_TLAST = ch_y_TLAST;

assign ch_r_TSTRB = ch_y_TSTRB;

assign ch_r_TUSER = ch_y_TUSER;

assign i_cast_fu_282_p1 = ap_sig_allocacmp_i_load;

assign icmp_ln24_fu_286_p2 = (($signed(i_cast_fu_282_p1) < $signed(total)) ? 1'b1 : 1'b0);

endmodule //torgb_torgb_Pipeline_VITIS_LOOP_24_1
