-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity torgb_torgb_Pipeline_VITIS_LOOP_24_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ch_y_TVALID : IN STD_LOGIC;
    ch_u_TVALID : IN STD_LOGIC;
    ch_v_TVALID : IN STD_LOGIC;
    ch_r_TREADY : IN STD_LOGIC;
    ch_g_TREADY : IN STD_LOGIC;
    ch_b_TREADY : IN STD_LOGIC;
    total : IN STD_LOGIC_VECTOR (31 downto 0);
    ch_y_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    ch_y_TREADY : OUT STD_LOGIC;
    ch_y_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_y_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_y_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    ch_y_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    ch_y_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    ch_y_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    ch_u_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    ch_u_TREADY : OUT STD_LOGIC;
    ch_u_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_u_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_u_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    ch_u_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    ch_u_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    ch_u_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    ch_v_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    ch_v_TREADY : OUT STD_LOGIC;
    ch_v_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_v_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_v_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    ch_v_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    ch_v_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    ch_v_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    ch_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    ch_r_TVALID : OUT STD_LOGIC;
    ch_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_r_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    ch_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ch_r_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    ch_r_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    ch_g_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    ch_g_TVALID : OUT STD_LOGIC;
    ch_g_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_g_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_g_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    ch_g_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ch_g_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    ch_g_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    ch_b_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    ch_b_TVALID : OUT STD_LOGIC;
    ch_b_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_b_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_b_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    ch_b_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ch_b_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    ch_b_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of torgb_torgb_Pipeline_VITIS_LOOP_24_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp1_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_grp2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp2_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_grp3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp3_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp3 : BOOLEAN;
    signal icmp_ln24_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ch_y_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal ch_u_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp2 : BOOLEAN;
    signal ch_v_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp3 : BOOLEAN;
    signal ch_r_TDATA_blk_n : STD_LOGIC;
    signal ch_g_TDATA_blk_n : STD_LOGIC;
    signal ch_b_TDATA_blk_n : STD_LOGIC;
    signal i_fu_132 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln24_fu_292_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp3 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp2 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp3 : BOOLEAN;
    signal i_cast_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component torgb_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component torgb_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp1_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp1_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_block_pp0_stage0_subdone_grp1_done_reg <= ap_const_boolean_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1)) then 
                    ap_block_pp0_stage0_subdone_grp1_done_reg <= ap_const_boolean_1;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp2_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp2_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_block_pp0_stage0_subdone_grp2_done_reg <= ap_const_boolean_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2)) then 
                    ap_block_pp0_stage0_subdone_grp2_done_reg <= ap_const_boolean_1;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp3_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp3_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_block_pp0_stage0_subdone_grp3_done_reg <= ap_const_boolean_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp3)) then 
                    ap_block_pp0_stage0_subdone_grp3_done_reg <= ap_const_boolean_1;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln24_fu_286_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_132 <= add_ln24_fu_292_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_132 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln24_fu_292_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_pp0_stage0_subdone_grp1_done_reg)
    begin
                ap_block_pp0_stage0_01001_grp1 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1));
    end process;


    ap_block_pp0_stage0_01001_grp2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1_grp2, ap_block_pp0_stage0_subdone_grp2_done_reg)
    begin
                ap_block_pp0_stage0_01001_grp2 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp2));
    end process;


    ap_block_pp0_stage0_01001_grp3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1_grp3, ap_block_pp0_stage0_subdone_grp3_done_reg)
    begin
                ap_block_pp0_stage0_01001_grp3 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp3_done_reg) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp3));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_state2_pp0_stage0_iter1_grp2, ap_block_pp0_stage0_subdone_grp2_done_reg, ap_block_state2_pp0_stage0_iter1_grp3, ap_block_pp0_stage0_subdone_grp3_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp3_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1))));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_pp0_stage0_subdone_grp1_done_reg)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1));
    end process;


    ap_block_pp0_stage0_11001_grp2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1_grp2, ap_block_pp0_stage0_subdone_grp2_done_reg)
    begin
                ap_block_pp0_stage0_11001_grp2 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp2));
    end process;


    ap_block_pp0_stage0_11001_grp3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1_grp3, ap_block_pp0_stage0_subdone_grp3_done_reg)
    begin
                ap_block_pp0_stage0_11001_grp3 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp3_done_reg) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp3));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_state2_pp0_stage0_iter1_grp2, ap_block_pp0_stage0_subdone_grp2_done_reg, ap_block_state2_pp0_stage0_iter1_grp3, ap_block_pp0_stage0_subdone_grp3_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp3_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1))));
    end process;


    ap_block_pp0_stage0_subdone_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_pp0_stage0_subdone_grp1_done_reg)
    begin
                ap_block_pp0_stage0_subdone_grp1 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1));
    end process;


    ap_block_pp0_stage0_subdone_grp2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1_grp2, ap_block_pp0_stage0_subdone_grp2_done_reg)
    begin
                ap_block_pp0_stage0_subdone_grp2 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp2));
    end process;


    ap_block_pp0_stage0_subdone_grp3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1_grp3, ap_block_pp0_stage0_subdone_grp3_done_reg)
    begin
                ap_block_pp0_stage0_subdone_grp3 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp3_done_reg) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp3));
    end process;


    ap_block_state2_pp0_stage0_iter1_grp1_assign_proc : process(ch_y_TVALID, ch_r_TREADY)
    begin
                ap_block_state2_pp0_stage0_iter1_grp1 <= ((ch_r_TREADY = ap_const_logic_0) or (ch_y_TVALID = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_grp2_assign_proc : process(ch_u_TVALID, ch_g_TREADY)
    begin
                ap_block_state2_pp0_stage0_iter1_grp2 <= ((ch_g_TREADY = ap_const_logic_0) or (ch_u_TVALID = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_grp3_assign_proc : process(ch_v_TVALID, ch_b_TREADY)
    begin
                ap_block_state2_pp0_stage0_iter1_grp3 <= ((ch_b_TREADY = ap_const_logic_0) or (ch_v_TVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln24_fu_286_p2)
    begin
        if (((icmp_ln24_fu_286_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, i_fu_132, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_132;
        end if; 
    end process;

    ch_b_TDATA <= ap_const_lv32_FF;

    ch_b_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ch_b_TREADY, ap_block_pp0_stage0_subdone_grp3_done_reg, ap_block_pp0_stage0_grp3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp3_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_b_TDATA_blk_n <= ch_b_TREADY;
        else 
            ch_b_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ch_b_TDEST <= ch_v_TDEST;
    ch_b_TID <= ch_v_TID;
    ch_b_TKEEP <= ch_v_TKEEP;
    ch_b_TLAST <= ch_v_TLAST;
    ch_b_TSTRB <= ch_v_TSTRB;
    ch_b_TUSER <= ch_v_TUSER;

    ch_b_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone_grp3_done_reg, ap_block_pp0_stage0_11001_grp3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp3_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_b_TVALID <= ap_const_logic_1;
        else 
            ch_b_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    ch_g_TDATA <= ap_const_lv32_FF;

    ch_g_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ch_g_TREADY, ap_block_pp0_stage0_subdone_grp2_done_reg, ap_block_pp0_stage0_grp2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_g_TDATA_blk_n <= ch_g_TREADY;
        else 
            ch_g_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ch_g_TDEST <= ch_u_TDEST;
    ch_g_TID <= ch_u_TID;
    ch_g_TKEEP <= ch_u_TKEEP;
    ch_g_TLAST <= ch_u_TLAST;
    ch_g_TSTRB <= ch_u_TSTRB;
    ch_g_TUSER <= ch_u_TUSER;

    ch_g_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone_grp2_done_reg, ap_block_pp0_stage0_11001_grp2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_g_TVALID <= ap_const_logic_1;
        else 
            ch_g_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    ch_r_TDATA <= ap_const_lv32_FF;

    ch_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ch_r_TREADY, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_r_TDATA_blk_n <= ch_r_TREADY;
        else 
            ch_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ch_r_TDEST <= ch_y_TDEST;
    ch_r_TID <= ch_y_TID;
    ch_r_TKEEP <= ch_y_TKEEP;
    ch_r_TLAST <= ch_y_TLAST;
    ch_r_TSTRB <= ch_y_TSTRB;
    ch_r_TUSER <= ch_y_TUSER;

    ch_r_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_r_TVALID <= ap_const_logic_1;
        else 
            ch_r_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    ch_u_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ch_u_TVALID, ap_block_pp0_stage0_subdone_grp2_done_reg, ap_block_pp0_stage0_grp2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_u_TDATA_blk_n <= ch_u_TVALID;
        else 
            ch_u_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ch_u_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone_grp2_done_reg, ap_block_pp0_stage0_11001_grp2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_u_TREADY <= ap_const_logic_1;
        else 
            ch_u_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    ch_v_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ch_v_TVALID, ap_block_pp0_stage0_subdone_grp3_done_reg, ap_block_pp0_stage0_grp3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp3_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_v_TDATA_blk_n <= ch_v_TVALID;
        else 
            ch_v_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ch_v_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone_grp3_done_reg, ap_block_pp0_stage0_11001_grp3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp3_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_v_TREADY <= ap_const_logic_1;
        else 
            ch_v_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    ch_y_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ch_y_TVALID, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_y_TDATA_blk_n <= ch_y_TVALID;
        else 
            ch_y_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ch_y_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_y_TREADY <= ap_const_logic_1;
        else 
            ch_y_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    i_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_load),32));
    icmp_ln24_fu_286_p2 <= "1" when (signed(i_cast_fu_282_p1) < signed(total)) else "0";
end behav;
