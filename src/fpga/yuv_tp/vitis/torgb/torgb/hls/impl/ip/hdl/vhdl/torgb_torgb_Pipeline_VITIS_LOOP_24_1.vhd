-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity torgb_torgb_Pipeline_VITIS_LOOP_24_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ch_y_TVALID : IN STD_LOGIC;
    ch_u_TVALID : IN STD_LOGIC;
    ch_v_TVALID : IN STD_LOGIC;
    ch_r_TREADY : IN STD_LOGIC;
    ch_g_TREADY : IN STD_LOGIC;
    ch_b_TREADY : IN STD_LOGIC;
    total : IN STD_LOGIC_VECTOR (31 downto 0);
    ch_y_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    ch_y_TREADY : OUT STD_LOGIC;
    ch_y_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_y_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_y_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    ch_y_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    ch_y_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    ch_y_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    ch_u_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    ch_u_TREADY : OUT STD_LOGIC;
    ch_u_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_u_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_u_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    ch_u_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    ch_u_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    ch_u_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    ch_v_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    ch_v_TREADY : OUT STD_LOGIC;
    ch_v_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_v_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    ch_v_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    ch_v_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    ch_v_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    ch_v_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    ch_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    ch_r_TVALID : OUT STD_LOGIC;
    ch_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_r_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    ch_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ch_r_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    ch_r_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    ch_g_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    ch_g_TVALID : OUT STD_LOGIC;
    ch_g_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_g_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_g_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    ch_g_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ch_g_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    ch_g_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    ch_b_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    ch_b_TVALID : OUT STD_LOGIC;
    ch_b_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_b_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    ch_b_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    ch_b_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ch_b_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    ch_b_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of torgb_torgb_Pipeline_VITIS_LOOP_24_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv65_14F8B588F : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101001111100010110101100010001111";
    constant ap_const_lv32_FFFF65D7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110110010111010111";
    constant ap_const_lv32_FFFF1D34 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110001110100110100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1_grp1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln24_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ch_y_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal ch_u_TDATA_blk_n : STD_LOGIC;
    signal ch_v_TDATA_blk_n : STD_LOGIC;
    signal ch_r_TDATA_blk_n : STD_LOGIC;
    signal ch_g_TDATA_blk_n : STD_LOGIC;
    signal ch_b_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_y_data_1_reg_1047 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal p_y_data_1_reg_1047_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_y_keep_reg_1057 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_keep_reg_1057_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_keep_reg_1057_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_keep_reg_1057_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_keep_reg_1057_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_keep_reg_1057_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_keep_reg_1057_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_keep_reg_1057_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_strb_reg_1062 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_strb_reg_1062_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_strb_reg_1062_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_strb_reg_1062_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_strb_reg_1062_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_strb_reg_1062_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_strb_reg_1062_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_strb_reg_1062_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_user_reg_1067 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_y_user_reg_1067_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_y_user_reg_1067_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_y_user_reg_1067_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_y_user_reg_1067_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_y_user_reg_1067_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_y_user_reg_1067_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_y_user_reg_1067_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_y_last_reg_1072 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_y_last_reg_1072_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_y_last_reg_1072_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_y_last_reg_1072_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_y_last_reg_1072_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_y_last_reg_1072_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_y_last_reg_1072_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_y_last_reg_1072_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_y_id_reg_1077 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_y_id_reg_1077_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_y_id_reg_1077_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_y_id_reg_1077_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_y_id_reg_1077_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_y_id_reg_1077_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_y_id_reg_1077_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_y_id_reg_1077_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_y_dest_reg_1082 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_y_dest_reg_1082_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_y_dest_reg_1082_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_y_dest_reg_1082_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_y_dest_reg_1082_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_y_dest_reg_1082_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_y_dest_reg_1082_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_y_dest_reg_1082_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_u_data_1_reg_1087 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_u_data_1_reg_1087_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_u_data_1_reg_1087_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_u_data_1_reg_1087_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_u_keep_reg_1101 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_u_keep_reg_1101_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_u_keep_reg_1101_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_u_keep_reg_1101_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_u_keep_reg_1101_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_u_keep_reg_1101_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_u_keep_reg_1101_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_u_keep_reg_1101_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_u_strb_reg_1106 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_u_strb_reg_1106_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_u_strb_reg_1106_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_u_strb_reg_1106_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_u_strb_reg_1106_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_u_strb_reg_1106_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_u_strb_reg_1106_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_u_strb_reg_1106_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_u_user_reg_1111 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_u_user_reg_1111_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_u_user_reg_1111_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_u_user_reg_1111_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_u_user_reg_1111_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_u_user_reg_1111_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_u_user_reg_1111_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_u_user_reg_1111_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_u_last_reg_1116 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_u_last_reg_1116_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_u_last_reg_1116_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_u_last_reg_1116_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_u_last_reg_1116_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_u_last_reg_1116_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_u_last_reg_1116_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_u_last_reg_1116_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_u_id_reg_1121 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_u_id_reg_1121_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_u_id_reg_1121_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_u_id_reg_1121_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_u_id_reg_1121_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_u_id_reg_1121_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_u_id_reg_1121_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_u_id_reg_1121_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_u_dest_reg_1126 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_u_dest_reg_1126_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_u_dest_reg_1126_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_u_dest_reg_1126_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_u_dest_reg_1126_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_u_dest_reg_1126_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_u_dest_reg_1126_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_u_dest_reg_1126_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_v_data_1_reg_1131 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_v_data_1_reg_1131_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_v_data_1_reg_1131_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_v_keep_reg_1142 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_v_keep_reg_1142_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_v_keep_reg_1142_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_v_keep_reg_1142_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_v_keep_reg_1142_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_v_keep_reg_1142_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_v_keep_reg_1142_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_v_keep_reg_1142_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_v_strb_reg_1147 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_v_strb_reg_1147_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_v_strb_reg_1147_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_v_strb_reg_1147_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_v_strb_reg_1147_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_v_strb_reg_1147_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_v_strb_reg_1147_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_v_strb_reg_1147_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_v_user_reg_1152 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_v_user_reg_1152_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_v_user_reg_1152_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_v_user_reg_1152_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_v_user_reg_1152_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_v_user_reg_1152_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_v_user_reg_1152_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_v_user_reg_1152_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_v_last_reg_1157 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_v_last_reg_1157_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_v_last_reg_1157_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_v_last_reg_1157_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_v_last_reg_1157_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_v_last_reg_1157_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_v_last_reg_1157_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_v_last_reg_1157_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_v_id_reg_1162 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_v_id_reg_1162_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_v_id_reg_1162_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_v_id_reg_1162_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_v_id_reg_1162_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_v_id_reg_1162_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_v_id_reg_1162_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_v_id_reg_1162_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_v_dest_reg_1167 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_v_dest_reg_1167_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_v_dest_reg_1167_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_v_dest_reg_1167_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_v_dest_reg_1167_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_v_dest_reg_1167_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_v_dest_reg_1167_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_v_dest_reg_1167_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln36_3_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_3_reg_1172 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_5_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_5_reg_1177 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln38_3_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln38_3_reg_1182 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_3_fu_587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_3_reg_1187 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_3_reg_1187_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_5_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_5_reg_1194 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln38_4_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln38_4_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_fu_639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_reg_1204 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1209 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1209_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1209_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_reg_1215 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_1_reg_1220 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln38_5_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln38_5_reg_1225 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_1_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_1_reg_1235 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1240 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1240_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1240_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_fu_698_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_reg_1246 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1251 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1251_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1251_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln36_reg_1257 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_1_cast1_reg_1263 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_fu_770_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_reg_1278 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln26_fu_776_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln26_reg_1283 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln37_2_reg_1288 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_3_cast2_reg_1294 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln38_reg_1299 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_5_cast3_reg_1305 : STD_LOGIC_VECTOR (15 downto 0);
    signal g_fu_841_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal g_reg_1310 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln26_1_fu_847_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln26_1_reg_1315 : STD_LOGIC_VECTOR (14 downto 0);
    signal b_fu_892_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_reg_1320 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln26_2_fu_898_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln26_2_reg_1325 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_1_fu_934_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_1_reg_1330 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_192 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln24_fu_374_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal grp_fu_331_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_336_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_346_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_351_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_cast_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_1_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_2_fu_479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_2_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_1_fu_490_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_3_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_6_fu_507_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_7_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_4_fu_517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_8_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_fu_534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_1_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln38_2_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_2_fu_550_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_1_fu_555_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_3_fu_561_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_4_fu_572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_2_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_5_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_9_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_4_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_10_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_4_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_2_fu_619_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_5_fu_624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_6_fu_635_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_6_fu_652_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_3_fu_657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_7_fu_662_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln38_6_fu_694_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_fu_729_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_cast_fu_734_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_cast_fu_744_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln36_fu_753_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln36_fu_760_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln36_1_fu_764_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln37_fu_800_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_2_cast_fu_805_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_cast_fu_815_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln37_fu_824_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln37_fu_831_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln37_1_fu_835_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln38_fu_851_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_4_cast_fu_856_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_cast_fu_866_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln38_fu_875_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln38_fu_882_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln38_1_fu_886_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln40_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_a_1_fu_907_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_fu_918_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln40_1_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln40_fu_914_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln41_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_a_3_fu_951_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_fu_962_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln41_1_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln41_fu_958_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_1_fu_978_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln42_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_a_5_fu_996_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_fu_1007_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln42_1_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln42_fu_1003_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_1_fu_1023_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_331_ce : STD_LOGIC;
    signal grp_fu_336_ce : STD_LOGIC;
    signal grp_fu_341_ce : STD_LOGIC;
    signal grp_fu_346_ce : STD_LOGIC;
    signal grp_fu_351_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component torgb_mul_32s_34ns_65_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component torgb_mul_32s_17s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component torgb_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_34ns_65_2_1_U1 : component torgb_mul_32s_34ns_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln36_reg_1204,
        din1 => grp_fu_331_p1,
        ce => grp_fu_331_ce,
        dout => grp_fu_331_p2);

    mul_32s_34ns_65_2_1_U2 : component torgb_mul_32s_34ns_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln37_1_reg_1235,
        din1 => grp_fu_336_p1,
        ce => grp_fu_336_ce,
        dout => grp_fu_336_p2);

    mul_32s_34ns_65_2_1_U3 : component torgb_mul_32s_34ns_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln38_reg_1246,
        din1 => grp_fu_341_p1,
        ce => grp_fu_341_ce,
        dout => grp_fu_341_p2);

    mul_32s_17s_32_2_1_U4 : component torgb_mul_32s_17s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 17,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_u_data_1_reg_1087_pp0_iter2_reg,
        din1 => grp_fu_346_p1,
        ce => grp_fu_346_ce,
        dout => grp_fu_346_p2);

    mul_32s_17s_32_2_1_U5 : component torgb_mul_32s_17s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 17,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_v_data_1_reg_1131_pp0_iter2_reg,
        din1 => grp_fu_351_p1,
        ce => grp_fu_351_ce,
        dout => grp_fu_351_p2);

    flow_control_loop_pipe_sequential_init_U : component torgb_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln24_fu_368_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_192 <= add_ln24_fu_374_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_192 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                add_ln36_3_reg_1187 <= add_ln36_3_fu_587_p2;
                add_ln36_3_reg_1187_pp0_iter4_reg <= add_ln36_3_reg_1187;
                add_ln36_5_reg_1194 <= add_ln36_5_fu_608_p2;
                add_ln36_reg_1204 <= add_ln36_fu_639_p2;
                add_ln37_1_reg_1235 <= add_ln37_1_fu_681_p2;
                add_ln38_reg_1246 <= add_ln38_fu_698_p2;
                b_reg_1320 <= b_fu_892_p3;
                g_reg_1310 <= g_fu_841_p3;
                mul_ln36_reg_1257 <= grp_fu_331_p2;
                mul_ln37_1_reg_1220 <= grp_fu_351_p2;
                mul_ln37_2_reg_1288 <= grp_fu_336_p2;
                mul_ln37_reg_1215 <= grp_fu_346_p2;
                mul_ln38_reg_1299 <= grp_fu_341_p2;
                p_u_data_1_reg_1087_pp0_iter2_reg <= p_u_data_1_reg_1087;
                p_u_data_1_reg_1087_pp0_iter3_reg <= p_u_data_1_reg_1087_pp0_iter2_reg;
                p_u_data_1_reg_1087_pp0_iter4_reg <= p_u_data_1_reg_1087_pp0_iter3_reg;
                p_u_dest_reg_1126_pp0_iter2_reg <= p_u_dest_reg_1126;
                p_u_dest_reg_1126_pp0_iter3_reg <= p_u_dest_reg_1126_pp0_iter2_reg;
                p_u_dest_reg_1126_pp0_iter4_reg <= p_u_dest_reg_1126_pp0_iter3_reg;
                p_u_dest_reg_1126_pp0_iter5_reg <= p_u_dest_reg_1126_pp0_iter4_reg;
                p_u_dest_reg_1126_pp0_iter6_reg <= p_u_dest_reg_1126_pp0_iter5_reg;
                p_u_dest_reg_1126_pp0_iter7_reg <= p_u_dest_reg_1126_pp0_iter6_reg;
                p_u_dest_reg_1126_pp0_iter8_reg <= p_u_dest_reg_1126_pp0_iter7_reg;
                p_u_id_reg_1121_pp0_iter2_reg <= p_u_id_reg_1121;
                p_u_id_reg_1121_pp0_iter3_reg <= p_u_id_reg_1121_pp0_iter2_reg;
                p_u_id_reg_1121_pp0_iter4_reg <= p_u_id_reg_1121_pp0_iter3_reg;
                p_u_id_reg_1121_pp0_iter5_reg <= p_u_id_reg_1121_pp0_iter4_reg;
                p_u_id_reg_1121_pp0_iter6_reg <= p_u_id_reg_1121_pp0_iter5_reg;
                p_u_id_reg_1121_pp0_iter7_reg <= p_u_id_reg_1121_pp0_iter6_reg;
                p_u_id_reg_1121_pp0_iter8_reg <= p_u_id_reg_1121_pp0_iter7_reg;
                p_u_keep_reg_1101_pp0_iter2_reg <= p_u_keep_reg_1101;
                p_u_keep_reg_1101_pp0_iter3_reg <= p_u_keep_reg_1101_pp0_iter2_reg;
                p_u_keep_reg_1101_pp0_iter4_reg <= p_u_keep_reg_1101_pp0_iter3_reg;
                p_u_keep_reg_1101_pp0_iter5_reg <= p_u_keep_reg_1101_pp0_iter4_reg;
                p_u_keep_reg_1101_pp0_iter6_reg <= p_u_keep_reg_1101_pp0_iter5_reg;
                p_u_keep_reg_1101_pp0_iter7_reg <= p_u_keep_reg_1101_pp0_iter6_reg;
                p_u_keep_reg_1101_pp0_iter8_reg <= p_u_keep_reg_1101_pp0_iter7_reg;
                p_u_last_reg_1116_pp0_iter2_reg <= p_u_last_reg_1116;
                p_u_last_reg_1116_pp0_iter3_reg <= p_u_last_reg_1116_pp0_iter2_reg;
                p_u_last_reg_1116_pp0_iter4_reg <= p_u_last_reg_1116_pp0_iter3_reg;
                p_u_last_reg_1116_pp0_iter5_reg <= p_u_last_reg_1116_pp0_iter4_reg;
                p_u_last_reg_1116_pp0_iter6_reg <= p_u_last_reg_1116_pp0_iter5_reg;
                p_u_last_reg_1116_pp0_iter7_reg <= p_u_last_reg_1116_pp0_iter6_reg;
                p_u_last_reg_1116_pp0_iter8_reg <= p_u_last_reg_1116_pp0_iter7_reg;
                p_u_strb_reg_1106_pp0_iter2_reg <= p_u_strb_reg_1106;
                p_u_strb_reg_1106_pp0_iter3_reg <= p_u_strb_reg_1106_pp0_iter2_reg;
                p_u_strb_reg_1106_pp0_iter4_reg <= p_u_strb_reg_1106_pp0_iter3_reg;
                p_u_strb_reg_1106_pp0_iter5_reg <= p_u_strb_reg_1106_pp0_iter4_reg;
                p_u_strb_reg_1106_pp0_iter6_reg <= p_u_strb_reg_1106_pp0_iter5_reg;
                p_u_strb_reg_1106_pp0_iter7_reg <= p_u_strb_reg_1106_pp0_iter6_reg;
                p_u_strb_reg_1106_pp0_iter8_reg <= p_u_strb_reg_1106_pp0_iter7_reg;
                p_u_user_reg_1111_pp0_iter2_reg <= p_u_user_reg_1111;
                p_u_user_reg_1111_pp0_iter3_reg <= p_u_user_reg_1111_pp0_iter2_reg;
                p_u_user_reg_1111_pp0_iter4_reg <= p_u_user_reg_1111_pp0_iter3_reg;
                p_u_user_reg_1111_pp0_iter5_reg <= p_u_user_reg_1111_pp0_iter4_reg;
                p_u_user_reg_1111_pp0_iter6_reg <= p_u_user_reg_1111_pp0_iter5_reg;
                p_u_user_reg_1111_pp0_iter7_reg <= p_u_user_reg_1111_pp0_iter6_reg;
                p_u_user_reg_1111_pp0_iter8_reg <= p_u_user_reg_1111_pp0_iter7_reg;
                p_v_data_1_reg_1131_pp0_iter2_reg <= p_v_data_1_reg_1131;
                p_v_data_1_reg_1131_pp0_iter3_reg <= p_v_data_1_reg_1131_pp0_iter2_reg;
                p_v_dest_reg_1167_pp0_iter2_reg <= p_v_dest_reg_1167;
                p_v_dest_reg_1167_pp0_iter3_reg <= p_v_dest_reg_1167_pp0_iter2_reg;
                p_v_dest_reg_1167_pp0_iter4_reg <= p_v_dest_reg_1167_pp0_iter3_reg;
                p_v_dest_reg_1167_pp0_iter5_reg <= p_v_dest_reg_1167_pp0_iter4_reg;
                p_v_dest_reg_1167_pp0_iter6_reg <= p_v_dest_reg_1167_pp0_iter5_reg;
                p_v_dest_reg_1167_pp0_iter7_reg <= p_v_dest_reg_1167_pp0_iter6_reg;
                p_v_dest_reg_1167_pp0_iter8_reg <= p_v_dest_reg_1167_pp0_iter7_reg;
                p_v_id_reg_1162_pp0_iter2_reg <= p_v_id_reg_1162;
                p_v_id_reg_1162_pp0_iter3_reg <= p_v_id_reg_1162_pp0_iter2_reg;
                p_v_id_reg_1162_pp0_iter4_reg <= p_v_id_reg_1162_pp0_iter3_reg;
                p_v_id_reg_1162_pp0_iter5_reg <= p_v_id_reg_1162_pp0_iter4_reg;
                p_v_id_reg_1162_pp0_iter6_reg <= p_v_id_reg_1162_pp0_iter5_reg;
                p_v_id_reg_1162_pp0_iter7_reg <= p_v_id_reg_1162_pp0_iter6_reg;
                p_v_id_reg_1162_pp0_iter8_reg <= p_v_id_reg_1162_pp0_iter7_reg;
                p_v_keep_reg_1142_pp0_iter2_reg <= p_v_keep_reg_1142;
                p_v_keep_reg_1142_pp0_iter3_reg <= p_v_keep_reg_1142_pp0_iter2_reg;
                p_v_keep_reg_1142_pp0_iter4_reg <= p_v_keep_reg_1142_pp0_iter3_reg;
                p_v_keep_reg_1142_pp0_iter5_reg <= p_v_keep_reg_1142_pp0_iter4_reg;
                p_v_keep_reg_1142_pp0_iter6_reg <= p_v_keep_reg_1142_pp0_iter5_reg;
                p_v_keep_reg_1142_pp0_iter7_reg <= p_v_keep_reg_1142_pp0_iter6_reg;
                p_v_keep_reg_1142_pp0_iter8_reg <= p_v_keep_reg_1142_pp0_iter7_reg;
                p_v_last_reg_1157_pp0_iter2_reg <= p_v_last_reg_1157;
                p_v_last_reg_1157_pp0_iter3_reg <= p_v_last_reg_1157_pp0_iter2_reg;
                p_v_last_reg_1157_pp0_iter4_reg <= p_v_last_reg_1157_pp0_iter3_reg;
                p_v_last_reg_1157_pp0_iter5_reg <= p_v_last_reg_1157_pp0_iter4_reg;
                p_v_last_reg_1157_pp0_iter6_reg <= p_v_last_reg_1157_pp0_iter5_reg;
                p_v_last_reg_1157_pp0_iter7_reg <= p_v_last_reg_1157_pp0_iter6_reg;
                p_v_last_reg_1157_pp0_iter8_reg <= p_v_last_reg_1157_pp0_iter7_reg;
                p_v_strb_reg_1147_pp0_iter2_reg <= p_v_strb_reg_1147;
                p_v_strb_reg_1147_pp0_iter3_reg <= p_v_strb_reg_1147_pp0_iter2_reg;
                p_v_strb_reg_1147_pp0_iter4_reg <= p_v_strb_reg_1147_pp0_iter3_reg;
                p_v_strb_reg_1147_pp0_iter5_reg <= p_v_strb_reg_1147_pp0_iter4_reg;
                p_v_strb_reg_1147_pp0_iter6_reg <= p_v_strb_reg_1147_pp0_iter5_reg;
                p_v_strb_reg_1147_pp0_iter7_reg <= p_v_strb_reg_1147_pp0_iter6_reg;
                p_v_strb_reg_1147_pp0_iter8_reg <= p_v_strb_reg_1147_pp0_iter7_reg;
                p_v_user_reg_1152_pp0_iter2_reg <= p_v_user_reg_1152;
                p_v_user_reg_1152_pp0_iter3_reg <= p_v_user_reg_1152_pp0_iter2_reg;
                p_v_user_reg_1152_pp0_iter4_reg <= p_v_user_reg_1152_pp0_iter3_reg;
                p_v_user_reg_1152_pp0_iter5_reg <= p_v_user_reg_1152_pp0_iter4_reg;
                p_v_user_reg_1152_pp0_iter6_reg <= p_v_user_reg_1152_pp0_iter5_reg;
                p_v_user_reg_1152_pp0_iter7_reg <= p_v_user_reg_1152_pp0_iter6_reg;
                p_v_user_reg_1152_pp0_iter8_reg <= p_v_user_reg_1152_pp0_iter7_reg;
                p_y_data_1_reg_1047_pp0_iter2_reg <= p_y_data_1_reg_1047;
                p_y_dest_reg_1082_pp0_iter2_reg <= p_y_dest_reg_1082;
                p_y_dest_reg_1082_pp0_iter3_reg <= p_y_dest_reg_1082_pp0_iter2_reg;
                p_y_dest_reg_1082_pp0_iter4_reg <= p_y_dest_reg_1082_pp0_iter3_reg;
                p_y_dest_reg_1082_pp0_iter5_reg <= p_y_dest_reg_1082_pp0_iter4_reg;
                p_y_dest_reg_1082_pp0_iter6_reg <= p_y_dest_reg_1082_pp0_iter5_reg;
                p_y_dest_reg_1082_pp0_iter7_reg <= p_y_dest_reg_1082_pp0_iter6_reg;
                p_y_dest_reg_1082_pp0_iter8_reg <= p_y_dest_reg_1082_pp0_iter7_reg;
                p_y_id_reg_1077_pp0_iter2_reg <= p_y_id_reg_1077;
                p_y_id_reg_1077_pp0_iter3_reg <= p_y_id_reg_1077_pp0_iter2_reg;
                p_y_id_reg_1077_pp0_iter4_reg <= p_y_id_reg_1077_pp0_iter3_reg;
                p_y_id_reg_1077_pp0_iter5_reg <= p_y_id_reg_1077_pp0_iter4_reg;
                p_y_id_reg_1077_pp0_iter6_reg <= p_y_id_reg_1077_pp0_iter5_reg;
                p_y_id_reg_1077_pp0_iter7_reg <= p_y_id_reg_1077_pp0_iter6_reg;
                p_y_id_reg_1077_pp0_iter8_reg <= p_y_id_reg_1077_pp0_iter7_reg;
                p_y_keep_reg_1057_pp0_iter2_reg <= p_y_keep_reg_1057;
                p_y_keep_reg_1057_pp0_iter3_reg <= p_y_keep_reg_1057_pp0_iter2_reg;
                p_y_keep_reg_1057_pp0_iter4_reg <= p_y_keep_reg_1057_pp0_iter3_reg;
                p_y_keep_reg_1057_pp0_iter5_reg <= p_y_keep_reg_1057_pp0_iter4_reg;
                p_y_keep_reg_1057_pp0_iter6_reg <= p_y_keep_reg_1057_pp0_iter5_reg;
                p_y_keep_reg_1057_pp0_iter7_reg <= p_y_keep_reg_1057_pp0_iter6_reg;
                p_y_keep_reg_1057_pp0_iter8_reg <= p_y_keep_reg_1057_pp0_iter7_reg;
                p_y_last_reg_1072_pp0_iter2_reg <= p_y_last_reg_1072;
                p_y_last_reg_1072_pp0_iter3_reg <= p_y_last_reg_1072_pp0_iter2_reg;
                p_y_last_reg_1072_pp0_iter4_reg <= p_y_last_reg_1072_pp0_iter3_reg;
                p_y_last_reg_1072_pp0_iter5_reg <= p_y_last_reg_1072_pp0_iter4_reg;
                p_y_last_reg_1072_pp0_iter6_reg <= p_y_last_reg_1072_pp0_iter5_reg;
                p_y_last_reg_1072_pp0_iter7_reg <= p_y_last_reg_1072_pp0_iter6_reg;
                p_y_last_reg_1072_pp0_iter8_reg <= p_y_last_reg_1072_pp0_iter7_reg;
                p_y_strb_reg_1062_pp0_iter2_reg <= p_y_strb_reg_1062;
                p_y_strb_reg_1062_pp0_iter3_reg <= p_y_strb_reg_1062_pp0_iter2_reg;
                p_y_strb_reg_1062_pp0_iter4_reg <= p_y_strb_reg_1062_pp0_iter3_reg;
                p_y_strb_reg_1062_pp0_iter5_reg <= p_y_strb_reg_1062_pp0_iter4_reg;
                p_y_strb_reg_1062_pp0_iter6_reg <= p_y_strb_reg_1062_pp0_iter5_reg;
                p_y_strb_reg_1062_pp0_iter7_reg <= p_y_strb_reg_1062_pp0_iter6_reg;
                p_y_strb_reg_1062_pp0_iter8_reg <= p_y_strb_reg_1062_pp0_iter7_reg;
                p_y_user_reg_1067_pp0_iter2_reg <= p_y_user_reg_1067;
                p_y_user_reg_1067_pp0_iter3_reg <= p_y_user_reg_1067_pp0_iter2_reg;
                p_y_user_reg_1067_pp0_iter4_reg <= p_y_user_reg_1067_pp0_iter3_reg;
                p_y_user_reg_1067_pp0_iter5_reg <= p_y_user_reg_1067_pp0_iter4_reg;
                p_y_user_reg_1067_pp0_iter6_reg <= p_y_user_reg_1067_pp0_iter5_reg;
                p_y_user_reg_1067_pp0_iter7_reg <= p_y_user_reg_1067_pp0_iter6_reg;
                p_y_user_reg_1067_pp0_iter8_reg <= p_y_user_reg_1067_pp0_iter7_reg;
                r_1_reg_1330 <= r_1_fu_934_p3;
                r_reg_1278 <= r_fu_770_p3;
                sub_ln36_3_reg_1172 <= sub_ln36_3_fu_501_p2;
                sub_ln36_5_reg_1177 <= sub_ln36_5_fu_528_p2;
                sub_ln38_3_reg_1182 <= sub_ln38_3_fu_566_p2;
                sub_ln38_4_reg_1199 <= sub_ln38_4_fu_629_p2;
                sub_ln38_5_reg_1225 <= sub_ln38_5_fu_667_p2;
                tmp_1_cast1_reg_1263 <= grp_fu_331_p2(64 downto 49);
                tmp_1_reg_1240 <= add_ln37_1_fu_681_p2(31 downto 31);
                tmp_1_reg_1240_pp0_iter6_reg <= tmp_1_reg_1240;
                tmp_1_reg_1240_pp0_iter7_reg <= tmp_1_reg_1240_pp0_iter6_reg;
                tmp_2_reg_1251 <= add_ln38_fu_698_p2(31 downto 31);
                tmp_2_reg_1251_pp0_iter6_reg <= tmp_2_reg_1251;
                tmp_2_reg_1251_pp0_iter7_reg <= tmp_2_reg_1251_pp0_iter6_reg;
                tmp_3_cast2_reg_1294 <= grp_fu_336_p2(64 downto 49);
                tmp_5_cast3_reg_1305 <= grp_fu_341_p2(64 downto 49);
                tmp_reg_1209 <= add_ln36_fu_639_p2(31 downto 31);
                tmp_reg_1209_pp0_iter5_reg <= tmp_reg_1209;
                tmp_reg_1209_pp0_iter6_reg <= tmp_reg_1209_pp0_iter5_reg;
                trunc_ln26_1_reg_1315 <= trunc_ln26_1_fu_847_p1;
                trunc_ln26_2_reg_1325 <= trunc_ln26_2_fu_898_p1;
                trunc_ln26_reg_1283 <= trunc_ln26_fu_776_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_u_data_1_reg_1087 <= ch_u_TDATA;
                p_u_dest_reg_1126 <= ch_u_TDEST;
                p_u_id_reg_1121 <= ch_u_TID;
                p_u_keep_reg_1101 <= ch_u_TKEEP;
                p_u_last_reg_1116 <= ch_u_TLAST;
                p_u_strb_reg_1106 <= ch_u_TSTRB;
                p_u_user_reg_1111 <= ch_u_TUSER;
                p_v_data_1_reg_1131 <= ch_v_TDATA;
                p_v_dest_reg_1167 <= ch_v_TDEST;
                p_v_id_reg_1162 <= ch_v_TID;
                p_v_keep_reg_1142 <= ch_v_TKEEP;
                p_v_last_reg_1157 <= ch_v_TLAST;
                p_v_strb_reg_1147 <= ch_v_TSTRB;
                p_v_user_reg_1152 <= ch_v_TUSER;
                p_y_data_1_reg_1047 <= ch_y_TDATA;
                p_y_dest_reg_1082 <= ch_y_TDEST;
                p_y_id_reg_1077 <= ch_y_TID;
                p_y_keep_reg_1057 <= ch_y_TKEEP;
                p_y_last_reg_1072 <= ch_y_TLAST;
                p_y_strb_reg_1062 <= ch_y_TSTRB;
                p_y_user_reg_1067 <= ch_y_TUSER;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln24_fu_374_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv31_1));
    add_ln36_1_fu_490_p2 <= std_logic_vector(unsigned(sub_ln36_2_fu_479_p2) + unsigned(shl_ln36_2_fu_485_p2));
    add_ln36_2_fu_577_p2 <= std_logic_vector(unsigned(sub_ln36_3_reg_1172) + unsigned(shl_ln36_4_fu_572_p2));
    add_ln36_3_fu_587_p2 <= std_logic_vector(unsigned(add_ln36_2_fu_577_p2) + unsigned(shl_ln36_5_fu_582_p2));
    add_ln36_4_fu_598_p2 <= std_logic_vector(unsigned(sub_ln36_5_reg_1177) + unsigned(shl_ln36_9_fu_593_p2));
    add_ln36_5_fu_608_p2 <= std_logic_vector(unsigned(add_ln36_4_fu_598_p2) + unsigned(shl_ln36_10_fu_603_p2));
    add_ln36_fu_639_p2 <= std_logic_vector(unsigned(sub_ln36_6_fu_635_p2) + unsigned(add_ln36_3_reg_1187));
    add_ln37_1_fu_681_p2 <= std_logic_vector(unsigned(add_ln37_fu_677_p2) + unsigned(mul_ln37_reg_1215));
    add_ln37_fu_677_p2 <= std_logic_vector(unsigned(add_ln36_3_reg_1187_pp0_iter4_reg) + unsigned(mul_ln37_1_reg_1220));
    add_ln38_1_fu_555_p2 <= std_logic_vector(unsigned(sub_ln38_2_fu_544_p2) + unsigned(shl_ln38_2_fu_550_p2));
    add_ln38_2_fu_619_p2 <= std_logic_vector(unsigned(sub_ln38_3_reg_1182) + unsigned(shl_ln38_4_fu_614_p2));
    add_ln38_3_fu_657_p2 <= std_logic_vector(unsigned(sub_ln38_4_reg_1199) + unsigned(shl_ln38_6_fu_652_p2));
    add_ln38_fu_698_p2 <= std_logic_vector(unsigned(sub_ln38_6_fu_694_p2) + unsigned(add_ln36_3_reg_1187_pp0_iter4_reg));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_state10_pp0_stage0_iter9_grp1)
    begin
                ap_block_pp0_stage0_01001_grp1 <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9_grp1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_state10_pp0_stage0_iter9_grp1)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9_grp1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1)));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_state10_pp0_stage0_iter9_grp1)
    begin
                ap_block_pp0_stage0_11001_grp1 <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9_grp1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1)));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_state10_pp0_stage0_iter9_grp1)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9_grp1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1)));
    end process;


    ap_block_state10_pp0_stage0_iter9_grp1_assign_proc : process(ch_r_TREADY, ch_g_TREADY, ch_b_TREADY)
    begin
                ap_block_state10_pp0_stage0_iter9_grp1 <= ((ch_b_TREADY = ap_const_logic_0) or (ch_g_TREADY = ap_const_logic_0) or (ch_r_TREADY = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_grp1_assign_proc : process(ch_y_TVALID, ch_u_TVALID, ch_v_TVALID)
    begin
                ap_block_state2_pp0_stage0_iter1_grp1 <= ((ch_v_TVALID = ap_const_logic_0) or (ch_u_TVALID = ap_const_logic_0) or (ch_y_TVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln24_fu_368_p2)
    begin
        if (((icmp_ln24_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, i_fu_192, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_192;
        end if; 
    end process;

    b_1_fu_1023_p3 <= 
        ap_const_lv8_FF when (icmp_ln42_1_fu_1017_p2(0) = '1') else 
        trunc_ln42_fu_1003_p1;
    b_fu_892_p3 <= 
        sub_ln38_1_fu_886_p2 when (tmp_2_reg_1251_pp0_iter7_reg(0) = '1') else 
        tmp_5_cast3_reg_1305;
    ch_b_TDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_1_fu_1023_p3),32));

    ch_b_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter9, ch_b_TREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            ch_b_TDATA_blk_n <= ch_b_TREADY;
        else 
            ch_b_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ch_b_TDEST <= p_v_dest_reg_1167_pp0_iter8_reg;
    ch_b_TID <= p_v_id_reg_1162_pp0_iter8_reg;
    ch_b_TKEEP <= p_v_keep_reg_1142_pp0_iter8_reg;
    ch_b_TLAST <= p_v_last_reg_1157_pp0_iter8_reg;
    ch_b_TSTRB <= p_v_strb_reg_1147_pp0_iter8_reg;
    ch_b_TUSER <= p_v_user_reg_1152_pp0_iter8_reg;

    ch_b_TVALID_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            ch_b_TVALID <= ap_const_logic_1;
        else 
            ch_b_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    ch_g_TDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_1_fu_978_p3),32));

    ch_g_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter9, ch_g_TREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            ch_g_TDATA_blk_n <= ch_g_TREADY;
        else 
            ch_g_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ch_g_TDEST <= p_u_dest_reg_1126_pp0_iter8_reg;
    ch_g_TID <= p_u_id_reg_1121_pp0_iter8_reg;
    ch_g_TKEEP <= p_u_keep_reg_1101_pp0_iter8_reg;
    ch_g_TLAST <= p_u_last_reg_1116_pp0_iter8_reg;
    ch_g_TSTRB <= p_u_strb_reg_1106_pp0_iter8_reg;
    ch_g_TUSER <= p_u_user_reg_1111_pp0_iter8_reg;

    ch_g_TVALID_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            ch_g_TVALID <= ap_const_logic_1;
        else 
            ch_g_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    ch_r_TDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_1_reg_1330),32));

    ch_r_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter9, ch_r_TREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            ch_r_TDATA_blk_n <= ch_r_TREADY;
        else 
            ch_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ch_r_TDEST <= p_y_dest_reg_1082_pp0_iter8_reg;
    ch_r_TID <= p_y_id_reg_1077_pp0_iter8_reg;
    ch_r_TKEEP <= p_y_keep_reg_1057_pp0_iter8_reg;
    ch_r_TLAST <= p_y_last_reg_1072_pp0_iter8_reg;
    ch_r_TSTRB <= p_y_strb_reg_1062_pp0_iter8_reg;
    ch_r_TUSER <= p_y_user_reg_1067_pp0_iter8_reg;

    ch_r_TVALID_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            ch_r_TVALID <= ap_const_logic_1;
        else 
            ch_r_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    ch_u_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ch_u_TVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_u_TDATA_blk_n <= ch_u_TVALID;
        else 
            ch_u_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ch_u_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_u_TREADY <= ap_const_logic_1;
        else 
            ch_u_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    ch_v_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ch_v_TVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_v_TDATA_blk_n <= ch_v_TVALID;
        else 
            ch_v_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ch_v_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_v_TREADY <= ap_const_logic_1;
        else 
            ch_v_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    ch_y_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ch_y_TVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_y_TDATA_blk_n <= ch_y_TVALID;
        else 
            ch_y_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ch_y_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_y_TREADY <= ap_const_logic_1;
        else 
            ch_y_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    g_1_fu_978_p3 <= 
        ap_const_lv8_FF when (icmp_ln41_1_fu_972_p2(0) = '1') else 
        trunc_ln41_fu_958_p1;
    g_fu_841_p3 <= 
        sub_ln37_1_fu_835_p2 when (tmp_1_reg_1240_pp0_iter7_reg(0) = '1') else 
        tmp_3_cast2_reg_1294;

    grp_fu_331_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_331_ce <= ap_const_logic_1;
        else 
            grp_fu_331_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_331_p1 <= ap_const_lv65_14F8B588F(34 - 1 downto 0);

    grp_fu_336_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_336_ce <= ap_const_logic_1;
        else 
            grp_fu_336_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_336_p1 <= ap_const_lv65_14F8B588F(34 - 1 downto 0);

    grp_fu_341_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_341_ce <= ap_const_logic_1;
        else 
            grp_fu_341_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_341_p1 <= ap_const_lv65_14F8B588F(34 - 1 downto 0);

    grp_fu_346_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_346_ce <= ap_const_logic_1;
        else 
            grp_fu_346_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_346_p1 <= ap_const_lv32_FFFF65D7(17 - 1 downto 0);

    grp_fu_351_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_351_ce <= ap_const_logic_1;
        else 
            grp_fu_351_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_351_p1 <= ap_const_lv32_FFFF1D34(17 - 1 downto 0);
    i_cast_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_load),32));
    icmp_ln24_fu_368_p2 <= "1" when (signed(i_cast_fu_364_p1) < signed(total)) else "0";
    icmp_ln40_1_fu_928_p2 <= "0" when (tmp_3_fu_918_p4 = ap_const_lv7_0) else "1";
    icmp_ln40_fu_902_p2 <= "1" when (signed(r_reg_1278) > signed(ap_const_lv16_0)) else "0";
    icmp_ln41_1_fu_972_p2 <= "0" when (tmp_4_fu_962_p4 = ap_const_lv7_0) else "1";
    icmp_ln41_fu_946_p2 <= "1" when (signed(g_reg_1310) > signed(ap_const_lv16_0)) else "0";
    icmp_ln42_1_fu_1017_p2 <= "0" when (tmp_5_fu_1007_p4 = ap_const_lv7_0) else "1";
    icmp_ln42_fu_991_p2 <= "1" when (signed(b_reg_1320) > signed(ap_const_lv16_0)) else "0";
    p_a_1_fu_907_p3 <= 
        trunc_ln26_reg_1283 when (icmp_ln40_fu_902_p2(0) = '1') else 
        ap_const_lv15_0;
    p_a_3_fu_951_p3 <= 
        trunc_ln26_1_reg_1315 when (icmp_ln41_fu_946_p2(0) = '1') else 
        ap_const_lv15_0;
    p_a_5_fu_996_p3 <= 
        trunc_ln26_2_reg_1325 when (icmp_ln42_fu_991_p2(0) = '1') else 
        ap_const_lv15_0;
    r_1_fu_934_p3 <= 
        ap_const_lv8_FF when (icmp_ln40_1_fu_928_p2(0) = '1') else 
        trunc_ln40_fu_914_p1;
    r_fu_770_p3 <= 
        sub_ln36_1_fu_764_p2 when (tmp_reg_1209_pp0_iter6_reg(0) = '1') else 
        tmp_1_cast1_reg_1263;
    select_ln36_fu_753_p3 <= 
        tmp_cast_fu_734_p4 when (tmp_reg_1209_pp0_iter6_reg(0) = '1') else 
        tmp_1_cast_fu_744_p4;
    select_ln37_fu_824_p3 <= 
        tmp_2_cast_fu_805_p4 when (tmp_1_reg_1240_pp0_iter7_reg(0) = '1') else 
        tmp_3_cast_fu_815_p4;
    select_ln38_fu_875_p3 <= 
        tmp_4_cast_fu_856_p4 when (tmp_2_reg_1251_pp0_iter7_reg(0) = '1') else 
        tmp_5_cast_fu_866_p4;
    shl_ln36_10_fu_603_p2 <= std_logic_vector(shift_left(unsigned(p_v_data_1_reg_1131_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    shl_ln36_1_fu_474_p2 <= std_logic_vector(shift_left(unsigned(p_y_data_1_reg_1047),to_integer(unsigned('0' & ap_const_lv32_F(31-1 downto 0)))));
    shl_ln36_2_fu_485_p2 <= std_logic_vector(shift_left(unsigned(p_y_data_1_reg_1047),to_integer(unsigned('0' & ap_const_lv32_B(31-1 downto 0)))));
    shl_ln36_3_fu_496_p2 <= std_logic_vector(shift_left(unsigned(p_y_data_1_reg_1047),to_integer(unsigned('0' & ap_const_lv32_9(31-1 downto 0)))));
    shl_ln36_4_fu_572_p2 <= std_logic_vector(shift_left(unsigned(p_y_data_1_reg_1047_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_7(31-1 downto 0)))));
    shl_ln36_5_fu_582_p2 <= std_logic_vector(shift_left(unsigned(p_y_data_1_reg_1047_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    shl_ln36_6_fu_507_p2 <= std_logic_vector(shift_left(unsigned(p_v_data_1_reg_1131),to_integer(unsigned('0' & ap_const_lv32_11(31-1 downto 0)))));
    shl_ln36_7_fu_512_p2 <= std_logic_vector(shift_left(unsigned(p_v_data_1_reg_1131),to_integer(unsigned('0' & ap_const_lv32_E(31-1 downto 0)))));
    shl_ln36_8_fu_523_p2 <= std_logic_vector(shift_left(unsigned(p_v_data_1_reg_1131),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    shl_ln36_9_fu_593_p2 <= std_logic_vector(shift_left(unsigned(p_v_data_1_reg_1131_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln36_fu_469_p2 <= std_logic_vector(shift_left(unsigned(p_y_data_1_reg_1047),to_integer(unsigned('0' & ap_const_lv32_11(31-1 downto 0)))));
    shl_ln38_1_fu_539_p2 <= std_logic_vector(shift_left(unsigned(p_u_data_1_reg_1087),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    shl_ln38_2_fu_550_p2 <= std_logic_vector(shift_left(unsigned(p_u_data_1_reg_1087),to_integer(unsigned('0' & ap_const_lv32_D(31-1 downto 0)))));
    shl_ln38_3_fu_561_p2 <= std_logic_vector(shift_left(unsigned(p_u_data_1_reg_1087),to_integer(unsigned('0' & ap_const_lv32_B(31-1 downto 0)))));
    shl_ln38_4_fu_614_p2 <= std_logic_vector(shift_left(unsigned(p_u_data_1_reg_1087_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_9(31-1 downto 0)))));
    shl_ln38_5_fu_624_p2 <= std_logic_vector(shift_left(unsigned(p_u_data_1_reg_1087_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    shl_ln38_6_fu_652_p2 <= std_logic_vector(shift_left(unsigned(p_u_data_1_reg_1087_pp0_iter3_reg),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln38_7_fu_662_p2 <= std_logic_vector(shift_left(unsigned(p_u_data_1_reg_1087_pp0_iter3_reg),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln38_fu_534_p2 <= std_logic_vector(shift_left(unsigned(p_u_data_1_reg_1087),to_integer(unsigned('0' & ap_const_lv32_12(31-1 downto 0)))));
    sub_ln36_1_fu_764_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln36_fu_760_p1));
    sub_ln36_2_fu_479_p2 <= std_logic_vector(unsigned(shl_ln36_fu_469_p2) - unsigned(shl_ln36_1_fu_474_p2));
    sub_ln36_3_fu_501_p2 <= std_logic_vector(unsigned(add_ln36_1_fu_490_p2) - unsigned(shl_ln36_3_fu_496_p2));
    sub_ln36_4_fu_517_p2 <= std_logic_vector(unsigned(shl_ln36_6_fu_507_p2) - unsigned(shl_ln36_7_fu_512_p2));
    sub_ln36_5_fu_528_p2 <= std_logic_vector(unsigned(sub_ln36_4_fu_517_p2) - unsigned(shl_ln36_8_fu_523_p2));
    sub_ln36_6_fu_635_p2 <= std_logic_vector(unsigned(add_ln36_5_reg_1194) - unsigned(p_v_data_1_reg_1131_pp0_iter3_reg));
    sub_ln36_fu_729_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln36_reg_1257));
    sub_ln37_1_fu_835_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln37_fu_831_p1));
    sub_ln37_fu_800_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln37_2_reg_1288));
    sub_ln38_1_fu_886_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln38_fu_882_p1));
    sub_ln38_2_fu_544_p2 <= std_logic_vector(unsigned(shl_ln38_fu_534_p2) - unsigned(shl_ln38_1_fu_539_p2));
    sub_ln38_3_fu_566_p2 <= std_logic_vector(unsigned(add_ln38_1_fu_555_p2) - unsigned(shl_ln38_3_fu_561_p2));
    sub_ln38_4_fu_629_p2 <= std_logic_vector(unsigned(add_ln38_2_fu_619_p2) - unsigned(shl_ln38_5_fu_624_p2));
    sub_ln38_5_fu_667_p2 <= std_logic_vector(unsigned(add_ln38_3_fu_657_p2) - unsigned(shl_ln38_7_fu_662_p2));
    sub_ln38_6_fu_694_p2 <= std_logic_vector(unsigned(sub_ln38_5_reg_1225) - unsigned(p_u_data_1_reg_1087_pp0_iter4_reg));
    sub_ln38_fu_851_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln38_reg_1299));
    tmp_1_cast_fu_744_p4 <= mul_ln36_reg_1257(63 downto 49);
    tmp_2_cast_fu_805_p4 <= sub_ln37_fu_800_p2(63 downto 49);
    tmp_3_cast_fu_815_p4 <= mul_ln37_2_reg_1288(63 downto 49);
    tmp_3_fu_918_p4 <= p_a_1_fu_907_p3(14 downto 8);
    tmp_4_cast_fu_856_p4 <= sub_ln38_fu_851_p2(63 downto 49);
    tmp_4_fu_962_p4 <= p_a_3_fu_951_p3(14 downto 8);
    tmp_5_cast_fu_866_p4 <= mul_ln38_reg_1299(63 downto 49);
    tmp_5_fu_1007_p4 <= p_a_5_fu_996_p3(14 downto 8);
    tmp_cast_fu_734_p4 <= sub_ln36_fu_729_p2(63 downto 49);
    trunc_ln26_1_fu_847_p1 <= g_fu_841_p3(15 - 1 downto 0);
    trunc_ln26_2_fu_898_p1 <= b_fu_892_p3(15 - 1 downto 0);
    trunc_ln26_fu_776_p1 <= r_fu_770_p3(15 - 1 downto 0);
    trunc_ln40_fu_914_p1 <= p_a_1_fu_907_p3(8 - 1 downto 0);
    trunc_ln41_fu_958_p1 <= p_a_3_fu_951_p3(8 - 1 downto 0);
    trunc_ln42_fu_1003_p1 <= p_a_5_fu_996_p3(8 - 1 downto 0);
    zext_ln36_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_fu_753_p3),16));
    zext_ln37_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_fu_824_p3),16));
    zext_ln38_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_fu_875_p3),16));
end behav;
