// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc700 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_local_V_data_0_V_din,
        in_local_V_data_0_V_full_n,
        in_local_V_data_0_V_write,
        in_local_V_data_1_V_din,
        in_local_V_data_1_V_full_n,
        in_local_V_data_1_V_write,
        in_local_V_data_2_V_din,
        in_local_V_data_2_V_full_n,
        in_local_V_data_2_V_write,
        in_r_TLAST,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TDATA,
        is_last_0_i_out_out_din,
        is_last_0_i_out_out_full_n,
        is_last_0_i_out_out_write
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [3:0] in_local_V_data_0_V_din;
input   in_local_V_data_0_V_full_n;
output   in_local_V_data_0_V_write;
output  [3:0] in_local_V_data_1_V_din;
input   in_local_V_data_1_V_full_n;
output   in_local_V_data_1_V_write;
output  [3:0] in_local_V_data_2_V_din;
input   in_local_V_data_2_V_full_n;
output   in_local_V_data_2_V_write;
input  [0:0] in_r_TLAST;
input   in_r_TVALID;
output   in_r_TREADY;
input  [31:0] in_r_TDATA;
output  [0:0] is_last_0_i_out_out_din;
input   is_last_0_i_out_out_full_n;
output   is_last_0_i_out_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_local_V_data_0_V_write;
reg in_local_V_data_1_V_write;
reg in_local_V_data_2_V_write;
reg in_r_TREADY;
reg is_last_0_i_out_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_local_V_data_0_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln20_fu_210_p2;
reg    in_local_V_data_1_V_blk_n;
reg    in_local_V_data_2_V_blk_n;
reg    in_r_TDATA_blk_n;
reg    is_last_0_i_out_out_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln17_fu_198_p2;
wire   [12:0] i_fu_204_p2;
reg   [12:0] i_reg_692;
reg    ap_block_state2;
wire   [1:0] j_fu_216_p2;
reg   [1:0] j_reg_700;
wire    io_acc_block_signal_op46;
reg    ap_block_state3;
reg   [31:0] in_data_tmp_reg_705;
wire   [62:0] trunc_ln556_fu_273_p1;
reg   [62:0] trunc_ln556_reg_711;
wire    ap_CS_fsm_state5;
reg   [0:0] p_Result_s_reg_716;
reg   [10:0] exp_tmp_V_reg_721;
wire   [51:0] trunc_ln565_fu_295_p1;
reg   [51:0] trunc_ln565_reg_726;
wire   [53:0] man_V_2_fu_319_p3;
reg   [53:0] man_V_2_reg_731;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln571_fu_326_p2;
reg   [0:0] icmp_ln571_reg_736;
wire   [0:0] icmp_ln581_fu_337_p2;
reg   [0:0] icmp_ln581_reg_742;
wire  signed [11:0] sh_amt_fu_355_p3;
reg  signed [11:0] sh_amt_reg_748;
wire   [0:0] icmp_ln582_fu_363_p2;
reg   [0:0] icmp_ln582_reg_755;
wire   [3:0] trunc_ln583_fu_369_p1;
reg   [3:0] trunc_ln583_reg_761;
reg   [9:0] tmp_reg_767;
wire    ap_CS_fsm_state7;
wire   [0:0] and_ln585_fu_445_p2;
reg   [0:0] and_ln585_reg_777;
wire   [0:0] and_ln603_fu_468_p2;
reg   [0:0] and_ln603_reg_782;
wire   [0:0] or_ln603_fu_474_p2;
reg   [0:0] or_ln603_reg_787;
wire   [3:0] select_ln603_1_fu_480_p3;
reg   [3:0] select_ln603_1_reg_793;
wire   [53:0] grp_fu_400_p2;
reg   [53:0] ashr_ln586_reg_798;
wire    ap_CS_fsm_state8;
wire   [0:0] or_ln603_2_fu_502_p2;
reg   [0:0] or_ln603_2_reg_803;
wire   [3:0] select_ln603_2_fu_529_p3;
reg   [3:0] select_ln603_2_reg_808;
wire    ap_CS_fsm_state9;
wire   [3:0] shl_ln_fu_535_p3;
reg   [3:0] shl_ln_reg_813;
wire   [3:0] empty_486_fu_543_p2;
reg   [3:0] empty_486_reg_819;
wire   [0:0] icmp_ln203_fu_549_p2;
reg   [0:0] icmp_ln203_reg_824;
wire   [3:0] sub_ln203_fu_555_p2;
reg   [3:0] sub_ln203_reg_831;
wire   [3:0] sub_ln203_1_fu_569_p2;
reg   [3:0] sub_ln203_1_reg_836;
reg   [12:0] i_0_i_i_reg_160;
reg    ap_block_state1;
reg   [1:0] j_0_i_i_reg_171;
wire    ap_CS_fsm_state10;
reg   [0:0] is_last_1_fu_124;
wire   [0:0] is_last_fu_231_p2;
reg   [11:0] ctype_data_V_fu_128;
wire   [11:0] ctype_data_V_1_fu_665_p2;
wire   [63:0] grp_fu_183_p1;
wire   [63:0] ireg_V_fu_269_p1;
wire   [52:0] tmp_4313_i_fu_302_p3;
wire   [53:0] p_Result_9_fu_309_p1;
wire   [53:0] man_V_1_fu_313_p2;
wire   [11:0] zext_ln461_fu_299_p1;
wire   [11:0] F2_fu_331_p2;
wire   [11:0] add_ln581_fu_343_p2;
wire   [11:0] sub_ln581_fu_349_p2;
wire  signed [31:0] sext_ln581_fu_383_p1;
wire   [53:0] grp_fu_400_p1;
wire   [31:0] bitcast_ln696_fu_405_p1;
wire   [0:0] tmp_10_fu_408_p3;
wire   [0:0] or_ln582_fu_424_p2;
wire   [0:0] xor_ln582_fu_428_p2;
wire   [0:0] icmp_ln585_fu_386_p2;
wire   [0:0] and_ln581_fu_434_p2;
wire   [0:0] xor_ln585_fu_439_p2;
wire   [0:0] or_ln581_fu_457_p2;
wire   [0:0] icmp_ln603_fu_391_p2;
wire   [0:0] xor_ln581_fu_462_p2;
wire   [0:0] and_ln585_1_fu_451_p2;
wire   [3:0] select_ln588_fu_416_p3;
wire   [0:0] xor_ln571_fu_487_p2;
wire   [0:0] and_ln582_fu_492_p2;
wire   [0:0] or_ln603_1_fu_497_p2;
wire   [6:0] trunc_ln581_fu_507_p1;
wire   [3:0] trunc_ln581cast_fu_513_p1;
wire   [3:0] shl_ln604_fu_517_p2;
wire   [3:0] trunc_ln586_fu_510_p1;
wire   [3:0] select_ln603_fu_522_p3;
wire   [3:0] select_ln203_fu_561_p3;
wire   [3:0] select_ln603_3_fu_575_p3;
wire   [3:0] select_ln203_2_fu_590_p3;
wire   [3:0] select_ln203_1_fu_585_p3;
wire   [11:0] zext_ln203_fu_581_p1;
wire   [11:0] zext_ln203_1_fu_595_p1;
wire   [11:0] shl_ln203_fu_606_p2;
reg   [11:0] tmp_11_fu_612_p4;
wire   [11:0] zext_ln203_2_fu_599_p1;
wire   [11:0] zext_ln203_3_fu_603_p1;
wire   [11:0] shl_ln203_1_fu_629_p2;
wire   [11:0] lshr_ln203_fu_635_p2;
wire   [11:0] and_ln203_fu_641_p2;
wire   [11:0] xor_ln203_fu_647_p2;
wire   [11:0] select_ln203_3_fu_622_p3;
wire   [11:0] and_ln203_1_fu_653_p2;
wire   [11:0] and_ln203_2_fu_659_p2;
reg    grp_fu_183_ce;
wire    ap_CS_fsm_state4;
reg   [9:0] ap_NS_fsm;
wire    regslice_both_in_last_V_U_apdone_blk;
wire   [0:0] in_r_TLAST_int;
wire    in_r_TVALID_int;
reg    in_r_TREADY_int;
wire    regslice_both_in_last_V_U_ack_in;
wire    regslice_both_in_data_U_apdone_blk;
wire   [31:0] in_r_TDATA_int;
wire    regslice_both_in_data_U_vld_out;
wire    regslice_both_in_data_U_ack_in;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
end

myproject_axi_fpext_32ns_64_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
myproject_axi_fpext_32ns_64_3_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_r_TDATA_int),
    .ce(grp_fu_183_ce),
    .dout(grp_fu_183_p1)
);

myproject_axi_ashr_54ns_32ns_54_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 2 ),
    .din0_WIDTH( 54 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 54 ))
myproject_axi_ashr_54ns_32ns_54_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(man_V_2_reg_731),
    .din1(grp_fu_400_p1),
    .ce(1'b1),
    .dout(grp_fu_400_p2)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_r_TLAST),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_last_V_U_ack_in),
    .data_out(in_r_TLAST_int),
    .vld_out(in_r_TVALID_int),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_r_TDATA),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_data_U_ack_in),
    .data_out(in_r_TDATA_int),
    .vld_out(regslice_both_in_data_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_data_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln17_fu_198_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) & (icmp_ln17_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln20_fu_210_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) | ((icmp_ln20_fu_210_p2 == 1'd1) & (io_acc_block_signal_op46 == 1'b0))) & (icmp_ln20_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_i_i_reg_160 <= i_reg_692;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_reg_160 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln20_fu_210_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) | ((icmp_ln20_fu_210_p2 == 1'd1) & (io_acc_block_signal_op46 == 1'b0))) & (icmp_ln20_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        is_last_1_fu_124 <= is_last_fu_231_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        is_last_1_fu_124 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_0_i_i_reg_171 <= j_reg_700;
    end else if ((~((icmp_ln17_fu_198_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) & (icmp_ln17_fu_198_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_i_i_reg_171 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        and_ln585_reg_777 <= and_ln585_fu_445_p2;
        and_ln603_reg_782 <= and_ln603_fu_468_p2;
        or_ln603_reg_787 <= or_ln603_fu_474_p2;
        select_ln603_1_reg_793 <= select_ln603_1_fu_480_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ashr_ln586_reg_798 <= grp_fu_400_p2;
        or_ln603_2_reg_803 <= or_ln603_2_fu_502_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ctype_data_V_fu_128 <= ctype_data_V_1_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        empty_486_reg_819[3 : 2] <= empty_486_fu_543_p2[3 : 2];
        icmp_ln203_reg_824 <= icmp_ln203_fu_549_p2;
        shl_ln_reg_813[3 : 2] <= shl_ln_fu_535_p3[3 : 2];
        sub_ln203_1_reg_836 <= sub_ln203_1_fu_569_p2;
        sub_ln203_reg_831[3 : 2] <= sub_ln203_fu_555_p2[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        exp_tmp_V_reg_721 <= {{ireg_V_fu_269_p1[62:52]}};
        p_Result_s_reg_716 <= ireg_V_fu_269_p1[32'd63];
        trunc_ln556_reg_711 <= trunc_ln556_fu_273_p1;
        trunc_ln565_reg_726 <= trunc_ln565_fu_295_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln17_fu_198_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_692 <= i_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln571_reg_736 <= icmp_ln571_fu_326_p2;
        icmp_ln581_reg_742 <= icmp_ln581_fu_337_p2;
        icmp_ln582_reg_755 <= icmp_ln582_fu_363_p2;
        man_V_2_reg_731 <= man_V_2_fu_319_p3;
        sh_amt_reg_748 <= sh_amt_fu_355_p3;
        tmp_reg_767 <= {{sh_amt_fu_355_p3[11:2]}};
        trunc_ln583_reg_761 <= trunc_ln583_fu_369_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln20_fu_210_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) | ((icmp_ln20_fu_210_p2 == 1'd1) & (io_acc_block_signal_op46 == 1'b0))) & (icmp_ln20_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_data_tmp_reg_705 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln20_fu_210_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) | ((icmp_ln20_fu_210_p2 == 1'd1) & (io_acc_block_signal_op46 == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_700 <= j_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln603_2_reg_803 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        select_ln603_2_reg_808 <= select_ln603_2_fu_529_p3;
    end
end

always @ (*) begin
    if ((~((icmp_ln17_fu_198_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) & (icmp_ln17_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (~(((icmp_ln20_fu_210_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) | ((icmp_ln20_fu_210_p2 == 1'd1) & (io_acc_block_signal_op46 == 1'b0))) & (1'b1 == ap_CS_fsm_state3)))) begin
        grp_fu_183_ce = 1'b1;
    end else begin
        grp_fu_183_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        in_local_V_data_0_V_blk_n = in_local_V_data_0_V_full_n;
    end else begin
        in_local_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln20_fu_210_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) | ((icmp_ln20_fu_210_p2 == 1'd1) & (io_acc_block_signal_op46 == 1'b0))) & (icmp_ln20_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        in_local_V_data_0_V_write = 1'b1;
    end else begin
        in_local_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        in_local_V_data_1_V_blk_n = in_local_V_data_1_V_full_n;
    end else begin
        in_local_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln20_fu_210_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) | ((icmp_ln20_fu_210_p2 == 1'd1) & (io_acc_block_signal_op46 == 1'b0))) & (icmp_ln20_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        in_local_V_data_1_V_write = 1'b1;
    end else begin
        in_local_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        in_local_V_data_2_V_blk_n = in_local_V_data_2_V_full_n;
    end else begin
        in_local_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln20_fu_210_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) | ((icmp_ln20_fu_210_p2 == 1'd1) & (io_acc_block_signal_op46 == 1'b0))) & (icmp_ln20_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        in_local_V_data_2_V_write = 1'b1;
    end else begin
        in_local_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_r_TDATA_blk_n = in_r_TVALID_int;
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in_r_TVALID == 1'b1) & (regslice_both_in_last_V_U_ack_in == 1'b1))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln20_fu_210_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) | ((icmp_ln20_fu_210_p2 == 1'd1) & (io_acc_block_signal_op46 == 1'b0))) & (icmp_ln20_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_r_TREADY_int = 1'b1;
    end else begin
        in_r_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln17_fu_198_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) & (icmp_ln17_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        is_last_0_i_out_out_blk_n = is_last_0_i_out_out_full_n;
    end else begin
        is_last_0_i_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln17_fu_198_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) & (icmp_ln17_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        is_last_0_i_out_out_write = 1'b1;
    end else begin
        is_last_0_i_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln17_fu_198_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) & (icmp_ln17_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln17_fu_198_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) & (icmp_ln17_fu_198_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((icmp_ln20_fu_210_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) | ((icmp_ln20_fu_210_p2 == 1'd1) & (io_acc_block_signal_op46 == 1'b0))) & (icmp_ln20_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((icmp_ln20_fu_210_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) | ((icmp_ln20_fu_210_p2 == 1'd1) & (io_acc_block_signal_op46 == 1'b0))) & (icmp_ln20_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_331_p2 = (12'd1075 - zext_ln461_fu_299_p1);

assign add_ln581_fu_343_p2 = ($signed(12'd4094) + $signed(F2_fu_331_p2));

assign and_ln203_1_fu_653_p2 = (xor_ln203_fu_647_p2 & ctype_data_V_fu_128);

assign and_ln203_2_fu_659_p2 = (select_ln203_3_fu_622_p3 & and_ln203_fu_641_p2);

assign and_ln203_fu_641_p2 = (shl_ln203_1_fu_629_p2 & lshr_ln203_fu_635_p2);

assign and_ln581_fu_434_p2 = (xor_ln582_fu_428_p2 & icmp_ln581_reg_742);

assign and_ln582_fu_492_p2 = (xor_ln571_fu_487_p2 & icmp_ln582_reg_755);

assign and_ln585_1_fu_451_p2 = (icmp_ln585_fu_386_p2 & and_ln581_fu_434_p2);

assign and_ln585_fu_445_p2 = (xor_ln585_fu_439_p2 & and_ln581_fu_434_p2);

assign and_ln603_fu_468_p2 = (xor_ln581_fu_462_p2 & icmp_ln603_fu_391_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln17_fu_198_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = (((icmp_ln20_fu_210_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) | ((icmp_ln20_fu_210_p2 == 1'd1) & (io_acc_block_signal_op46 == 1'b0)));
end

assign ap_ready = internal_ap_ready;

assign bitcast_ln696_fu_405_p1 = in_data_tmp_reg_705;

assign ctype_data_V_1_fu_665_p2 = (and_ln203_2_fu_659_p2 | and_ln203_1_fu_653_p2);

assign empty_486_fu_543_p2 = (shl_ln_fu_535_p3 | 4'd3);

assign grp_fu_400_p1 = $unsigned(sext_ln581_fu_383_p1);

assign i_fu_204_p2 = (i_0_i_i_reg_160 + 13'd1);

assign icmp_ln17_fu_198_p2 = ((i_0_i_i_reg_160 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_549_p2 = ((shl_ln_fu_535_p3 > empty_486_fu_543_p2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_210_p2 = ((j_0_i_i_reg_171 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_326_p2 = ((trunc_ln556_reg_711 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_337_p2 = (($signed(F2_fu_331_p2) > $signed(12'd2)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_363_p2 = ((F2_fu_331_p2 == 12'd2) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_386_p2 = ((sh_amt_reg_748 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_391_p2 = ((tmp_reg_767 == 10'd0) ? 1'b1 : 1'b0);

assign in_local_V_data_0_V_din = ctype_data_V_fu_128[3:0];

assign in_local_V_data_1_V_din = {{ctype_data_V_fu_128[7:4]}};

assign in_local_V_data_2_V_din = {{ctype_data_V_fu_128[11:8]}};

assign io_acc_block_signal_op46 = (in_local_V_data_2_V_full_n & in_local_V_data_1_V_full_n & in_local_V_data_0_V_full_n);

assign ireg_V_fu_269_p1 = grp_fu_183_p1;

assign is_last_0_i_out_out_din = is_last_1_fu_124;

assign is_last_fu_231_p2 = (is_last_1_fu_124 | in_r_TLAST_int);

assign j_fu_216_p2 = (j_0_i_i_reg_171 + 2'd1);

assign lshr_ln203_fu_635_p2 = 12'd4095 >> zext_ln203_3_fu_603_p1;

assign man_V_1_fu_313_p2 = (54'd0 - p_Result_9_fu_309_p1);

assign man_V_2_fu_319_p3 = ((p_Result_s_reg_716[0:0] === 1'b1) ? man_V_1_fu_313_p2 : p_Result_9_fu_309_p1);

assign or_ln581_fu_457_p2 = (or_ln582_fu_424_p2 | icmp_ln581_reg_742);

assign or_ln582_fu_424_p2 = (icmp_ln582_reg_755 | icmp_ln571_reg_736);

assign or_ln603_1_fu_497_p2 = (and_ln585_reg_777 | and_ln582_fu_492_p2);

assign or_ln603_2_fu_502_p2 = (or_ln603_reg_787 | or_ln603_1_fu_497_p2);

assign or_ln603_fu_474_p2 = (and_ln603_fu_468_p2 | and_ln585_1_fu_451_p2);

assign p_Result_9_fu_309_p1 = tmp_4313_i_fu_302_p3;

assign select_ln203_1_fu_585_p3 = ((icmp_ln203_reg_824[0:0] === 1'b1) ? empty_486_reg_819 : shl_ln_reg_813);

assign select_ln203_2_fu_590_p3 = ((icmp_ln203_reg_824[0:0] === 1'b1) ? sub_ln203_reg_831 : shl_ln_reg_813);

assign select_ln203_3_fu_622_p3 = ((icmp_ln203_reg_824[0:0] === 1'b1) ? tmp_11_fu_612_p4 : shl_ln203_fu_606_p2);

assign select_ln203_fu_561_p3 = ((icmp_ln203_fu_549_p2[0:0] === 1'b1) ? shl_ln_fu_535_p3 : empty_486_fu_543_p2);

assign select_ln588_fu_416_p3 = ((tmp_10_fu_408_p3[0:0] === 1'b1) ? 4'd15 : 4'd0);

assign select_ln603_1_fu_480_p3 = ((and_ln585_fu_445_p2[0:0] === 1'b1) ? select_ln588_fu_416_p3 : trunc_ln583_reg_761);

assign select_ln603_2_fu_529_p3 = ((or_ln603_reg_787[0:0] === 1'b1) ? select_ln603_fu_522_p3 : select_ln603_1_reg_793);

assign select_ln603_3_fu_575_p3 = ((or_ln603_2_reg_803[0:0] === 1'b1) ? select_ln603_2_reg_808 : 4'd0);

assign select_ln603_fu_522_p3 = ((and_ln603_reg_782[0:0] === 1'b1) ? shl_ln604_fu_517_p2 : trunc_ln586_fu_510_p1);

assign sext_ln581_fu_383_p1 = sh_amt_reg_748;

assign sh_amt_fu_355_p3 = ((icmp_ln581_fu_337_p2[0:0] === 1'b1) ? add_ln581_fu_343_p2 : sub_ln581_fu_349_p2);

assign shl_ln203_1_fu_629_p2 = 12'd4095 << zext_ln203_2_fu_599_p1;

assign shl_ln203_fu_606_p2 = zext_ln203_fu_581_p1 << zext_ln203_1_fu_595_p1;

assign shl_ln604_fu_517_p2 = trunc_ln583_reg_761 << trunc_ln581cast_fu_513_p1;

assign shl_ln_fu_535_p3 = {{j_0_i_i_reg_171}, {2'd0}};

assign start_out = real_start;

assign sub_ln203_1_fu_569_p2 = ($signed(4'd11) - $signed(select_ln203_fu_561_p3));

assign sub_ln203_fu_555_p2 = ($signed(4'd11) - $signed(shl_ln_fu_535_p3));

assign sub_ln581_fu_349_p2 = (12'd2 - F2_fu_331_p2);

assign tmp_10_fu_408_p3 = bitcast_ln696_fu_405_p1[32'd31];

integer ap_tvar_int_0;

always @ (shl_ln203_fu_606_p2) begin
    for (ap_tvar_int_0 = 12 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 11 - 0) begin
            tmp_11_fu_612_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_11_fu_612_p4[ap_tvar_int_0] = shl_ln203_fu_606_p2[11 - ap_tvar_int_0];
        end
    end
end

assign tmp_4313_i_fu_302_p3 = {{1'd1}, {trunc_ln565_reg_726}};

assign trunc_ln556_fu_273_p1 = ireg_V_fu_269_p1[62:0];

assign trunc_ln565_fu_295_p1 = ireg_V_fu_269_p1[51:0];

assign trunc_ln581_fu_507_p1 = sh_amt_reg_748[6:0];

assign trunc_ln581cast_fu_513_p1 = trunc_ln581_fu_507_p1[3:0];

assign trunc_ln583_fu_369_p1 = man_V_2_fu_319_p3[3:0];

assign trunc_ln586_fu_510_p1 = ashr_ln586_reg_798[3:0];

assign xor_ln203_fu_647_p2 = (12'd4095 ^ and_ln203_fu_641_p2);

assign xor_ln571_fu_487_p2 = (icmp_ln571_reg_736 ^ 1'd1);

assign xor_ln581_fu_462_p2 = (or_ln581_fu_457_p2 ^ 1'd1);

assign xor_ln582_fu_428_p2 = (or_ln582_fu_424_p2 ^ 1'd1);

assign xor_ln585_fu_439_p2 = (icmp_ln585_fu_386_p2 ^ 1'd1);

assign zext_ln203_1_fu_595_p1 = select_ln203_2_fu_590_p3;

assign zext_ln203_2_fu_599_p1 = select_ln203_1_fu_585_p3;

assign zext_ln203_3_fu_603_p1 = sub_ln203_1_reg_836;

assign zext_ln203_fu_581_p1 = select_ln603_3_fu_575_p3;

assign zext_ln461_fu_299_p1 = exp_tmp_V_reg_721;

always @ (posedge ap_clk) begin
    shl_ln_reg_813[1:0] <= 2'b00;
    empty_486_reg_819[1:0] <= 2'b11;
    sub_ln203_reg_831[1:0] <= 2'b11;
end

endmodule //Loop_1_proc700
