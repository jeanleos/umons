-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    data_V_data_4_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_4_V_empty_n : IN STD_LOGIC;
    data_V_data_4_V_read : OUT STD_LOGIC;
    data_V_data_5_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_5_V_empty_n : IN STD_LOGIC;
    data_V_data_5_V_read : OUT STD_LOGIC;
    data_V_data_6_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_6_V_empty_n : IN STD_LOGIC;
    data_V_data_6_V_read : OUT STD_LOGIC;
    data_V_data_7_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_7_V_empty_n : IN STD_LOGIC;
    data_V_data_7_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC;
    res_V_data_4_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_4_V_full_n : IN STD_LOGIC;
    res_V_data_4_V_write : OUT STD_LOGIC;
    res_V_data_5_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_5_V_full_n : IN STD_LOGIC;
    res_V_data_5_V_write : OUT STD_LOGIC;
    res_V_data_6_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_6_V_full_n : IN STD_LOGIC;
    res_V_data_6_V_write : OUT STD_LOGIC;
    res_V_data_7_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_7_V_full_n : IN STD_LOGIC;
    res_V_data_7_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_7_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7_12 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7_13 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7_15 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7_24 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7_25 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7_26 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7_27 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7_28 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7_29 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7_30 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7_31 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal line_buffer_Array_V_7_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_7_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_7_0_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_7_0_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_7_0_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_7_0_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_7_0_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_7_0_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_7_0_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_7_0_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_7_0_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_7_0_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_7_0_4_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_7_0_4_we0 : STD_LOGIC;
    signal line_buffer_Array_V_7_0_4_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_7_0_5_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_7_0_5_we0 : STD_LOGIC;
    signal line_buffer_Array_V_7_0_5_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_7_0_6_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_7_0_6_we0 : STD_LOGIC;
    signal line_buffer_Array_V_7_0_6_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_7_0_7_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_7_0_7_we0 : STD_LOGIC;
    signal line_buffer_Array_V_7_0_7_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln241_reg_1089 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal data_V_data_4_V_blk_n : STD_LOGIC;
    signal data_V_data_5_V_blk_n : STD_LOGIC;
    signal data_V_data_6_V_blk_n : STD_LOGIC;
    signal data_V_data_7_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal and_ln191_2_reg_1314 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_4_V_blk_n : STD_LOGIC;
    signal res_V_data_5_V_blk_n : STD_LOGIC;
    signal res_V_data_6_V_blk_n : STD_LOGIC;
    signal res_V_data_7_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_208 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln241_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal io_acc_block_signal_op186 : STD_LOGIC;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln241_reg_1089_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln241_fu_236_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln241_reg_1093 : STD_LOGIC_VECTOR (8 downto 0);
    signal pool_window_3_V_reg_1098 : STD_LOGIC_VECTOR (15 downto 0);
    signal io_acc_block_signal_op29 : STD_LOGIC;
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal pool_window_3_V_reg_1098_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_1_reg_1107 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_1_reg_1107_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_2_reg_1116 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_2_reg_1116_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_3_reg_1125 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_3_reg_1125_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_4_reg_1134 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_4_reg_1134_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_5_reg_1143 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_5_reg_1143_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_6_reg_1152 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_6_reg_1152_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_7_reg_1161 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_7_reg_1161_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_reg_1170 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_1_reg_1176 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_2_reg_1182 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_3_reg_1188 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_4_reg_1194 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_5_reg_1200 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_6_reg_1206 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_7_reg_1212 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_reg_1218 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_1_reg_1224 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_2_reg_1230 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_3_reg_1236 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_4_reg_1242 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_5_reg_1248 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_6_reg_1254 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_7_reg_1260 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_reg_1266 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_1_reg_1272 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_2_reg_1278 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_3_reg_1284 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_4_reg_1290 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_5_reg_1296 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_6_reg_1302 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_7_reg_1308 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln191_2_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_reg_1318 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_reg_1324 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_8_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_8_reg_1330 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_9_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_9_reg_1336 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_11_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_11_reg_1342 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_12_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_12_reg_1348 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_3_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_3_reg_1354 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_14_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_14_reg_1360 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_4_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_4_reg_1366 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_16_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_16_reg_1372 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_5_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_5_reg_1378 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_18_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_18_reg_1384 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_6_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_6_reg_1390 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_20_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_20_reg_1396 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_7_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_7_reg_1402 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_22_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_22_reg_1408 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_reg_1414 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln227_fu_668_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln227_reg_1418 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln216_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_reg_1423 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln222_fu_712_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln222_reg_1427 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln66_3_fu_752_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_3_reg_1432 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_7_fu_786_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_7_reg_1437 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_11_fu_820_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_11_reg_1442 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_15_fu_854_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_15_reg_1447 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_19_fu_888_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_19_reg_1452 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_23_fu_922_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_23_reg_1457 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_27_fu_956_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_27_reg_1462 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_31_fu_990_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_31_reg_1467 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_212_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_i_i_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_i_i_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_i_i_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln225_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln220_fu_694_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sY_load : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_0_V_fu_1003_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_data_1_V_fu_1013_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_fu_1023_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_fu_1033_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_4_V_fu_1043_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_5_V_fu_1053_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_6_V_fu_1063_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_7_V_fu_1073_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln191_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_2_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_3_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_1_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_fu_662_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln222_fu_706_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln66_fu_726_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_2_fu_738_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_2_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_1_fu_731_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln66_fu_749_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_4_fu_760_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_6_fu_772_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_10_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_5_fu_765_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln66_1_fu_783_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_8_fu_794_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_10_fu_806_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_13_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_9_fu_799_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln66_2_fu_817_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_12_fu_828_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_14_fu_840_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_15_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_13_fu_833_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln66_3_fu_851_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_16_fu_862_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_18_fu_874_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_17_fu_879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_17_fu_867_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln66_4_fu_885_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_20_fu_896_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_22_fu_908_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_19_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_21_fu_901_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln66_5_fu_919_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_24_fu_930_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_26_fu_942_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_21_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_25_fu_935_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln66_6_fu_953_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_28_fu_964_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_30_fu_976_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_23_fu_981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_29_fu_969_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln66_7_fu_987_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_462 : BOOLEAN;
    signal ap_condition_457 : BOOLEAN;
    signal ap_condition_447 : BOOLEAN;
    signal ap_condition_1041 : BOOLEAN;
    signal ap_condition_399 : BOOLEAN;
    signal ap_condition_1046 : BOOLEAN;

    component myproject_axi_mux_42_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    line_buffer_Array_V_7_0_0_U : component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_F,
        ce0 => line_buffer_Array_V_7_0_0_ce0,
        we0 => line_buffer_Array_V_7_0_0_we0,
        d0 => pool_window_3_V_reg_1098,
        q0 => line_buffer_Array_V_7_0_0_q0);

    line_buffer_Array_V_7_0_1_U : component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_F,
        ce0 => line_buffer_Array_V_7_0_1_ce0,
        we0 => line_buffer_Array_V_7_0_1_we0,
        d0 => pool_window_3_V_1_reg_1107,
        q0 => line_buffer_Array_V_7_0_1_q0);

    line_buffer_Array_V_7_0_2_U : component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_F,
        ce0 => line_buffer_Array_V_7_0_2_ce0,
        we0 => line_buffer_Array_V_7_0_2_we0,
        d0 => pool_window_3_V_2_reg_1116,
        q0 => line_buffer_Array_V_7_0_2_q0);

    line_buffer_Array_V_7_0_3_U : component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_F,
        ce0 => line_buffer_Array_V_7_0_3_ce0,
        we0 => line_buffer_Array_V_7_0_3_we0,
        d0 => pool_window_3_V_3_reg_1125,
        q0 => line_buffer_Array_V_7_0_3_q0);

    line_buffer_Array_V_7_0_4_U : component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_F,
        ce0 => line_buffer_Array_V_7_0_4_ce0,
        we0 => line_buffer_Array_V_7_0_4_we0,
        d0 => pool_window_3_V_4_reg_1134,
        q0 => line_buffer_Array_V_7_0_4_q0);

    line_buffer_Array_V_7_0_5_U : component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_F,
        ce0 => line_buffer_Array_V_7_0_5_ce0,
        we0 => line_buffer_Array_V_7_0_5_we0,
        d0 => pool_window_3_V_5_reg_1143,
        q0 => line_buffer_Array_V_7_0_5_q0);

    line_buffer_Array_V_7_0_6_U : component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_F,
        ce0 => line_buffer_Array_V_7_0_6_ce0,
        we0 => line_buffer_Array_V_7_0_6_we0,
        d0 => pool_window_3_V_6_reg_1152,
        q0 => line_buffer_Array_V_7_0_6_q0);

    line_buffer_Array_V_7_0_7_U : component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_butde
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_F,
        ce0 => line_buffer_Array_V_7_0_7_ce0,
        we0 => line_buffer_Array_V_7_0_7_we0,
        d0 => pool_window_3_V_7_reg_1161,
        q0 => line_buffer_Array_V_7_0_7_q0);

    myproject_axi_mux_42_16_1_1_U263 : component myproject_axi_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_reg_1218,
        din1 => pool_window_1_V_reg_1170,
        din2 => pool_window_2_V_reg_1266,
        din3 => pool_window_3_V_reg_1098_pp0_iter1_reg,
        din4 => select_ln66_3_reg_1432,
        dout => tmp_data_0_V_fu_1003_p6);

    myproject_axi_mux_42_16_1_1_U264 : component myproject_axi_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_1_reg_1224,
        din1 => pool_window_1_V_1_reg_1176,
        din2 => pool_window_2_V_1_reg_1272,
        din3 => pool_window_3_V_1_reg_1107_pp0_iter1_reg,
        din4 => select_ln66_7_reg_1437,
        dout => tmp_data_1_V_fu_1013_p6);

    myproject_axi_mux_42_16_1_1_U265 : component myproject_axi_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_2_reg_1230,
        din1 => pool_window_1_V_2_reg_1182,
        din2 => pool_window_2_V_2_reg_1278,
        din3 => pool_window_3_V_2_reg_1116_pp0_iter1_reg,
        din4 => select_ln66_11_reg_1442,
        dout => tmp_data_2_V_fu_1023_p6);

    myproject_axi_mux_42_16_1_1_U266 : component myproject_axi_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_3_reg_1236,
        din1 => pool_window_1_V_3_reg_1188,
        din2 => pool_window_2_V_3_reg_1284,
        din3 => pool_window_3_V_3_reg_1125_pp0_iter1_reg,
        din4 => select_ln66_15_reg_1447,
        dout => tmp_data_3_V_fu_1033_p6);

    myproject_axi_mux_42_16_1_1_U267 : component myproject_axi_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_4_reg_1242,
        din1 => pool_window_1_V_4_reg_1194,
        din2 => pool_window_2_V_4_reg_1290,
        din3 => pool_window_3_V_4_reg_1134_pp0_iter1_reg,
        din4 => select_ln66_19_reg_1452,
        dout => tmp_data_4_V_fu_1043_p6);

    myproject_axi_mux_42_16_1_1_U268 : component myproject_axi_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_5_reg_1248,
        din1 => pool_window_1_V_5_reg_1200,
        din2 => pool_window_2_V_5_reg_1296,
        din3 => pool_window_3_V_5_reg_1143_pp0_iter1_reg,
        din4 => select_ln66_23_reg_1457,
        dout => tmp_data_5_V_fu_1053_p6);

    myproject_axi_mux_42_16_1_1_U269 : component myproject_axi_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_6_reg_1254,
        din1 => pool_window_1_V_6_reg_1206,
        din2 => pool_window_2_V_6_reg_1302,
        din3 => pool_window_3_V_6_reg_1152_pp0_iter1_reg,
        din4 => select_ln66_27_reg_1462,
        dout => tmp_data_6_V_fu_1063_p6);

    myproject_axi_mux_42_16_1_1_U270 : component myproject_axi_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_7_reg_1260,
        din1 => pool_window_1_V_7_reg_1212,
        din2 => pool_window_2_V_7_reg_1308,
        din3 => pool_window_3_V_7_reg_1161_pp0_iter1_reg,
        din4 => select_ln66_31_reg_1467,
        dout => tmp_data_7_V_fu_1073_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln216_fu_688_p2 = ap_const_lv1_1) and (icmp_ln212_fu_644_p2 = ap_const_lv1_1) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_219 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_219 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_219;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_457)) then
                if ((ap_const_boolean_1 = ap_condition_462)) then 
                    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_219 <= select_ln222_reg_1427;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_219 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_219;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_208 <= add_ln241_reg_1093;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_208 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_447)) then
                if ((icmp_ln212_fu_644_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_644_p2 = ap_const_lv1_0)) then 
                    pX <= add_ln225_fu_650_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1041)) then
                if ((icmp_ln216_fu_688_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((icmp_ln216_fu_688_p2 = ap_const_lv1_0)) then 
                    pY <= add_ln220_fu_694_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1046)) then 
                    sX <= select_ln227_reg_1418;
                elsif ((ap_const_boolean_1 = ap_condition_399)) then 
                    sX <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln241_reg_1093 <= add_ln241_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln191_2_reg_1314 <= and_ln191_2_fu_550_p2;
                pool_window_0_V_1_reg_1224 <= kernel_data_V_7_9;
                pool_window_0_V_2_reg_1230 <= kernel_data_V_7_10;
                pool_window_0_V_3_reg_1236 <= kernel_data_V_7_11;
                pool_window_0_V_4_reg_1242 <= kernel_data_V_7_12;
                pool_window_0_V_5_reg_1248 <= kernel_data_V_7_13;
                pool_window_0_V_6_reg_1254 <= kernel_data_V_7_14;
                pool_window_0_V_7_reg_1260 <= kernel_data_V_7_15;
                pool_window_0_V_reg_1218 <= kernel_data_V_7_8;
                pool_window_1_V_1_reg_1176 <= line_buffer_Array_V_7_0_1_q0;
                pool_window_1_V_2_reg_1182 <= line_buffer_Array_V_7_0_2_q0;
                pool_window_1_V_3_reg_1188 <= line_buffer_Array_V_7_0_3_q0;
                pool_window_1_V_4_reg_1194 <= line_buffer_Array_V_7_0_4_q0;
                pool_window_1_V_5_reg_1200 <= line_buffer_Array_V_7_0_5_q0;
                pool_window_1_V_6_reg_1206 <= line_buffer_Array_V_7_0_6_q0;
                pool_window_1_V_7_reg_1212 <= line_buffer_Array_V_7_0_7_q0;
                pool_window_1_V_reg_1170 <= line_buffer_Array_V_7_0_0_q0;
                pool_window_2_V_1_reg_1272 <= kernel_data_V_7_25;
                pool_window_2_V_2_reg_1278 <= kernel_data_V_7_26;
                pool_window_2_V_3_reg_1284 <= kernel_data_V_7_27;
                pool_window_2_V_4_reg_1290 <= kernel_data_V_7_28;
                pool_window_2_V_5_reg_1296 <= kernel_data_V_7_29;
                pool_window_2_V_6_reg_1302 <= kernel_data_V_7_30;
                pool_window_2_V_7_reg_1308 <= kernel_data_V_7_31;
                pool_window_2_V_reg_1266 <= kernel_data_V_7_24;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_fu_550_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1496_11_reg_1342 <= icmp_ln1496_11_fu_578_p2;
                icmp_ln1496_12_reg_1348 <= icmp_ln1496_12_fu_584_p2;
                icmp_ln1496_14_reg_1360 <= icmp_ln1496_14_fu_595_p2;
                icmp_ln1496_16_reg_1372 <= icmp_ln1496_16_fu_606_p2;
                icmp_ln1496_18_reg_1384 <= icmp_ln1496_18_fu_617_p2;
                icmp_ln1496_1_reg_1324 <= icmp_ln1496_1_fu_562_p2;
                icmp_ln1496_20_reg_1396 <= icmp_ln1496_20_fu_628_p2;
                icmp_ln1496_22_reg_1408 <= icmp_ln1496_22_fu_639_p2;
                icmp_ln1496_3_reg_1354 <= icmp_ln1496_3_fu_589_p2;
                icmp_ln1496_4_reg_1366 <= icmp_ln1496_4_fu_600_p2;
                icmp_ln1496_5_reg_1378 <= icmp_ln1496_5_fu_611_p2;
                icmp_ln1496_6_reg_1390 <= icmp_ln1496_6_fu_622_p2;
                icmp_ln1496_7_reg_1402 <= icmp_ln1496_7_fu_633_p2;
                icmp_ln1496_8_reg_1330 <= icmp_ln1496_8_fu_567_p2;
                icmp_ln1496_9_reg_1336 <= icmp_ln1496_9_fu_573_p2;
                icmp_ln1496_reg_1318 <= icmp_ln1496_fu_556_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln212_reg_1414 <= icmp_ln212_fu_644_p2;
                icmp_ln241_reg_1089 <= icmp_ln241_fu_230_p2;
                icmp_ln241_reg_1089_pp0_iter1_reg <= icmp_ln241_reg_1089;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_644_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln216_reg_1423 <= icmp_ln216_fu_688_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                kernel_data_V_7_10 <= line_buffer_Array_V_7_0_2_q0;
                kernel_data_V_7_11 <= line_buffer_Array_V_7_0_3_q0;
                kernel_data_V_7_12 <= line_buffer_Array_V_7_0_4_q0;
                kernel_data_V_7_13 <= line_buffer_Array_V_7_0_5_q0;
                kernel_data_V_7_14 <= line_buffer_Array_V_7_0_6_q0;
                kernel_data_V_7_15 <= line_buffer_Array_V_7_0_7_q0;
                kernel_data_V_7_24 <= pool_window_3_V_reg_1098;
                kernel_data_V_7_25 <= pool_window_3_V_1_reg_1107;
                kernel_data_V_7_26 <= pool_window_3_V_2_reg_1116;
                kernel_data_V_7_27 <= pool_window_3_V_3_reg_1125;
                kernel_data_V_7_28 <= pool_window_3_V_4_reg_1134;
                kernel_data_V_7_29 <= pool_window_3_V_5_reg_1143;
                kernel_data_V_7_30 <= pool_window_3_V_6_reg_1152;
                kernel_data_V_7_31 <= pool_window_3_V_7_reg_1161;
                kernel_data_V_7_8 <= line_buffer_Array_V_7_0_0_q0;
                kernel_data_V_7_9 <= line_buffer_Array_V_7_0_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                pool_window_3_V_1_reg_1107 <= data_V_data_1_V_dout;
                pool_window_3_V_2_reg_1116 <= data_V_data_2_V_dout;
                pool_window_3_V_3_reg_1125 <= data_V_data_3_V_dout;
                pool_window_3_V_4_reg_1134 <= data_V_data_4_V_dout;
                pool_window_3_V_5_reg_1143 <= data_V_data_5_V_dout;
                pool_window_3_V_6_reg_1152 <= data_V_data_6_V_dout;
                pool_window_3_V_7_reg_1161 <= data_V_data_7_V_dout;
                pool_window_3_V_reg_1098 <= data_V_data_0_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                pool_window_3_V_1_reg_1107_pp0_iter1_reg <= pool_window_3_V_1_reg_1107;
                pool_window_3_V_2_reg_1116_pp0_iter1_reg <= pool_window_3_V_2_reg_1116;
                pool_window_3_V_3_reg_1125_pp0_iter1_reg <= pool_window_3_V_3_reg_1125;
                pool_window_3_V_4_reg_1134_pp0_iter1_reg <= pool_window_3_V_4_reg_1134;
                pool_window_3_V_5_reg_1143_pp0_iter1_reg <= pool_window_3_V_5_reg_1143;
                pool_window_3_V_6_reg_1152_pp0_iter1_reg <= pool_window_3_V_6_reg_1152;
                pool_window_3_V_7_reg_1161_pp0_iter1_reg <= pool_window_3_V_7_reg_1161;
                pool_window_3_V_reg_1098_pp0_iter1_reg <= pool_window_3_V_reg_1098;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_reg_1414 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sY <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_219;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_644_p2 = ap_const_lv1_1) and (icmp_ln216_fu_688_p2 = ap_const_lv1_0) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln222_reg_1427 <= select_ln222_fu_712_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_644_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln227_reg_1418 <= select_ln227_fu_668_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                select_ln66_11_reg_1442 <= select_ln66_11_fu_820_p3;
                select_ln66_15_reg_1447 <= select_ln66_15_fu_854_p3;
                select_ln66_19_reg_1452 <= select_ln66_19_fu_888_p3;
                select_ln66_23_reg_1457 <= select_ln66_23_fu_922_p3;
                select_ln66_27_reg_1462 <= select_ln66_27_fu_956_p3;
                select_ln66_31_reg_1467 <= select_ln66_31_fu_990_p3;
                select_ln66_3_reg_1432 <= select_ln66_3_fu_752_p3;
                select_ln66_7_reg_1437 <= select_ln66_7_fu_786_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln241_fu_230_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln241_fu_230_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln241_fu_230_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln220_fu_694_p2 <= std_logic_vector(unsigned(pY) + unsigned(ap_const_lv32_1));
    add_ln222_fu_706_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_sY_load) + unsigned(ap_const_lv32_1));
    add_ln225_fu_650_p2 <= std_logic_vector(unsigned(pX) + unsigned(ap_const_lv32_1));
    add_ln227_fu_662_p2 <= std_logic_vector(unsigned(sX) + unsigned(ap_const_lv32_1));
    add_ln241_fu_236_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_212_p4) + unsigned(ap_const_lv9_1));
    and_ln191_1_fu_544_p2 <= (icmp_ln191_3_fu_532_p2 and icmp_ln191_2_fu_522_p2);
    and_ln191_2_fu_550_p2 <= (and_ln191_fu_538_p2 and and_ln191_1_fu_544_p2);
    and_ln191_fu_538_p2 <= (icmp_ln191_fu_502_p2 and icmp_ln191_1_fu_512_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_2_reg_1314, io_acc_block_signal_op186)
    begin
                ap_block_pp0_stage0_01001 <= ((io_acc_block_signal_op186 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_2_reg_1314, io_acc_block_signal_op186)
    begin
                ap_block_pp0_stage0_11001 <= ((io_acc_block_signal_op186 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_2_reg_1314, io_acc_block_signal_op186)
    begin
                ap_block_pp0_stage0_subdone <= ((io_acc_block_signal_op186 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln241_reg_1089, io_acc_block_signal_op29)
    begin
                ap_block_pp0_stage1_11001 <= ((io_acc_block_signal_op29 = ap_const_logic_0) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln241_reg_1089, io_acc_block_signal_op29)
    begin
                ap_block_pp0_stage1_subdone <= ((io_acc_block_signal_op29 = ap_const_logic_0) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(icmp_ln241_reg_1089, io_acc_block_signal_op29)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((io_acc_block_signal_op29 = ap_const_logic_0) and (icmp_ln241_reg_1089 = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter2_assign_proc : process(and_ln191_2_reg_1314, io_acc_block_signal_op186)
    begin
                ap_block_state6_pp0_stage0_iter2 <= ((io_acc_block_signal_op186 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_1314));
    end process;


    ap_condition_1041_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln212_fu_644_p2, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_1041 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_644_p2 = ap_const_lv1_1) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_1046_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln212_reg_1414)
    begin
                ap_condition_1046 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln212_reg_1414 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_399_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln212_fu_644_p2)
    begin
                ap_condition_399 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_644_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_447_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_447 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_457_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_457 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_462_assign_proc : process(icmp_ln241_reg_1089_pp0_iter1_reg, icmp_ln212_reg_1414, icmp_ln216_reg_1423)
    begin
                ap_condition_462 <= ((icmp_ln212_reg_1414 = ap_const_lv1_1) and (icmp_ln216_reg_1423 = ap_const_lv1_0) and (icmp_ln241_reg_1089_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln241_fu_230_p2)
    begin
        if ((icmp_ln241_fu_230_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_212_p4_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, indvar_flatten_reg_208, add_ln241_reg_1093, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_212_p4 <= add_ln241_reg_1093;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_212_p4 <= indvar_flatten_reg_208;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_i_i_reg_219 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_sig_allocacmp_sY_load_assign_proc : process(sY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln212_reg_1414, ap_phi_reg_pp0_iter2_storemerge_i_i_reg_219)
    begin
        if (((icmp_ln212_reg_1414 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_sY_load <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_219;
        else 
            ap_sig_allocacmp_sY_load <= sY;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_1089)
    begin
        if (((icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1089, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_1089)
    begin
        if (((icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1089, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_1089)
    begin
        if (((icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1089, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_1089)
    begin
        if (((icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1089, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_4_V_blk_n_assign_proc : process(data_V_data_4_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_1089)
    begin
        if (((icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_4_V_blk_n <= data_V_data_4_V_empty_n;
        else 
            data_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_4_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1089, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_4_V_read <= ap_const_logic_1;
        else 
            data_V_data_4_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_5_V_blk_n_assign_proc : process(data_V_data_5_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_1089)
    begin
        if (((icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_5_V_blk_n <= data_V_data_5_V_empty_n;
        else 
            data_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_5_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1089, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_5_V_read <= ap_const_logic_1;
        else 
            data_V_data_5_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_6_V_blk_n_assign_proc : process(data_V_data_6_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_1089)
    begin
        if (((icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_6_V_blk_n <= data_V_data_6_V_empty_n;
        else 
            data_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_6_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1089, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_6_V_read <= ap_const_logic_1;
        else 
            data_V_data_6_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_7_V_blk_n_assign_proc : process(data_V_data_7_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_1089)
    begin
        if (((icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_7_V_blk_n <= data_V_data_7_V_empty_n;
        else 
            data_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_7_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1089, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_7_V_read <= ap_const_logic_1;
        else 
            data_V_data_7_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_10_fu_777_p2 <= "1" when (signed(select_ln66_4_fu_760_p3) < signed(select_ln66_6_fu_772_p3)) else "0";
    icmp_ln1496_11_fu_578_p2 <= "1" when (signed(kernel_data_V_7_10) < signed(line_buffer_Array_V_7_0_2_q0)) else "0";
    icmp_ln1496_12_fu_584_p2 <= "1" when (signed(kernel_data_V_7_26) < signed(pool_window_3_V_2_reg_1116)) else "0";
    icmp_ln1496_13_fu_811_p2 <= "1" when (signed(select_ln66_8_fu_794_p3) < signed(select_ln66_10_fu_806_p3)) else "0";
    icmp_ln1496_14_fu_595_p2 <= "1" when (signed(kernel_data_V_7_27) < signed(pool_window_3_V_3_reg_1125)) else "0";
    icmp_ln1496_15_fu_845_p2 <= "1" when (signed(select_ln66_12_fu_828_p3) < signed(select_ln66_14_fu_840_p3)) else "0";
    icmp_ln1496_16_fu_606_p2 <= "1" when (signed(kernel_data_V_7_28) < signed(pool_window_3_V_4_reg_1134)) else "0";
    icmp_ln1496_17_fu_879_p2 <= "1" when (signed(select_ln66_16_fu_862_p3) < signed(select_ln66_18_fu_874_p3)) else "0";
    icmp_ln1496_18_fu_617_p2 <= "1" when (signed(kernel_data_V_7_29) < signed(pool_window_3_V_5_reg_1143)) else "0";
    icmp_ln1496_19_fu_913_p2 <= "1" when (signed(select_ln66_20_fu_896_p3) < signed(select_ln66_22_fu_908_p3)) else "0";
    icmp_ln1496_1_fu_562_p2 <= "1" when (signed(kernel_data_V_7_24) < signed(pool_window_3_V_reg_1098)) else "0";
    icmp_ln1496_20_fu_628_p2 <= "1" when (signed(kernel_data_V_7_30) < signed(pool_window_3_V_6_reg_1152)) else "0";
    icmp_ln1496_21_fu_947_p2 <= "1" when (signed(select_ln66_24_fu_930_p3) < signed(select_ln66_26_fu_942_p3)) else "0";
    icmp_ln1496_22_fu_639_p2 <= "1" when (signed(kernel_data_V_7_31) < signed(pool_window_3_V_7_reg_1161)) else "0";
    icmp_ln1496_23_fu_981_p2 <= "1" when (signed(select_ln66_28_fu_964_p3) < signed(select_ln66_30_fu_976_p3)) else "0";
    icmp_ln1496_2_fu_743_p2 <= "1" when (signed(select_ln66_fu_726_p3) < signed(select_ln66_2_fu_738_p3)) else "0";
    icmp_ln1496_3_fu_589_p2 <= "1" when (signed(kernel_data_V_7_11) < signed(line_buffer_Array_V_7_0_3_q0)) else "0";
    icmp_ln1496_4_fu_600_p2 <= "1" when (signed(kernel_data_V_7_12) < signed(line_buffer_Array_V_7_0_4_q0)) else "0";
    icmp_ln1496_5_fu_611_p2 <= "1" when (signed(kernel_data_V_7_13) < signed(line_buffer_Array_V_7_0_5_q0)) else "0";
    icmp_ln1496_6_fu_622_p2 <= "1" when (signed(kernel_data_V_7_14) < signed(line_buffer_Array_V_7_0_6_q0)) else "0";
    icmp_ln1496_7_fu_633_p2 <= "1" when (signed(kernel_data_V_7_15) < signed(line_buffer_Array_V_7_0_7_q0)) else "0";
    icmp_ln1496_8_fu_567_p2 <= "1" when (signed(kernel_data_V_7_9) < signed(line_buffer_Array_V_7_0_1_q0)) else "0";
    icmp_ln1496_9_fu_573_p2 <= "1" when (signed(kernel_data_V_7_25) < signed(pool_window_3_V_1_reg_1107)) else "0";
    icmp_ln1496_fu_556_p2 <= "1" when (signed(kernel_data_V_7_8) < signed(line_buffer_Array_V_7_0_0_q0)) else "0";
    icmp_ln191_1_fu_512_p2 <= "1" when (ap_sig_allocacmp_sY_load = ap_const_lv32_1) else "0";
    icmp_ln191_2_fu_522_p2 <= "1" when (signed(pY) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_3_fu_532_p2 <= "1" when (signed(pX) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_fu_502_p2 <= "1" when (sX = ap_const_lv32_1) else "0";
    icmp_ln212_fu_644_p2 <= "1" when (pX = ap_const_lv32_F) else "0";
    icmp_ln216_fu_688_p2 <= "1" when (pY = ap_const_lv32_F) else "0";
    icmp_ln241_fu_230_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_212_p4 = ap_const_lv9_100) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op186 <= (res_V_data_7_V_full_n and res_V_data_6_V_full_n and res_V_data_5_V_full_n and res_V_data_4_V_full_n and res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op29 <= (data_V_data_7_V_empty_n and data_V_data_6_V_empty_n and data_V_data_5_V_empty_n and data_V_data_4_V_empty_n and data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);

    line_buffer_Array_V_7_0_0_ce0_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_7_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_7_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_7_0_0_we0_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_7_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_7_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_7_0_1_ce0_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_7_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_7_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_7_0_1_we0_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_7_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_7_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_7_0_2_ce0_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_7_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_7_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_7_0_2_we0_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_7_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_7_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_7_0_3_ce0_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_7_0_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_7_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_7_0_3_we0_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_7_0_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_7_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_7_0_4_ce0_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_7_0_4_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_7_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_7_0_4_we0_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_7_0_4_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_7_0_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_7_0_5_ce0_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_7_0_5_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_7_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_7_0_5_we0_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_7_0_5_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_7_0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_7_0_6_ce0_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_7_0_6_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_7_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_7_0_6_we0_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_7_0_6_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_7_0_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_7_0_7_ce0_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_7_0_7_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_7_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_7_0_7_we0_assign_proc : process(icmp_ln241_reg_1089, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1089 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_7_0_7_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_7_0_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln191_2_reg_1314)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_fu_1003_p6;

    res_V_data_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_1314, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln191_2_reg_1314)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_data_1_V_fu_1013_p6;

    res_V_data_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_1314, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln191_2_reg_1314)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_data_2_V_fu_1023_p6;

    res_V_data_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_1314, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln191_2_reg_1314)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_data_3_V_fu_1033_p6;

    res_V_data_3_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_1314, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_4_V_blk_n_assign_proc : process(res_V_data_4_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln191_2_reg_1314)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_4_V_blk_n <= res_V_data_4_V_full_n;
        else 
            res_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_4_V_din <= tmp_data_4_V_fu_1043_p6;

    res_V_data_4_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_1314, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_4_V_write <= ap_const_logic_1;
        else 
            res_V_data_4_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_5_V_blk_n_assign_proc : process(res_V_data_5_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln191_2_reg_1314)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_5_V_blk_n <= res_V_data_5_V_full_n;
        else 
            res_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_5_V_din <= tmp_data_5_V_fu_1053_p6;

    res_V_data_5_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_1314, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_5_V_write <= ap_const_logic_1;
        else 
            res_V_data_5_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_6_V_blk_n_assign_proc : process(res_V_data_6_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln191_2_reg_1314)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_6_V_blk_n <= res_V_data_6_V_full_n;
        else 
            res_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_6_V_din <= tmp_data_6_V_fu_1063_p6;

    res_V_data_6_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_1314, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_6_V_write <= ap_const_logic_1;
        else 
            res_V_data_6_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_7_V_blk_n_assign_proc : process(res_V_data_7_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln191_2_reg_1314)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_7_V_blk_n <= res_V_data_7_V_full_n;
        else 
            res_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_7_V_din <= tmp_data_7_V_fu_1073_p6;

    res_V_data_7_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_1314, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1314) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_7_V_write <= ap_const_logic_1;
        else 
            res_V_data_7_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln222_fu_712_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_1_fu_512_p2(0) = '1') else 
        add_ln222_fu_706_p2;
    select_ln227_fu_668_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_fu_502_p2(0) = '1') else 
        add_ln227_fu_662_p2;
    select_ln66_10_fu_806_p3 <= 
        pool_window_3_V_2_reg_1116 when (icmp_ln1496_12_reg_1348(0) = '1') else 
        pool_window_2_V_2_reg_1278;
    select_ln66_11_fu_820_p3 <= 
        select_ln66_9_fu_799_p3 when (icmp_ln1496_13_fu_811_p2(0) = '1') else 
        zext_ln66_2_fu_817_p1;
    select_ln66_12_fu_828_p3 <= 
        pool_window_1_V_3_reg_1188 when (icmp_ln1496_3_reg_1354(0) = '1') else 
        pool_window_0_V_3_reg_1236;
    select_ln66_13_fu_833_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_14_reg_1360(0) = '1') else 
        ap_const_lv2_2;
    select_ln66_14_fu_840_p3 <= 
        pool_window_3_V_3_reg_1125 when (icmp_ln1496_14_reg_1360(0) = '1') else 
        pool_window_2_V_3_reg_1284;
    select_ln66_15_fu_854_p3 <= 
        select_ln66_13_fu_833_p3 when (icmp_ln1496_15_fu_845_p2(0) = '1') else 
        zext_ln66_3_fu_851_p1;
    select_ln66_16_fu_862_p3 <= 
        pool_window_1_V_4_reg_1194 when (icmp_ln1496_4_reg_1366(0) = '1') else 
        pool_window_0_V_4_reg_1242;
    select_ln66_17_fu_867_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_16_reg_1372(0) = '1') else 
        ap_const_lv2_2;
    select_ln66_18_fu_874_p3 <= 
        pool_window_3_V_4_reg_1134 when (icmp_ln1496_16_reg_1372(0) = '1') else 
        pool_window_2_V_4_reg_1290;
    select_ln66_19_fu_888_p3 <= 
        select_ln66_17_fu_867_p3 when (icmp_ln1496_17_fu_879_p2(0) = '1') else 
        zext_ln66_4_fu_885_p1;
    select_ln66_1_fu_731_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_1_reg_1324(0) = '1') else 
        ap_const_lv2_2;
    select_ln66_20_fu_896_p3 <= 
        pool_window_1_V_5_reg_1200 when (icmp_ln1496_5_reg_1378(0) = '1') else 
        pool_window_0_V_5_reg_1248;
    select_ln66_21_fu_901_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_18_reg_1384(0) = '1') else 
        ap_const_lv2_2;
    select_ln66_22_fu_908_p3 <= 
        pool_window_3_V_5_reg_1143 when (icmp_ln1496_18_reg_1384(0) = '1') else 
        pool_window_2_V_5_reg_1296;
    select_ln66_23_fu_922_p3 <= 
        select_ln66_21_fu_901_p3 when (icmp_ln1496_19_fu_913_p2(0) = '1') else 
        zext_ln66_5_fu_919_p1;
    select_ln66_24_fu_930_p3 <= 
        pool_window_1_V_6_reg_1206 when (icmp_ln1496_6_reg_1390(0) = '1') else 
        pool_window_0_V_6_reg_1254;
    select_ln66_25_fu_935_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_20_reg_1396(0) = '1') else 
        ap_const_lv2_2;
    select_ln66_26_fu_942_p3 <= 
        pool_window_3_V_6_reg_1152 when (icmp_ln1496_20_reg_1396(0) = '1') else 
        pool_window_2_V_6_reg_1302;
    select_ln66_27_fu_956_p3 <= 
        select_ln66_25_fu_935_p3 when (icmp_ln1496_21_fu_947_p2(0) = '1') else 
        zext_ln66_6_fu_953_p1;
    select_ln66_28_fu_964_p3 <= 
        pool_window_1_V_7_reg_1212 when (icmp_ln1496_7_reg_1402(0) = '1') else 
        pool_window_0_V_7_reg_1260;
    select_ln66_29_fu_969_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_22_reg_1408(0) = '1') else 
        ap_const_lv2_2;
    select_ln66_2_fu_738_p3 <= 
        pool_window_3_V_reg_1098 when (icmp_ln1496_1_reg_1324(0) = '1') else 
        pool_window_2_V_reg_1266;
    select_ln66_30_fu_976_p3 <= 
        pool_window_3_V_7_reg_1161 when (icmp_ln1496_22_reg_1408(0) = '1') else 
        pool_window_2_V_7_reg_1308;
    select_ln66_31_fu_990_p3 <= 
        select_ln66_29_fu_969_p3 when (icmp_ln1496_23_fu_981_p2(0) = '1') else 
        zext_ln66_7_fu_987_p1;
    select_ln66_3_fu_752_p3 <= 
        select_ln66_1_fu_731_p3 when (icmp_ln1496_2_fu_743_p2(0) = '1') else 
        zext_ln66_fu_749_p1;
    select_ln66_4_fu_760_p3 <= 
        pool_window_1_V_1_reg_1176 when (icmp_ln1496_8_reg_1330(0) = '1') else 
        pool_window_0_V_1_reg_1224;
    select_ln66_5_fu_765_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_9_reg_1336(0) = '1') else 
        ap_const_lv2_2;
    select_ln66_6_fu_772_p3 <= 
        pool_window_3_V_1_reg_1107 when (icmp_ln1496_9_reg_1336(0) = '1') else 
        pool_window_2_V_1_reg_1272;
    select_ln66_7_fu_786_p3 <= 
        select_ln66_5_fu_765_p3 when (icmp_ln1496_10_fu_777_p2(0) = '1') else 
        zext_ln66_1_fu_783_p1;
    select_ln66_8_fu_794_p3 <= 
        pool_window_1_V_2_reg_1182 when (icmp_ln1496_11_reg_1342(0) = '1') else 
        pool_window_0_V_2_reg_1230;
    select_ln66_9_fu_799_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_12_reg_1348(0) = '1') else 
        ap_const_lv2_2;
    select_ln66_fu_726_p3 <= 
        pool_window_1_V_reg_1170 when (icmp_ln1496_reg_1318(0) = '1') else 
        pool_window_0_V_reg_1218;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln66_1_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_8_reg_1330),2));
    zext_ln66_2_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_11_reg_1342),2));
    zext_ln66_3_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_3_reg_1354),2));
    zext_ln66_4_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_4_reg_1366),2));
    zext_ln66_5_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_5_reg_1378),2));
    zext_ln66_6_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_6_reg_1390),2));
    zext_ln66_7_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_7_reg_1402),2));
    zext_ln66_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_reg_1318),2));
end behav;
