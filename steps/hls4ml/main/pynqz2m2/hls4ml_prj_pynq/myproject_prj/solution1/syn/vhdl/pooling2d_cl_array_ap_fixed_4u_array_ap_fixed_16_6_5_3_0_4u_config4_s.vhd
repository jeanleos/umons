-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_6_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_6_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_6_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_6_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_6_12 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_6_13 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_6_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_6_15 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal line_buffer_Array_V_6_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_6_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_6_0_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_6_0_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_6_0_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_6_0_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_6_0_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_6_0_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_6_0_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_6_0_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_6_0_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_6_0_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln241_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal and_ln191_4_reg_790 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_140 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln241_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal io_acc_block_signal_op118 : STD_LOGIC;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln241_reg_673_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln241_fu_168_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln241_reg_677 : STD_LOGIC_VECTOR (10 downto 0);
    signal pool_window_3_V_reg_682 : STD_LOGIC_VECTOR (15 downto 0);
    signal io_acc_block_signal_op21 : STD_LOGIC;
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal pool_window_3_V_reg_682_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_8_reg_691 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_8_reg_691_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_9_reg_700 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_9_reg_700_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_10_reg_709 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_10_reg_709_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_reg_718 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_8_reg_724 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_9_reg_730 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_10_reg_736 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_reg_742 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_8_reg_748 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_9_reg_754 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_10_reg_760 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_reg_766 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_8_reg_772 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_9_reg_778 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_10_reg_784 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln191_4_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_reg_794 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_24_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_24_reg_800 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_reg_806 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_26_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_26_reg_812 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_2_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_2_reg_818 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_28_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_28_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_30_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_30_reg_830 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_31_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_31_reg_836 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln227_fu_428_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln227_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln216_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_reg_851 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln222_fu_472_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln222_reg_855 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln66_34_fu_506_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_34_reg_860 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_39_fu_540_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_39_reg_865 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_44_fu_574_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_44_reg_870 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_46_fu_608_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_46_reg_875 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_144_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_i_i_reg_151 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_i_i_reg_151 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_i_i_reg_151 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln225_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln220_fu_454_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sY_3_load : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_0_V_fu_627_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_data_1_V_fu_637_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_fu_647_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_fu_657_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln191_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_4_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_5_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_6_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_3_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln222_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln66_fu_480_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_33_fu_492_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_25_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_32_fu_485_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln66_fu_503_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_35_fu_514_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_37_fu_526_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_27_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_36_fu_519_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln66_8_fu_537_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_38_fu_548_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_40_fu_560_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_29_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_42_fu_553_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln66_9_fu_571_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln66_41_fu_582_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_43_fu_594_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_32_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_45_fu_587_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln66_10_fu_605_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_318 : BOOLEAN;
    signal ap_condition_322 : BOOLEAN;
    signal ap_condition_313 : BOOLEAN;
    signal ap_condition_303 : BOOLEAN;
    signal ap_condition_269 : BOOLEAN;
    signal ap_condition_671 : BOOLEAN;
    signal ap_condition_263 : BOOLEAN;
    signal ap_condition_676 : BOOLEAN;

    component myproject_axi_mux_42_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_buhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    line_buffer_Array_V_6_0_0_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_buhbi
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1F,
        ce0 => line_buffer_Array_V_6_0_0_ce0,
        we0 => line_buffer_Array_V_6_0_0_we0,
        d0 => pool_window_3_V_reg_682,
        q0 => line_buffer_Array_V_6_0_0_q0);

    line_buffer_Array_V_6_0_1_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_buhbi
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1F,
        ce0 => line_buffer_Array_V_6_0_1_ce0,
        we0 => line_buffer_Array_V_6_0_1_we0,
        d0 => pool_window_3_V_8_reg_691,
        q0 => line_buffer_Array_V_6_0_1_q0);

    line_buffer_Array_V_6_0_2_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_buhbi
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1F,
        ce0 => line_buffer_Array_V_6_0_2_ce0,
        we0 => line_buffer_Array_V_6_0_2_we0,
        d0 => pool_window_3_V_9_reg_700,
        q0 => line_buffer_Array_V_6_0_2_q0);

    line_buffer_Array_V_6_0_3_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_buhbi
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1F,
        ce0 => line_buffer_Array_V_6_0_3_ce0,
        we0 => line_buffer_Array_V_6_0_3_we0,
        d0 => pool_window_3_V_10_reg_709,
        q0 => line_buffer_Array_V_6_0_3_q0);

    myproject_axi_mux_42_16_1_1_U107 : component myproject_axi_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_reg_742,
        din1 => pool_window_1_V_reg_718,
        din2 => pool_window_2_V_reg_766,
        din3 => pool_window_3_V_reg_682_pp0_iter1_reg,
        din4 => select_ln66_34_reg_860,
        dout => tmp_data_0_V_fu_627_p6);

    myproject_axi_mux_42_16_1_1_U108 : component myproject_axi_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_8_reg_748,
        din1 => pool_window_1_V_8_reg_724,
        din2 => pool_window_2_V_8_reg_772,
        din3 => pool_window_3_V_8_reg_691_pp0_iter1_reg,
        din4 => select_ln66_39_reg_865,
        dout => tmp_data_1_V_fu_637_p6);

    myproject_axi_mux_42_16_1_1_U109 : component myproject_axi_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_9_reg_754,
        din1 => pool_window_1_V_9_reg_730,
        din2 => pool_window_2_V_9_reg_778,
        din3 => pool_window_3_V_9_reg_700_pp0_iter1_reg,
        din4 => select_ln66_44_reg_870,
        dout => tmp_data_2_V_fu_647_p6);

    myproject_axi_mux_42_16_1_1_U110 : component myproject_axi_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_10_reg_760,
        din1 => pool_window_1_V_10_reg_736,
        din2 => pool_window_2_V_10_reg_784,
        din3 => pool_window_3_V_10_reg_709_pp0_iter1_reg,
        din4 => select_ln66_46_reg_875,
        dout => tmp_data_3_V_fu_657_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_313)) then
                if ((ap_const_boolean_1 = ap_condition_322)) then 
                    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_151 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_318)) then 
                    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_151 <= select_ln222_reg_855;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_151 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_151;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then 
                indvar_flatten_reg_140 <= add_ln241_reg_677;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_140 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    pX_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_303)) then
                if ((icmp_ln212_fu_404_p2 = ap_const_lv1_1)) then 
                    pX_3 <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_404_p2 = ap_const_lv1_0)) then 
                    pX_3 <= add_ln225_fu_410_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_671)) then 
                    pY_3 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_269)) then 
                    pY_3 <= add_ln220_fu_454_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_676)) then 
                    sX_3 <= select_ln227_reg_846;
                elsif ((ap_const_boolean_1 = ap_condition_263)) then 
                    sX_3 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln241_reg_677 <= add_ln241_fu_168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then
                and_ln191_4_reg_790 <= and_ln191_4_fu_354_p2;
                pool_window_0_V_10_reg_760 <= kernel_data_V_6_7;
                pool_window_0_V_8_reg_748 <= kernel_data_V_6_5;
                pool_window_0_V_9_reg_754 <= kernel_data_V_6_6;
                pool_window_0_V_reg_742 <= kernel_data_V_6_4;
                pool_window_1_V_10_reg_736 <= line_buffer_Array_V_6_0_3_q0;
                pool_window_1_V_8_reg_724 <= line_buffer_Array_V_6_0_1_q0;
                pool_window_1_V_9_reg_730 <= line_buffer_Array_V_6_0_2_q0;
                pool_window_1_V_reg_718 <= line_buffer_Array_V_6_0_0_q0;
                pool_window_2_V_10_reg_784 <= kernel_data_V_6_15;
                pool_window_2_V_8_reg_772 <= kernel_data_V_6_13;
                pool_window_2_V_9_reg_778 <= kernel_data_V_6_14;
                pool_window_2_V_reg_766 <= kernel_data_V_6_12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_151 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_151;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_fu_354_p2))) then
                icmp_ln1496_1_reg_806 <= icmp_ln1496_1_fu_371_p2;
                icmp_ln1496_24_reg_800 <= icmp_ln1496_24_fu_366_p2;
                icmp_ln1496_26_reg_812 <= icmp_ln1496_26_fu_377_p2;
                icmp_ln1496_28_reg_824 <= icmp_ln1496_28_fu_388_p2;
                icmp_ln1496_2_reg_818 <= icmp_ln1496_2_fu_382_p2;
                icmp_ln1496_30_reg_830 <= icmp_ln1496_30_fu_393_p2;
                icmp_ln1496_31_reg_836 <= icmp_ln1496_31_fu_399_p2;
                icmp_ln1496_reg_794 <= icmp_ln1496_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln212_reg_842 <= icmp_ln212_fu_404_p2;
                icmp_ln241_reg_673 <= icmp_ln241_fu_162_p2;
                icmp_ln241_reg_673_pp0_iter1_reg <= icmp_ln241_reg_673;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_404_p2 = ap_const_lv1_1))) then
                icmp_ln216_reg_851 <= icmp_ln216_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then
                kernel_data_V_6_12 <= pool_window_3_V_reg_682;
                kernel_data_V_6_13 <= pool_window_3_V_8_reg_691;
                kernel_data_V_6_14 <= pool_window_3_V_9_reg_700;
                kernel_data_V_6_15 <= pool_window_3_V_10_reg_709;
                kernel_data_V_6_4 <= line_buffer_Array_V_6_0_0_q0;
                kernel_data_V_6_5 <= line_buffer_Array_V_6_0_1_q0;
                kernel_data_V_6_6 <= line_buffer_Array_V_6_0_2_q0;
                kernel_data_V_6_7 <= line_buffer_Array_V_6_0_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then
                pool_window_3_V_10_reg_709 <= data_V_data_3_V_dout;
                pool_window_3_V_8_reg_691 <= data_V_data_1_V_dout;
                pool_window_3_V_9_reg_700 <= data_V_data_2_V_dout;
                pool_window_3_V_reg_682 <= data_V_data_0_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                pool_window_3_V_10_reg_709_pp0_iter1_reg <= pool_window_3_V_10_reg_709;
                pool_window_3_V_8_reg_691_pp0_iter1_reg <= pool_window_3_V_8_reg_691;
                pool_window_3_V_9_reg_700_pp0_iter1_reg <= pool_window_3_V_9_reg_700;
                pool_window_3_V_reg_682_pp0_iter1_reg <= pool_window_3_V_reg_682;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_reg_842 = ap_const_lv1_1))) then
                sY_3 <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_151;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_404_p2 = ap_const_lv1_1) and (icmp_ln216_fu_448_p2 = ap_const_lv1_0) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then
                select_ln222_reg_855 <= select_ln222_fu_472_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_404_p2 = ap_const_lv1_0))) then
                select_ln227_reg_846 <= select_ln227_fu_428_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln191_4_reg_790))) then
                select_ln66_34_reg_860 <= select_ln66_34_fu_506_p3;
                select_ln66_39_reg_865 <= select_ln66_39_fu_540_p3;
                select_ln66_44_reg_870 <= select_ln66_44_fu_574_p3;
                select_ln66_46_reg_875 <= select_ln66_46_fu_608_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln241_fu_162_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_fu_162_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_fu_162_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln220_fu_454_p2 <= std_logic_vector(unsigned(pY_3) + unsigned(ap_const_lv32_1));
    add_ln222_fu_466_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_sY_3_load) + unsigned(ap_const_lv32_1));
    add_ln225_fu_410_p2 <= std_logic_vector(unsigned(pX_3) + unsigned(ap_const_lv32_1));
    add_ln227_fu_422_p2 <= std_logic_vector(unsigned(sX_3) + unsigned(ap_const_lv32_1));
    add_ln241_fu_168_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_144_p4) + unsigned(ap_const_lv11_1));
    and_ln191_3_fu_348_p2 <= (icmp_ln191_6_fu_336_p2 and icmp_ln191_5_fu_326_p2);
    and_ln191_4_fu_354_p2 <= (and_ln191_fu_342_p2 and and_ln191_3_fu_348_p2);
    and_ln191_fu_342_p2 <= (icmp_ln191_fu_306_p2 and icmp_ln191_4_fu_316_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_4_reg_790, io_acc_block_signal_op118)
    begin
                ap_block_pp0_stage0_01001 <= ((io_acc_block_signal_op118 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_4_reg_790));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_4_reg_790, io_acc_block_signal_op118)
    begin
                ap_block_pp0_stage0_11001 <= ((io_acc_block_signal_op118 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_4_reg_790));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_4_reg_790, io_acc_block_signal_op118)
    begin
                ap_block_pp0_stage0_subdone <= ((io_acc_block_signal_op118 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_4_reg_790));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln241_reg_673, io_acc_block_signal_op21)
    begin
                ap_block_pp0_stage1_11001 <= ((io_acc_block_signal_op21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_reg_673 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln241_reg_673, io_acc_block_signal_op21)
    begin
                ap_block_pp0_stage1_subdone <= ((io_acc_block_signal_op21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_reg_673 = ap_const_lv1_0));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(icmp_ln241_reg_673, io_acc_block_signal_op21)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((io_acc_block_signal_op21 = ap_const_logic_0) and (icmp_ln241_reg_673 = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter2_assign_proc : process(and_ln191_4_reg_790, io_acc_block_signal_op118)
    begin
                ap_block_state6_pp0_stage0_iter2 <= ((io_acc_block_signal_op118 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_4_reg_790));
    end process;


    ap_condition_263_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln212_fu_404_p2)
    begin
                ap_condition_263 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_404_p2 = ap_const_lv1_1));
    end process;


    ap_condition_269_assign_proc : process(icmp_ln241_reg_673, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln212_fu_404_p2, icmp_ln216_fu_448_p2)
    begin
                ap_condition_269 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_404_p2 = ap_const_lv1_1) and (icmp_ln216_fu_448_p2 = ap_const_lv1_0) and (icmp_ln241_reg_673 = ap_const_lv1_0));
    end process;


    ap_condition_303_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_303 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_313_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_313 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001));
    end process;


    ap_condition_318_assign_proc : process(icmp_ln241_reg_673_pp0_iter1_reg, icmp_ln212_reg_842, icmp_ln216_reg_851)
    begin
                ap_condition_318 <= ((icmp_ln212_reg_842 = ap_const_lv1_1) and (icmp_ln216_reg_851 = ap_const_lv1_0) and (icmp_ln241_reg_673_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_322_assign_proc : process(icmp_ln241_reg_673_pp0_iter1_reg, icmp_ln212_reg_842, icmp_ln216_reg_851)
    begin
                ap_condition_322 <= ((icmp_ln216_reg_851 = ap_const_lv1_1) and (icmp_ln212_reg_842 = ap_const_lv1_1) and (icmp_ln241_reg_673_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_671_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln241_reg_673_pp0_iter1_reg, ap_block_pp0_stage1_11001, icmp_ln212_reg_842, icmp_ln216_reg_851)
    begin
                ap_condition_671 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln216_reg_851 = ap_const_lv1_1) and (icmp_ln212_reg_842 = ap_const_lv1_1) and (icmp_ln241_reg_673_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_676_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln212_reg_842)
    begin
                ap_condition_676 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln212_reg_842 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln241_fu_162_p2)
    begin
        if ((icmp_ln241_fu_162_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_144_p4_assign_proc : process(icmp_ln241_reg_673, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, indvar_flatten_reg_140, add_ln241_reg_677, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_144_p4 <= add_ln241_reg_677;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_144_p4 <= indvar_flatten_reg_140;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_i_i_reg_151 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_sig_allocacmp_sY_3_load_assign_proc : process(sY_3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln212_reg_842, ap_phi_reg_pp0_iter2_storemerge_i_i_reg_151)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln212_reg_842 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_sY_3_load <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_151;
        else 
            ap_sig_allocacmp_sY_3_load <= sY_3;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_673)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln241_reg_673 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_673, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_673)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln241_reg_673 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_673, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_673)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln241_reg_673 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_673, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_673)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln241_reg_673 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_673, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_1_fu_371_p2 <= "1" when (signed(kernel_data_V_6_5) < signed(line_buffer_Array_V_6_0_1_q0)) else "0";
    icmp_ln1496_24_fu_366_p2 <= "1" when (signed(kernel_data_V_6_12) < signed(pool_window_3_V_reg_682)) else "0";
    icmp_ln1496_25_fu_497_p2 <= "1" when (signed(select_ln66_fu_480_p3) < signed(select_ln66_33_fu_492_p3)) else "0";
    icmp_ln1496_26_fu_377_p2 <= "1" when (signed(kernel_data_V_6_13) < signed(pool_window_3_V_8_reg_691)) else "0";
    icmp_ln1496_27_fu_531_p2 <= "1" when (signed(select_ln66_35_fu_514_p3) < signed(select_ln66_37_fu_526_p3)) else "0";
    icmp_ln1496_28_fu_388_p2 <= "1" when (signed(kernel_data_V_6_14) < signed(pool_window_3_V_9_reg_700)) else "0";
    icmp_ln1496_29_fu_565_p2 <= "1" when (signed(select_ln66_38_fu_548_p3) < signed(select_ln66_40_fu_560_p3)) else "0";
    icmp_ln1496_2_fu_382_p2 <= "1" when (signed(kernel_data_V_6_6) < signed(line_buffer_Array_V_6_0_2_q0)) else "0";
    icmp_ln1496_30_fu_393_p2 <= "1" when (signed(kernel_data_V_6_7) < signed(line_buffer_Array_V_6_0_3_q0)) else "0";
    icmp_ln1496_31_fu_399_p2 <= "1" when (signed(kernel_data_V_6_15) < signed(pool_window_3_V_10_reg_709)) else "0";
    icmp_ln1496_32_fu_599_p2 <= "1" when (signed(select_ln66_41_fu_582_p3) < signed(select_ln66_43_fu_594_p3)) else "0";
    icmp_ln1496_fu_360_p2 <= "1" when (signed(kernel_data_V_6_4) < signed(line_buffer_Array_V_6_0_0_q0)) else "0";
    icmp_ln191_4_fu_316_p2 <= "1" when (ap_sig_allocacmp_sY_3_load = ap_const_lv32_1) else "0";
    icmp_ln191_5_fu_326_p2 <= "1" when (signed(pY_3) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_6_fu_336_p2 <= "1" when (signed(pX_3) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_fu_306_p2 <= "1" when (sX_3 = ap_const_lv32_1) else "0";
    icmp_ln212_fu_404_p2 <= "1" when (pX_3 = ap_const_lv32_1F) else "0";
    icmp_ln216_fu_448_p2 <= "1" when (pY_3 = ap_const_lv32_1F) else "0";
    icmp_ln241_fu_162_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_144_p4 = ap_const_lv11_400) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op118 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op21 <= (data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);

    line_buffer_Array_V_6_0_0_ce0_assign_proc : process(icmp_ln241_reg_673, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then 
            line_buffer_Array_V_6_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_6_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_6_0_0_we0_assign_proc : process(icmp_ln241_reg_673, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then 
            line_buffer_Array_V_6_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_6_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_6_0_1_ce0_assign_proc : process(icmp_ln241_reg_673, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then 
            line_buffer_Array_V_6_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_6_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_6_0_1_we0_assign_proc : process(icmp_ln241_reg_673, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then 
            line_buffer_Array_V_6_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_6_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_6_0_2_ce0_assign_proc : process(icmp_ln241_reg_673, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then 
            line_buffer_Array_V_6_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_6_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_6_0_2_we0_assign_proc : process(icmp_ln241_reg_673, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then 
            line_buffer_Array_V_6_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_6_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_6_0_3_ce0_assign_proc : process(icmp_ln241_reg_673, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then 
            line_buffer_Array_V_6_0_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_6_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_6_0_3_we0_assign_proc : process(icmp_ln241_reg_673, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_673 = ap_const_lv1_0))) then 
            line_buffer_Array_V_6_0_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_6_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln191_4_reg_790)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln191_4_reg_790) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_fu_627_p6;

    res_V_data_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_4_reg_790, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_790))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln191_4_reg_790)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln191_4_reg_790) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_data_1_V_fu_637_p6;

    res_V_data_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_4_reg_790, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_790))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln191_4_reg_790)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln191_4_reg_790) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_data_2_V_fu_647_p6;

    res_V_data_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_4_reg_790, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_790))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln191_4_reg_790)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln191_4_reg_790) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_data_3_V_fu_657_p6;

    res_V_data_3_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_4_reg_790, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_790))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln222_fu_472_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_4_fu_316_p2(0) = '1') else 
        add_ln222_fu_466_p2;
    select_ln227_fu_428_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_fu_306_p2(0) = '1') else 
        add_ln227_fu_422_p2;
    select_ln66_32_fu_485_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_24_reg_800(0) = '1') else 
        ap_const_lv2_2;
    select_ln66_33_fu_492_p3 <= 
        pool_window_3_V_reg_682 when (icmp_ln1496_24_reg_800(0) = '1') else 
        pool_window_2_V_reg_766;
    select_ln66_34_fu_506_p3 <= 
        select_ln66_32_fu_485_p3 when (icmp_ln1496_25_fu_497_p2(0) = '1') else 
        zext_ln66_fu_503_p1;
    select_ln66_35_fu_514_p3 <= 
        pool_window_1_V_8_reg_724 when (icmp_ln1496_1_reg_806(0) = '1') else 
        pool_window_0_V_8_reg_748;
    select_ln66_36_fu_519_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_26_reg_812(0) = '1') else 
        ap_const_lv2_2;
    select_ln66_37_fu_526_p3 <= 
        pool_window_3_V_8_reg_691 when (icmp_ln1496_26_reg_812(0) = '1') else 
        pool_window_2_V_8_reg_772;
    select_ln66_38_fu_548_p3 <= 
        pool_window_1_V_9_reg_730 when (icmp_ln1496_2_reg_818(0) = '1') else 
        pool_window_0_V_9_reg_754;
    select_ln66_39_fu_540_p3 <= 
        select_ln66_36_fu_519_p3 when (icmp_ln1496_27_fu_531_p2(0) = '1') else 
        zext_ln66_8_fu_537_p1;
    select_ln66_40_fu_560_p3 <= 
        pool_window_3_V_9_reg_700 when (icmp_ln1496_28_reg_824(0) = '1') else 
        pool_window_2_V_9_reg_778;
    select_ln66_41_fu_582_p3 <= 
        pool_window_1_V_10_reg_736 when (icmp_ln1496_30_reg_830(0) = '1') else 
        pool_window_0_V_10_reg_760;
    select_ln66_42_fu_553_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_28_reg_824(0) = '1') else 
        ap_const_lv2_2;
    select_ln66_43_fu_594_p3 <= 
        pool_window_3_V_10_reg_709 when (icmp_ln1496_31_reg_836(0) = '1') else 
        pool_window_2_V_10_reg_784;
    select_ln66_44_fu_574_p3 <= 
        select_ln66_42_fu_553_p3 when (icmp_ln1496_29_fu_565_p2(0) = '1') else 
        zext_ln66_9_fu_571_p1;
    select_ln66_45_fu_587_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_31_reg_836(0) = '1') else 
        ap_const_lv2_2;
    select_ln66_46_fu_608_p3 <= 
        select_ln66_45_fu_587_p3 when (icmp_ln1496_32_fu_599_p2(0) = '1') else 
        zext_ln66_10_fu_605_p1;
    select_ln66_fu_480_p3 <= 
        pool_window_1_V_reg_718 when (icmp_ln1496_reg_794(0) = '1') else 
        pool_window_0_V_reg_742;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln66_10_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_30_reg_830),2));
    zext_ln66_8_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_1_reg_806),2));
    zext_ln66_9_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_2_reg_818),2));
    zext_ln66_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_reg_794),2));
end behav;
