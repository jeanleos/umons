-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_resource_rf_leq_nin_ap_fixed_ap_fixed_16_6_5_3_0_config18_mult_0_0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    kernel_data_V_5_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_16 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_17 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_18 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_19 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_20 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_21 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_22 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_23 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_24 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_25 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_26 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_27 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_28 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_29 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_30 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_31 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_32 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_33 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_34 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_35 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_36 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_37 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_38 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_39 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_40 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_41 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_42 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_43 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_44 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_45 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_46 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_47 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_48 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_49 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_50 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_51 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_52 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_53 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_54 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_55 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_56 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_57 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_58 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_59 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_60 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_61 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_62 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_63 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_64 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_65 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_66 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_67 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_68 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_69 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_70 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_71 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dense_resource_rf_leq_nin_ap_fixed_ap_fixed_16_6_5_3_0_config18_mult_0_0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_FF56 : STD_LOGIC_VECTOR (15 downto 0) := "1111111101010110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_47 : STD_LOGIC_VECTOR (6 downto 0) := "1000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln46_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w18_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal w18_V_ce0 : STD_LOGIC;
    signal w18_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal in_index7_reg_209 : STD_LOGIC_VECTOR (6 downto 0);
    signal res_V_write_assign5_reg_239 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_index_fu_258_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal in_index_reg_744 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln46_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_749_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_749_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_749_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_749_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_558_p74 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_753 : STD_LOGIC_VECTOR (15 downto 0);
    signal w18_V_load_reg_758 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_733_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_reg_773 : STD_LOGIC_VECTOR (25 downto 0);
    signal acc_0_V_fu_723_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_phi_mux_in_index7_phi_fu_213_p6 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln59_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_714_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_733_ce : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_177 : BOOLEAN;

    component myproject_axi_mux_727_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        din65_WIDTH : INTEGER;
        din66_WIDTH : INTEGER;
        din67_WIDTH : INTEGER;
        din68_WIDTH : INTEGER;
        din69_WIDTH : INTEGER;
        din70_WIDTH : INTEGER;
        din71_WIDTH : INTEGER;
        din72_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (15 downto 0);
        din59 : IN STD_LOGIC_VECTOR (15 downto 0);
        din60 : IN STD_LOGIC_VECTOR (15 downto 0);
        din61 : IN STD_LOGIC_VECTOR (15 downto 0);
        din62 : IN STD_LOGIC_VECTOR (15 downto 0);
        din63 : IN STD_LOGIC_VECTOR (15 downto 0);
        din64 : IN STD_LOGIC_VECTOR (15 downto 0);
        din65 : IN STD_LOGIC_VECTOR (15 downto 0);
        din66 : IN STD_LOGIC_VECTOR (15 downto 0);
        din67 : IN STD_LOGIC_VECTOR (15 downto 0);
        din68 : IN STD_LOGIC_VECTOR (15 downto 0);
        din69 : IN STD_LOGIC_VECTOR (15 downto 0);
        din70 : IN STD_LOGIC_VECTOR (15 downto 0);
        din71 : IN STD_LOGIC_VECTOR (15 downto 0);
        din72 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_axi_mul_mul_16s_11s_26_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component dense_resource_rf_leq_nin_ap_fixed_ap_fixed_16_6_5_3_0_config18_mult_0_0_w18_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    w18_V_U : component dense_resource_rf_leq_nin_ap_fixed_ap_fixed_16_6_5_3_0_config18_mult_0_0_w18_V
    generic map (
        DataWidth => 11,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w18_V_address0,
        ce0 => w18_V_ce0,
        q0 => w18_V_q0);

    myproject_axi_mux_727_16_1_1_U1413 : component myproject_axi_mux_727_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 16,
        din59_WIDTH => 16,
        din60_WIDTH => 16,
        din61_WIDTH => 16,
        din62_WIDTH => 16,
        din63_WIDTH => 16,
        din64_WIDTH => 16,
        din65_WIDTH => 16,
        din66_WIDTH => 16,
        din67_WIDTH => 16,
        din68_WIDTH => 16,
        din69_WIDTH => 16,
        din70_WIDTH => 16,
        din71_WIDTH => 16,
        din72_WIDTH => 7,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_5_0,
        din1 => kernel_data_V_5_1,
        din2 => kernel_data_V_5_2,
        din3 => kernel_data_V_5_3,
        din4 => kernel_data_V_5_4,
        din5 => kernel_data_V_5_5,
        din6 => kernel_data_V_5_6,
        din7 => kernel_data_V_5_7,
        din8 => kernel_data_V_5_8,
        din9 => kernel_data_V_5_9,
        din10 => kernel_data_V_5_10,
        din11 => kernel_data_V_5_11,
        din12 => kernel_data_V_5_12,
        din13 => kernel_data_V_5_13,
        din14 => kernel_data_V_5_14,
        din15 => kernel_data_V_5_15,
        din16 => kernel_data_V_5_16,
        din17 => kernel_data_V_5_17,
        din18 => kernel_data_V_5_18,
        din19 => kernel_data_V_5_19,
        din20 => kernel_data_V_5_20,
        din21 => kernel_data_V_5_21,
        din22 => kernel_data_V_5_22,
        din23 => kernel_data_V_5_23,
        din24 => kernel_data_V_5_24,
        din25 => kernel_data_V_5_25,
        din26 => kernel_data_V_5_26,
        din27 => kernel_data_V_5_27,
        din28 => kernel_data_V_5_28,
        din29 => kernel_data_V_5_29,
        din30 => kernel_data_V_5_30,
        din31 => kernel_data_V_5_31,
        din32 => kernel_data_V_5_32,
        din33 => kernel_data_V_5_33,
        din34 => kernel_data_V_5_34,
        din35 => kernel_data_V_5_35,
        din36 => kernel_data_V_5_36,
        din37 => kernel_data_V_5_37,
        din38 => kernel_data_V_5_38,
        din39 => kernel_data_V_5_39,
        din40 => kernel_data_V_5_40,
        din41 => kernel_data_V_5_41,
        din42 => kernel_data_V_5_42,
        din43 => kernel_data_V_5_43,
        din44 => kernel_data_V_5_44,
        din45 => kernel_data_V_5_45,
        din46 => kernel_data_V_5_46,
        din47 => kernel_data_V_5_47,
        din48 => kernel_data_V_5_48,
        din49 => kernel_data_V_5_49,
        din50 => kernel_data_V_5_50,
        din51 => kernel_data_V_5_51,
        din52 => kernel_data_V_5_52,
        din53 => kernel_data_V_5_53,
        din54 => kernel_data_V_5_54,
        din55 => kernel_data_V_5_55,
        din56 => kernel_data_V_5_56,
        din57 => kernel_data_V_5_57,
        din58 => kernel_data_V_5_58,
        din59 => kernel_data_V_5_59,
        din60 => kernel_data_V_5_60,
        din61 => kernel_data_V_5_61,
        din62 => kernel_data_V_5_62,
        din63 => kernel_data_V_5_63,
        din64 => kernel_data_V_5_64,
        din65 => kernel_data_V_5_65,
        din66 => kernel_data_V_5_66,
        din67 => kernel_data_V_5_67,
        din68 => kernel_data_V_5_68,
        din69 => kernel_data_V_5_69,
        din70 => kernel_data_V_5_70,
        din71 => kernel_data_V_5_71,
        din72 => in_index7_reg_209,
        dout => tmp_fu_558_p74);

    myproject_axi_mul_mul_16s_11s_26_3_1_U1414 : component myproject_axi_mul_mul_16s_11s_26_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_753,
        din1 => w18_V_load_reg_758,
        ce => grp_fu_733_ce,
        dout => grp_fu_733_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln46_reg_749_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
                    ap_return_preg <= acc_0_V_fu_723_p2;
                end if; 
            end if;
        end if;
    end process;


    in_index7_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_749 = ap_const_lv1_0))) then 
                in_index7_reg_209 <= in_index_reg_744;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln46_reg_749 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                in_index7_reg_209 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    res_V_write_assign5_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln46_reg_749_pp0_iter4_reg = ap_const_lv1_0))) then 
                res_V_write_assign5_reg_239 <= acc_0_V_fu_723_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln46_reg_749_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_V_write_assign5_reg_239 <= ap_const_lv16_FF56;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln46_reg_749 <= icmp_ln46_fu_264_p2;
                icmp_ln46_reg_749_pp0_iter1_reg <= icmp_ln46_reg_749;
                tmp_reg_753 <= tmp_fu_558_p74;
                w18_V_load_reg_758 <= w18_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln46_reg_749_pp0_iter2_reg <= icmp_ln46_reg_749_pp0_iter1_reg;
                icmp_ln46_reg_749_pp0_iter3_reg <= icmp_ln46_reg_749_pp0_iter2_reg;
                icmp_ln46_reg_749_pp0_iter4_reg <= icmp_ln46_reg_749_pp0_iter3_reg;
                r_V_reg_773 <= grp_fu_733_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                in_index_reg_744 <= in_index_fu_258_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    acc_0_V_fu_723_p2 <= std_logic_vector(unsigned(trunc_ln_fu_714_p4) + unsigned(res_V_write_assign5_reg_239));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_177_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_177 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_pp0_stage0_11001, icmp_ln46_reg_749_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln46_reg_749_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_in_index7_phi_fu_213_p6_assign_proc : process(in_index7_reg_209, in_index_reg_744, icmp_ln46_reg_749, ap_condition_177)
    begin
        if ((ap_const_boolean_1 = ap_condition_177)) then
            if ((icmp_ln46_reg_749 = ap_const_lv1_1)) then 
                ap_phi_mux_in_index7_phi_fu_213_p6 <= ap_const_lv7_0;
            elsif ((icmp_ln46_reg_749 = ap_const_lv1_0)) then 
                ap_phi_mux_in_index7_phi_fu_213_p6 <= in_index_reg_744;
            else 
                ap_phi_mux_in_index7_phi_fu_213_p6 <= in_index7_reg_209;
            end if;
        else 
            ap_phi_mux_in_index7_phi_fu_213_p6 <= in_index7_reg_209;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln46_fu_264_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln46_fu_264_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to4)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln46_reg_749_pp0_iter4_reg, acc_0_V_fu_723_p2, ap_enable_reg_pp0_iter5, ap_return_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln46_reg_749_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            ap_return <= acc_0_V_fu_723_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    grp_fu_733_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_733_ce <= ap_const_logic_1;
        else 
            grp_fu_733_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln46_fu_264_p2 <= "1" when (ap_phi_mux_in_index7_phi_fu_213_p6 = ap_const_lv7_47) else "0";
    in_index_fu_258_p2 <= std_logic_vector(unsigned(ap_phi_mux_in_index7_phi_fu_213_p6) + unsigned(ap_const_lv7_1));
    trunc_ln_fu_714_p4 <= r_V_reg_773(25 downto 10);
    w18_V_address0 <= zext_ln59_fu_253_p1(7 - 1 downto 0);

    w18_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w18_V_ce0 <= ap_const_logic_1;
        else 
            w18_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln59_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_in_index7_phi_fu_213_p6),64));
end behav;
