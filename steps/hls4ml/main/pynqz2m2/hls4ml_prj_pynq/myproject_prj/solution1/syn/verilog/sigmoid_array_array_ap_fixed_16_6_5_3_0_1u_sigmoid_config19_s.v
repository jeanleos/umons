// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sigmoid_array_array_ap_fixed_16_6_5_3_0_1u_sigmoid_config19_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_data_V_dout,
        data_V_data_V_empty_n,
        data_V_data_V_read,
        res_V_data_V_din,
        res_V_data_V_full_n,
        res_V_data_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_data_V_dout;
input   data_V_data_V_empty_n;
output   data_V_data_V_read;
output  [15:0] res_V_data_V_din;
input   res_V_data_V_full_n;
output   res_V_data_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_V_read;
reg res_V_data_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] sigmoid_table1_address0;
reg    sigmoid_table1_ce0;
wire   [9:0] sigmoid_table1_q0;
reg    data_V_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln80_reg_274;
reg    res_V_data_V_blk_n;
reg    ap_enable_reg_pp0_iter6;
reg   [0:0] icmp_ln80_reg_274_pp0_iter5_reg;
reg   [10:0] i_0_reg_112;
wire   [0:0] icmp_ln80_fu_123_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
reg    ap_block_state8_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln80_reg_274_pp0_iter1_reg;
reg   [0:0] icmp_ln80_reg_274_pp0_iter2_reg;
reg   [0:0] icmp_ln80_reg_274_pp0_iter3_reg;
reg   [0:0] icmp_ln80_reg_274_pp0_iter4_reg;
wire   [10:0] i_fu_129_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_data_0_V_reg_283;
reg   [11:0] tmp_s_reg_288;
wire   [0:0] icmp_ln851_fu_157_p2;
reg   [0:0] icmp_ln851_reg_293;
wire   [12:0] select_ln850_fu_192_p3;
reg   [12:0] select_ln850_reg_298;
wire   [9:0] select_ln92_1_fu_258_p3;
reg   [9:0] select_ln92_1_reg_304;
reg   [9:0] sigmoid_table1_load_reg_314;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
wire   [63:0] zext_ln96_fu_266_p1;
reg    ap_block_pp0_stage0_01001;
wire   [3:0] trunc_ln851_fu_145_p1;
wire   [9:0] p_Result_3_i_i_i_fu_149_p3;
wire   [25:0] shl_ln_fu_163_p3;
wire  signed [12:0] sext_ln850_fu_170_p1;
wire   [12:0] add_ln700_fu_179_p2;
wire   [0:0] icmp_ln850_fu_173_p2;
wire   [12:0] select_ln851_fu_185_p3;
wire   [9:0] trunc_ln91_fu_200_p1;
wire   [12:0] add_ln91_fu_203_p2;
wire   [2:0] tmp_2_fu_222_p4;
wire   [0:0] tmp_1_fu_214_p3;
wire   [0:0] xor_ln92_fu_238_p2;
wire   [0:0] icmp_ln94_fu_232_p2;
wire   [0:0] or_ln92_fu_252_p2;
wire   [9:0] select_ln92_fu_244_p3;
wire   [9:0] xor_ln91_fu_208_p2;
wire    ap_CS_fsm_state9;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

sigmoid_array_array_ap_fixed_16_6_5_3_0_1u_sigmoid_config19_s_sigmoid_table1 #(
    .DataWidth( 10 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
sigmoid_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sigmoid_table1_address0),
    .ce0(sigmoid_table1_ce0),
    .q0(sigmoid_table1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln80_fu_123_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_112 <= i_fu_129_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_112 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln80_reg_274 <= icmp_ln80_fu_123_p2;
        icmp_ln80_reg_274_pp0_iter1_reg <= icmp_ln80_reg_274;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln80_reg_274_pp0_iter2_reg <= icmp_ln80_reg_274_pp0_iter1_reg;
        icmp_ln80_reg_274_pp0_iter3_reg <= icmp_ln80_reg_274_pp0_iter2_reg;
        icmp_ln80_reg_274_pp0_iter4_reg <= icmp_ln80_reg_274_pp0_iter3_reg;
        icmp_ln80_reg_274_pp0_iter5_reg <= icmp_ln80_reg_274_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln80_reg_274 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln851_reg_293 <= icmp_ln851_fu_157_p2;
        tmp_data_0_V_reg_283 <= data_V_data_V_dout;
        tmp_s_reg_288 <= {{data_V_data_V_dout[15:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln80_reg_274_pp0_iter1_reg == 1'd0))) begin
        select_ln850_reg_298 <= select_ln850_fu_192_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln80_reg_274_pp0_iter2_reg == 1'd0))) begin
        select_ln92_1_reg_304 <= select_ln92_1_fu_258_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln80_reg_274_pp0_iter4_reg == 1'd0))) begin
        sigmoid_table1_load_reg_314 <= sigmoid_table1_q0;
    end
end

always @ (*) begin
    if ((icmp_ln80_fu_123_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_274 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_V_blk_n = data_V_data_V_empty_n;
    end else begin
        data_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln80_reg_274 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_V_read = 1'b1;
    end else begin
        data_V_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_274_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_V_blk_n = res_V_data_V_full_n;
    end else begin
        res_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln80_reg_274_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_V_write = 1'b1;
    end else begin
        res_V_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        sigmoid_table1_ce0 = 1'b1;
    end else begin
        sigmoid_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln80_fu_123_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln80_fu_123_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_fu_179_p2 = ($signed(13'd1) + $signed(sext_ln850_fu_170_p1));

assign add_ln91_fu_203_p2 = (13'd512 + select_ln850_reg_298);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln80_reg_274_pp0_iter5_reg == 1'd0) & (res_V_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((icmp_ln80_reg_274 == 1'd0) & (data_V_data_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln80_reg_274_pp0_iter5_reg == 1'd0) & (res_V_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((icmp_ln80_reg_274 == 1'd0) & (data_V_data_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln80_reg_274_pp0_iter5_reg == 1'd0) & (res_V_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((icmp_ln80_reg_274 == 1'd0) & (data_V_data_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln80_reg_274 == 1'd0) & (data_V_data_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter6 = ((icmp_ln80_reg_274_pp0_iter5_reg == 1'd0) & (res_V_data_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_129_p2 = (i_0_reg_112 + 11'd1);

assign icmp_ln80_fu_123_p2 = ((i_0_reg_112 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln850_fu_173_p2 = (($signed(shl_ln_fu_163_p3) < $signed(26'd67108849)) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_157_p2 = ((p_Result_3_i_i_i_fu_149_p3 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_232_p2 = ((tmp_2_fu_222_p4 != 3'd0) ? 1'b1 : 1'b0);

assign or_ln92_fu_252_p2 = (tmp_1_fu_214_p3 | icmp_ln94_fu_232_p2);

assign p_Result_3_i_i_i_fu_149_p3 = {{trunc_ln851_fu_145_p1}, {6'd0}};

assign res_V_data_V_din = sigmoid_table1_load_reg_314;

assign select_ln850_fu_192_p3 = ((icmp_ln850_fu_173_p2[0:0] === 1'b1) ? select_ln851_fu_185_p3 : sext_ln850_fu_170_p1);

assign select_ln851_fu_185_p3 = ((icmp_ln851_reg_293[0:0] === 1'b1) ? sext_ln850_fu_170_p1 : add_ln700_fu_179_p2);

assign select_ln92_1_fu_258_p3 = ((or_ln92_fu_252_p2[0:0] === 1'b1) ? select_ln92_fu_244_p3 : xor_ln91_fu_208_p2);

assign select_ln92_fu_244_p3 = ((xor_ln92_fu_238_p2[0:0] === 1'b1) ? 10'd1023 : 10'd0);

assign sext_ln850_fu_170_p1 = $signed(tmp_s_reg_288);

assign shl_ln_fu_163_p3 = {{tmp_data_0_V_reg_283}, {10'd0}};

assign sigmoid_table1_address0 = zext_ln96_fu_266_p1;

assign tmp_1_fu_214_p3 = add_ln91_fu_203_p2[32'd12];

assign tmp_2_fu_222_p4 = {{add_ln91_fu_203_p2[12:10]}};

assign trunc_ln851_fu_145_p1 = data_V_data_V_dout[3:0];

assign trunc_ln91_fu_200_p1 = select_ln850_reg_298[9:0];

assign xor_ln91_fu_208_p2 = (trunc_ln91_fu_200_p1 ^ 10'd512);

assign xor_ln92_fu_238_p2 = (tmp_1_fu_214_p3 ^ 1'd1);

assign zext_ln96_fu_266_p1 = select_ln92_1_reg_304;

endmodule //sigmoid_array_array_ap_fixed_16_6_5_3_0_1u_sigmoid_config19_s
