// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX_3;
reg   [31:0] sX_3;
reg   [31:0] pY_3;
reg   [31:0] sY_3;
reg   [15:0] kernel_data_V_6_4;
reg   [15:0] kernel_data_V_6_5;
reg   [15:0] kernel_data_V_6_6;
reg   [15:0] kernel_data_V_6_7;
reg   [15:0] kernel_data_V_6_12;
reg   [15:0] kernel_data_V_6_13;
reg   [15:0] kernel_data_V_6_14;
reg   [15:0] kernel_data_V_6_15;
reg    line_buffer_Array_V_6_0_0_ce0;
reg    line_buffer_Array_V_6_0_0_we0;
wire   [15:0] line_buffer_Array_V_6_0_0_q0;
reg    line_buffer_Array_V_6_0_1_ce0;
reg    line_buffer_Array_V_6_0_1_we0;
wire   [15:0] line_buffer_Array_V_6_0_1_q0;
reg    line_buffer_Array_V_6_0_2_ce0;
reg    line_buffer_Array_V_6_0_2_we0;
wire   [15:0] line_buffer_Array_V_6_0_2_q0;
reg    line_buffer_Array_V_6_0_3_ce0;
reg    line_buffer_Array_V_6_0_3_we0;
wire   [15:0] line_buffer_Array_V_6_0_3_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln241_reg_673;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] and_ln191_4_reg_790;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [10:0] indvar_flatten_reg_140;
wire   [0:0] icmp_ln241_fu_162_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    io_acc_block_signal_op118;
reg    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln241_reg_673_pp0_iter1_reg;
wire   [10:0] add_ln241_fu_168_p2;
reg   [10:0] add_ln241_reg_677;
reg   [15:0] pool_window_3_V_reg_682;
wire    io_acc_block_signal_op21;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [15:0] pool_window_3_V_reg_682_pp0_iter1_reg;
reg   [15:0] pool_window_3_V_8_reg_691;
reg   [15:0] pool_window_3_V_8_reg_691_pp0_iter1_reg;
reg   [15:0] pool_window_3_V_9_reg_700;
reg   [15:0] pool_window_3_V_9_reg_700_pp0_iter1_reg;
reg   [15:0] pool_window_3_V_10_reg_709;
reg   [15:0] pool_window_3_V_10_reg_709_pp0_iter1_reg;
reg   [15:0] pool_window_1_V_reg_718;
reg   [15:0] pool_window_1_V_8_reg_724;
reg   [15:0] pool_window_1_V_9_reg_730;
reg   [15:0] pool_window_1_V_10_reg_736;
reg   [15:0] pool_window_0_V_reg_742;
reg   [15:0] pool_window_0_V_8_reg_748;
reg   [15:0] pool_window_0_V_9_reg_754;
reg   [15:0] pool_window_0_V_10_reg_760;
reg   [15:0] pool_window_2_V_reg_766;
reg   [15:0] pool_window_2_V_8_reg_772;
reg   [15:0] pool_window_2_V_9_reg_778;
reg   [15:0] pool_window_2_V_10_reg_784;
wire   [0:0] and_ln191_4_fu_354_p2;
wire   [0:0] icmp_ln1496_fu_360_p2;
reg   [0:0] icmp_ln1496_reg_794;
wire   [0:0] icmp_ln1496_24_fu_366_p2;
reg   [0:0] icmp_ln1496_24_reg_800;
wire   [0:0] icmp_ln1496_1_fu_371_p2;
reg   [0:0] icmp_ln1496_1_reg_806;
wire   [0:0] icmp_ln1496_26_fu_377_p2;
reg   [0:0] icmp_ln1496_26_reg_812;
wire   [0:0] icmp_ln1496_2_fu_382_p2;
reg   [0:0] icmp_ln1496_2_reg_818;
wire   [0:0] icmp_ln1496_28_fu_388_p2;
reg   [0:0] icmp_ln1496_28_reg_824;
wire   [0:0] icmp_ln1496_30_fu_393_p2;
reg   [0:0] icmp_ln1496_30_reg_830;
wire   [0:0] icmp_ln1496_31_fu_399_p2;
reg   [0:0] icmp_ln1496_31_reg_836;
wire   [0:0] icmp_ln212_fu_404_p2;
reg   [0:0] icmp_ln212_reg_842;
wire   [31:0] select_ln227_fu_428_p3;
reg   [31:0] select_ln227_reg_846;
wire   [0:0] icmp_ln216_fu_448_p2;
reg   [0:0] icmp_ln216_reg_851;
wire   [31:0] select_ln222_fu_472_p3;
reg   [31:0] select_ln222_reg_855;
wire   [1:0] select_ln66_34_fu_506_p3;
reg   [1:0] select_ln66_34_reg_860;
wire   [1:0] select_ln66_39_fu_540_p3;
reg   [1:0] select_ln66_39_reg_865;
wire   [1:0] select_ln66_44_fu_574_p3;
reg   [1:0] select_ln66_44_reg_870;
wire   [1:0] select_ln66_46_fu_608_p3;
reg   [1:0] select_ln66_46_reg_875;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
reg   [10:0] ap_phi_mux_indvar_flatten_phi_fu_144_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_151;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_151;
reg   [31:0] ap_phi_reg_pp0_iter2_storemerge_i_i_reg_151;
wire   [31:0] add_ln225_fu_410_p2;
wire   [31:0] add_ln220_fu_454_p2;
reg   [31:0] ap_sig_allocacmp_sY_3_load;
wire   [15:0] tmp_data_0_V_fu_627_p6;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] tmp_data_1_V_fu_637_p6;
wire   [15:0] tmp_data_2_V_fu_647_p6;
wire   [15:0] tmp_data_3_V_fu_657_p6;
wire   [0:0] icmp_ln191_fu_306_p2;
wire   [0:0] icmp_ln191_4_fu_316_p2;
wire   [0:0] icmp_ln191_5_fu_326_p2;
wire   [0:0] icmp_ln191_6_fu_336_p2;
wire   [0:0] and_ln191_3_fu_348_p2;
wire   [0:0] and_ln191_fu_342_p2;
wire   [31:0] add_ln227_fu_422_p2;
wire   [31:0] add_ln222_fu_466_p2;
wire   [15:0] select_ln66_fu_480_p3;
wire   [15:0] select_ln66_33_fu_492_p3;
wire   [0:0] icmp_ln1496_25_fu_497_p2;
wire   [1:0] select_ln66_32_fu_485_p3;
wire   [1:0] zext_ln66_fu_503_p1;
wire   [15:0] select_ln66_35_fu_514_p3;
wire   [15:0] select_ln66_37_fu_526_p3;
wire   [0:0] icmp_ln1496_27_fu_531_p2;
wire   [1:0] select_ln66_36_fu_519_p3;
wire   [1:0] zext_ln66_8_fu_537_p1;
wire   [15:0] select_ln66_38_fu_548_p3;
wire   [15:0] select_ln66_40_fu_560_p3;
wire   [0:0] icmp_ln1496_29_fu_565_p2;
wire   [1:0] select_ln66_42_fu_553_p3;
wire   [1:0] zext_ln66_9_fu_571_p1;
wire   [15:0] select_ln66_41_fu_582_p3;
wire   [15:0] select_ln66_43_fu_594_p3;
wire   [0:0] icmp_ln1496_32_fu_599_p2;
wire   [1:0] select_ln66_45_fu_587_p3;
wire   [1:0] zext_ln66_10_fu_605_p1;
wire    ap_CS_fsm_state7;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_318;
reg    ap_condition_322;
reg    ap_condition_313;
reg    ap_condition_303;
reg    ap_condition_269;
reg    ap_condition_671;
reg    ap_condition_263;
reg    ap_condition_676;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 pX_3 = 32'd0;
#0 sX_3 = 32'd0;
#0 pY_3 = 32'd0;
#0 sY_3 = 32'd0;
#0 kernel_data_V_6_4 = 16'd0;
#0 kernel_data_V_6_5 = 16'd0;
#0 kernel_data_V_6_6 = 16'd0;
#0 kernel_data_V_6_7 = 16'd0;
#0 kernel_data_V_6_12 = 16'd0;
#0 kernel_data_V_6_13 = 16'd0;
#0 kernel_data_V_6_14 = 16'd0;
#0 kernel_data_V_6_15 = 16'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_buhbi #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_6_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd31),
    .ce0(line_buffer_Array_V_6_0_0_ce0),
    .we0(line_buffer_Array_V_6_0_0_we0),
    .d0(pool_window_3_V_reg_682),
    .q0(line_buffer_Array_V_6_0_0_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_buhbi #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_6_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd31),
    .ce0(line_buffer_Array_V_6_0_1_ce0),
    .we0(line_buffer_Array_V_6_0_1_we0),
    .d0(pool_window_3_V_8_reg_691),
    .q0(line_buffer_Array_V_6_0_1_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_buhbi #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_6_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd31),
    .ce0(line_buffer_Array_V_6_0_2_ce0),
    .we0(line_buffer_Array_V_6_0_2_we0),
    .d0(pool_window_3_V_9_reg_700),
    .q0(line_buffer_Array_V_6_0_2_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_buhbi #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_6_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd31),
    .ce0(line_buffer_Array_V_6_0_3_ce0),
    .we0(line_buffer_Array_V_6_0_3_we0),
    .d0(pool_window_3_V_10_reg_709),
    .q0(line_buffer_Array_V_6_0_3_q0)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U107(
    .din0(pool_window_0_V_reg_742),
    .din1(pool_window_1_V_reg_718),
    .din2(pool_window_2_V_reg_766),
    .din3(pool_window_3_V_reg_682_pp0_iter1_reg),
    .din4(select_ln66_34_reg_860),
    .dout(tmp_data_0_V_fu_627_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U108(
    .din0(pool_window_0_V_8_reg_748),
    .din1(pool_window_1_V_8_reg_724),
    .din2(pool_window_2_V_8_reg_772),
    .din3(pool_window_3_V_8_reg_691_pp0_iter1_reg),
    .din4(select_ln66_39_reg_865),
    .dout(tmp_data_1_V_fu_637_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U109(
    .din0(pool_window_0_V_9_reg_754),
    .din1(pool_window_1_V_9_reg_730),
    .din2(pool_window_2_V_9_reg_778),
    .din3(pool_window_3_V_9_reg_700_pp0_iter1_reg),
    .din4(select_ln66_44_reg_870),
    .dout(tmp_data_2_V_fu_647_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U110(
    .din0(pool_window_0_V_10_reg_760),
    .din1(pool_window_1_V_10_reg_736),
    .din2(pool_window_2_V_10_reg_784),
    .din3(pool_window_3_V_10_reg_709_pp0_iter1_reg),
    .din4(select_ln66_46_reg_875),
    .dout(tmp_data_3_V_fu_657_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_313)) begin
        if ((1'b1 == ap_condition_322)) begin
            ap_phi_reg_pp0_iter2_storemerge_i_i_reg_151 <= 32'd0;
        end else if ((1'b1 == ap_condition_318)) begin
            ap_phi_reg_pp0_iter2_storemerge_i_i_reg_151 <= select_ln222_reg_855;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_storemerge_i_i_reg_151 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_151;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_673 == 1'd0))) begin
        indvar_flatten_reg_140 <= add_ln241_reg_677;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_140 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_303)) begin
        if ((icmp_ln212_fu_404_p2 == 1'd1)) begin
            pX_3 <= 32'd0;
        end else if ((icmp_ln212_fu_404_p2 == 1'd0)) begin
            pX_3 <= add_ln225_fu_410_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_671)) begin
            pY_3 <= 32'd0;
        end else if ((1'b1 == ap_condition_269)) begin
            pY_3 <= add_ln220_fu_454_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_676)) begin
            sX_3 <= select_ln227_reg_846;
        end else if ((1'b1 == ap_condition_263)) begin
            sX_3 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln241_reg_677 <= add_ln241_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_673 == 1'd0))) begin
        and_ln191_4_reg_790 <= and_ln191_4_fu_354_p2;
        pool_window_0_V_10_reg_760 <= kernel_data_V_6_7;
        pool_window_0_V_8_reg_748 <= kernel_data_V_6_5;
        pool_window_0_V_9_reg_754 <= kernel_data_V_6_6;
        pool_window_0_V_reg_742 <= kernel_data_V_6_4;
        pool_window_1_V_10_reg_736 <= line_buffer_Array_V_6_0_3_q0;
        pool_window_1_V_8_reg_724 <= line_buffer_Array_V_6_0_1_q0;
        pool_window_1_V_9_reg_730 <= line_buffer_Array_V_6_0_2_q0;
        pool_window_1_V_reg_718 <= line_buffer_Array_V_6_0_0_q0;
        pool_window_2_V_10_reg_784 <= kernel_data_V_6_15;
        pool_window_2_V_8_reg_772 <= kernel_data_V_6_13;
        pool_window_2_V_9_reg_778 <= kernel_data_V_6_14;
        pool_window_2_V_reg_766 <= kernel_data_V_6_12;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_151 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_151;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_fu_354_p2))) begin
        icmp_ln1496_1_reg_806 <= icmp_ln1496_1_fu_371_p2;
        icmp_ln1496_24_reg_800 <= icmp_ln1496_24_fu_366_p2;
        icmp_ln1496_26_reg_812 <= icmp_ln1496_26_fu_377_p2;
        icmp_ln1496_28_reg_824 <= icmp_ln1496_28_fu_388_p2;
        icmp_ln1496_2_reg_818 <= icmp_ln1496_2_fu_382_p2;
        icmp_ln1496_30_reg_830 <= icmp_ln1496_30_fu_393_p2;
        icmp_ln1496_31_reg_836 <= icmp_ln1496_31_fu_399_p2;
        icmp_ln1496_reg_794 <= icmp_ln1496_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln212_reg_842 <= icmp_ln212_fu_404_p2;
        icmp_ln241_reg_673 <= icmp_ln241_fu_162_p2;
        icmp_ln241_reg_673_pp0_iter1_reg <= icmp_ln241_reg_673;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_404_p2 == 1'd1))) begin
        icmp_ln216_reg_851 <= icmp_ln216_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_673 == 1'd0))) begin
        kernel_data_V_6_12 <= pool_window_3_V_reg_682;
        kernel_data_V_6_13 <= pool_window_3_V_8_reg_691;
        kernel_data_V_6_14 <= pool_window_3_V_9_reg_700;
        kernel_data_V_6_15 <= pool_window_3_V_10_reg_709;
        kernel_data_V_6_4 <= line_buffer_Array_V_6_0_0_q0;
        kernel_data_V_6_5 <= line_buffer_Array_V_6_0_1_q0;
        kernel_data_V_6_6 <= line_buffer_Array_V_6_0_2_q0;
        kernel_data_V_6_7 <= line_buffer_Array_V_6_0_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_673 == 1'd0))) begin
        pool_window_3_V_10_reg_709 <= data_V_data_3_V_dout;
        pool_window_3_V_8_reg_691 <= data_V_data_1_V_dout;
        pool_window_3_V_9_reg_700 <= data_V_data_2_V_dout;
        pool_window_3_V_reg_682 <= data_V_data_0_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        pool_window_3_V_10_reg_709_pp0_iter1_reg <= pool_window_3_V_10_reg_709;
        pool_window_3_V_8_reg_691_pp0_iter1_reg <= pool_window_3_V_8_reg_691;
        pool_window_3_V_9_reg_700_pp0_iter1_reg <= pool_window_3_V_9_reg_700;
        pool_window_3_V_reg_682_pp0_iter1_reg <= pool_window_3_V_reg_682;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_reg_842 == 1'd1))) begin
        sY_3 <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_151;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_404_p2 == 1'd1) & (icmp_ln216_fu_448_p2 == 1'd0) & (icmp_ln241_reg_673 == 1'd0))) begin
        select_ln222_reg_855 <= select_ln222_fu_472_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_404_p2 == 1'd0))) begin
        select_ln227_reg_846 <= select_ln227_fu_428_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_790))) begin
        select_ln66_34_reg_860 <= select_ln66_34_fu_506_p3;
        select_ln66_39_reg_865 <= select_ln66_39_fu_540_p3;
        select_ln66_44_reg_870 <= select_ln66_44_fu_574_p3;
        select_ln66_46_reg_875 <= select_ln66_46_fu_608_p3;
    end
end

always @ (*) begin
    if ((icmp_ln241_fu_162_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln241_reg_673 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_144_p4 = add_ln241_reg_677;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_144_p4 = indvar_flatten_reg_140;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln212_reg_842 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_sY_3_load = ap_phi_reg_pp0_iter2_storemerge_i_i_reg_151;
    end else begin
        ap_sig_allocacmp_sY_3_load = sY_3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln241_reg_673 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_673 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln241_reg_673 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_673 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln241_reg_673 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_673 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln241_reg_673 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_673 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_673 == 1'd0))) begin
        line_buffer_Array_V_6_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_6_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_673 == 1'd0))) begin
        line_buffer_Array_V_6_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_6_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_673 == 1'd0))) begin
        line_buffer_Array_V_6_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_6_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_673 == 1'd0))) begin
        line_buffer_Array_V_6_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_6_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_673 == 1'd0))) begin
        line_buffer_Array_V_6_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_6_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_673 == 1'd0))) begin
        line_buffer_Array_V_6_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_6_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_673 == 1'd0))) begin
        line_buffer_Array_V_6_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_6_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_673 == 1'd0))) begin
        line_buffer_Array_V_6_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_6_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln191_4_reg_790) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_790))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln191_4_reg_790) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_790))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln191_4_reg_790) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_790))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln191_4_reg_790) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_790))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_fu_162_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_fu_162_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_454_p2 = (pY_3 + 32'd1);

assign add_ln222_fu_466_p2 = (ap_sig_allocacmp_sY_3_load + 32'd1);

assign add_ln225_fu_410_p2 = (pX_3 + 32'd1);

assign add_ln227_fu_422_p2 = (sX_3 + 32'd1);

assign add_ln241_fu_168_p2 = (ap_phi_mux_indvar_flatten_phi_fu_144_p4 + 11'd1);

assign and_ln191_3_fu_348_p2 = (icmp_ln191_6_fu_336_p2 & icmp_ln191_5_fu_326_p2);

assign and_ln191_4_fu_354_p2 = (and_ln191_fu_342_p2 & and_ln191_3_fu_348_p2);

assign and_ln191_fu_342_p2 = (icmp_ln191_fu_306_p2 & icmp_ln191_4_fu_316_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((io_acc_block_signal_op118 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln191_4_reg_790));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((io_acc_block_signal_op118 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln191_4_reg_790));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((io_acc_block_signal_op118 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln191_4_reg_790));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((io_acc_block_signal_op21 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_reg_673 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((io_acc_block_signal_op21 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_reg_673 == 1'd0));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((io_acc_block_signal_op21 == 1'b0) & (icmp_ln241_reg_673 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = ((io_acc_block_signal_op118 == 1'b0) & (1'd1 == and_ln191_4_reg_790));
end

always @ (*) begin
    ap_condition_263 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_404_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_269 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_404_p2 == 1'd1) & (icmp_ln216_fu_448_p2 == 1'd0) & (icmp_ln241_reg_673 == 1'd0));
end

always @ (*) begin
    ap_condition_303 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_313 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001));
end

always @ (*) begin
    ap_condition_318 = ((icmp_ln212_reg_842 == 1'd1) & (icmp_ln216_reg_851 == 1'd0) & (icmp_ln241_reg_673_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_322 = ((icmp_ln216_reg_851 == 1'd1) & (icmp_ln212_reg_842 == 1'd1) & (icmp_ln241_reg_673_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_671 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln216_reg_851 == 1'd1) & (icmp_ln212_reg_842 == 1'd1) & (icmp_ln241_reg_673_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_676 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_reg_842 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_151 = 'bx;

assign ap_ready = internal_ap_ready;

assign icmp_ln1496_1_fu_371_p2 = (($signed(kernel_data_V_6_5) < $signed(line_buffer_Array_V_6_0_1_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_24_fu_366_p2 = (($signed(kernel_data_V_6_12) < $signed(pool_window_3_V_reg_682)) ? 1'b1 : 1'b0);

assign icmp_ln1496_25_fu_497_p2 = (($signed(select_ln66_fu_480_p3) < $signed(select_ln66_33_fu_492_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_26_fu_377_p2 = (($signed(kernel_data_V_6_13) < $signed(pool_window_3_V_8_reg_691)) ? 1'b1 : 1'b0);

assign icmp_ln1496_27_fu_531_p2 = (($signed(select_ln66_35_fu_514_p3) < $signed(select_ln66_37_fu_526_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_28_fu_388_p2 = (($signed(kernel_data_V_6_14) < $signed(pool_window_3_V_9_reg_700)) ? 1'b1 : 1'b0);

assign icmp_ln1496_29_fu_565_p2 = (($signed(select_ln66_38_fu_548_p3) < $signed(select_ln66_40_fu_560_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_382_p2 = (($signed(kernel_data_V_6_6) < $signed(line_buffer_Array_V_6_0_2_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_30_fu_393_p2 = (($signed(kernel_data_V_6_7) < $signed(line_buffer_Array_V_6_0_3_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_31_fu_399_p2 = (($signed(kernel_data_V_6_15) < $signed(pool_window_3_V_10_reg_709)) ? 1'b1 : 1'b0);

assign icmp_ln1496_32_fu_599_p2 = (($signed(select_ln66_41_fu_582_p3) < $signed(select_ln66_43_fu_594_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_360_p2 = (($signed(kernel_data_V_6_4) < $signed(line_buffer_Array_V_6_0_0_q0)) ? 1'b1 : 1'b0);

assign icmp_ln191_4_fu_316_p2 = ((ap_sig_allocacmp_sY_3_load == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln191_5_fu_326_p2 = (($signed(pY_3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_6_fu_336_p2 = (($signed(pX_3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_306_p2 = ((sX_3 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_404_p2 = ((pX_3 == 32'd31) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_448_p2 = ((pY_3 == 32'd31) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_162_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_144_p4 == 11'd1024) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op118 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op21 = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign res_V_data_0_V_din = tmp_data_0_V_fu_627_p6;

assign res_V_data_1_V_din = tmp_data_1_V_fu_637_p6;

assign res_V_data_2_V_din = tmp_data_2_V_fu_647_p6;

assign res_V_data_3_V_din = tmp_data_3_V_fu_657_p6;

assign select_ln222_fu_472_p3 = ((icmp_ln191_4_fu_316_p2[0:0] === 1'b1) ? 32'd0 : add_ln222_fu_466_p2);

assign select_ln227_fu_428_p3 = ((icmp_ln191_fu_306_p2[0:0] === 1'b1) ? 32'd0 : add_ln227_fu_422_p2);

assign select_ln66_32_fu_485_p3 = ((icmp_ln1496_24_reg_800[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln66_33_fu_492_p3 = ((icmp_ln1496_24_reg_800[0:0] === 1'b1) ? pool_window_3_V_reg_682 : pool_window_2_V_reg_766);

assign select_ln66_34_fu_506_p3 = ((icmp_ln1496_25_fu_497_p2[0:0] === 1'b1) ? select_ln66_32_fu_485_p3 : zext_ln66_fu_503_p1);

assign select_ln66_35_fu_514_p3 = ((icmp_ln1496_1_reg_806[0:0] === 1'b1) ? pool_window_1_V_8_reg_724 : pool_window_0_V_8_reg_748);

assign select_ln66_36_fu_519_p3 = ((icmp_ln1496_26_reg_812[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln66_37_fu_526_p3 = ((icmp_ln1496_26_reg_812[0:0] === 1'b1) ? pool_window_3_V_8_reg_691 : pool_window_2_V_8_reg_772);

assign select_ln66_38_fu_548_p3 = ((icmp_ln1496_2_reg_818[0:0] === 1'b1) ? pool_window_1_V_9_reg_730 : pool_window_0_V_9_reg_754);

assign select_ln66_39_fu_540_p3 = ((icmp_ln1496_27_fu_531_p2[0:0] === 1'b1) ? select_ln66_36_fu_519_p3 : zext_ln66_8_fu_537_p1);

assign select_ln66_40_fu_560_p3 = ((icmp_ln1496_28_reg_824[0:0] === 1'b1) ? pool_window_3_V_9_reg_700 : pool_window_2_V_9_reg_778);

assign select_ln66_41_fu_582_p3 = ((icmp_ln1496_30_reg_830[0:0] === 1'b1) ? pool_window_1_V_10_reg_736 : pool_window_0_V_10_reg_760);

assign select_ln66_42_fu_553_p3 = ((icmp_ln1496_28_reg_824[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln66_43_fu_594_p3 = ((icmp_ln1496_31_reg_836[0:0] === 1'b1) ? pool_window_3_V_10_reg_709 : pool_window_2_V_10_reg_784);

assign select_ln66_44_fu_574_p3 = ((icmp_ln1496_29_fu_565_p2[0:0] === 1'b1) ? select_ln66_42_fu_553_p3 : zext_ln66_9_fu_571_p1);

assign select_ln66_45_fu_587_p3 = ((icmp_ln1496_31_reg_836[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln66_46_fu_608_p3 = ((icmp_ln1496_32_fu_599_p2[0:0] === 1'b1) ? select_ln66_45_fu_587_p3 : zext_ln66_10_fu_605_p1);

assign select_ln66_fu_480_p3 = ((icmp_ln1496_reg_794[0:0] === 1'b1) ? pool_window_1_V_reg_718 : pool_window_0_V_reg_742);

assign start_out = real_start;

assign zext_ln66_10_fu_605_p1 = icmp_ln1496_30_reg_830;

assign zext_ln66_8_fu_537_p1 = icmp_ln1496_1_reg_806;

assign zext_ln66_9_fu_571_p1 = icmp_ln1496_2_reg_818;

assign zext_ln66_fu_503_p1 = icmp_ln1496_reg_794;

endmodule //pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s
