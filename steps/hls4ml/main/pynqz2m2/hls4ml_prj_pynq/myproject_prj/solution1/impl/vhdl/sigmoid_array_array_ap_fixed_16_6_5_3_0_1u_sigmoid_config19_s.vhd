-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sigmoid_array_array_ap_fixed_16_6_5_3_0_1u_sigmoid_config19_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_data_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_V_empty_n : IN STD_LOGIC;
    data_V_data_V_read : OUT STD_LOGIC;
    res_V_data_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_V_full_n : IN STD_LOGIC;
    res_V_data_V_write : OUT STD_LOGIC );
end;


architecture behav of sigmoid_array_array_ap_fixed_16_6_5_3_0_1u_sigmoid_config19_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv26_3FFFFF1 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111111110001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_200 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sigmoid_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sigmoid_table1_ce0 : STD_LOGIC;
    signal sigmoid_table1_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_V_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln80_reg_274 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal icmp_ln80_reg_274_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_112 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln80_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln80_reg_274_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_274_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_274_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_274_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_129_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_data_0_V_reg_283 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_288 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln851_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln851_reg_293 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln850_fu_192_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln850_reg_298 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln92_1_fu_258_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln92_1_reg_304 : STD_LOGIC_VECTOR (9 downto 0);
    signal sigmoid_table1_load_reg_314 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal zext_ln96_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln851_fu_145_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_3_i_i_i_fu_149_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_163_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln850_fu_170_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln700_fu_179_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln850_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln851_fu_185_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln91_fu_200_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln91_fu_203_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_fu_222_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_214_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln92_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln92_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln92_fu_244_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln91_fu_208_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component sigmoid_array_array_ap_fixed_16_6_5_3_0_1u_sigmoid_config19_s_sigmoid_table1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    sigmoid_table1_U : component sigmoid_array_array_ap_fixed_16_6_5_3_0_1u_sigmoid_config19_s_sigmoid_table1
    generic map (
        DataWidth => 10,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sigmoid_table1_address0,
        ce0 => sigmoid_table1_ce0,
        q0 => sigmoid_table1_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln80_fu_123_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_112 <= i_fu_129_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_112 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln80_reg_274 <= icmp_ln80_fu_123_p2;
                icmp_ln80_reg_274_pp0_iter1_reg <= icmp_ln80_reg_274;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln80_reg_274_pp0_iter2_reg <= icmp_ln80_reg_274_pp0_iter1_reg;
                icmp_ln80_reg_274_pp0_iter3_reg <= icmp_ln80_reg_274_pp0_iter2_reg;
                icmp_ln80_reg_274_pp0_iter4_reg <= icmp_ln80_reg_274_pp0_iter3_reg;
                icmp_ln80_reg_274_pp0_iter5_reg <= icmp_ln80_reg_274_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln80_reg_274 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln851_reg_293 <= icmp_ln851_fu_157_p2;
                tmp_data_0_V_reg_283 <= data_V_data_V_dout;
                tmp_s_reg_288 <= data_V_data_V_dout(15 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln80_reg_274_pp0_iter1_reg = ap_const_lv1_0))) then
                select_ln850_reg_298 <= select_ln850_fu_192_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln80_reg_274_pp0_iter2_reg = ap_const_lv1_0))) then
                select_ln92_1_reg_304 <= select_ln92_1_fu_258_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln80_reg_274_pp0_iter4_reg = ap_const_lv1_0))) then
                sigmoid_table1_load_reg_314 <= sigmoid_table1_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, icmp_ln80_fu_123_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln80_fu_123_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln80_fu_123_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln700_fu_179_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(sext_ln850_fu_170_p1));
    add_ln91_fu_203_p2 <= std_logic_vector(unsigned(ap_const_lv13_200) + unsigned(select_ln850_reg_298));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state9 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(data_V_data_V_empty_n, res_V_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln80_reg_274, ap_enable_reg_pp0_iter6, icmp_ln80_reg_274_pp0_iter5_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln80_reg_274_pp0_iter5_reg = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((icmp_ln80_reg_274 = ap_const_lv1_0) and (data_V_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(data_V_data_V_empty_n, res_V_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln80_reg_274, ap_enable_reg_pp0_iter6, icmp_ln80_reg_274_pp0_iter5_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln80_reg_274_pp0_iter5_reg = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((icmp_ln80_reg_274 = ap_const_lv1_0) and (data_V_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(data_V_data_V_empty_n, res_V_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln80_reg_274, ap_enable_reg_pp0_iter6, icmp_ln80_reg_274_pp0_iter5_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln80_reg_274_pp0_iter5_reg = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((icmp_ln80_reg_274 = ap_const_lv1_0) and (data_V_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(data_V_data_V_empty_n, icmp_ln80_reg_274)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln80_reg_274 = ap_const_lv1_0) and (data_V_data_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter6_assign_proc : process(res_V_data_V_full_n, icmp_ln80_reg_274_pp0_iter5_reg)
    begin
                ap_block_state8_pp0_stage0_iter6 <= ((icmp_ln80_reg_274_pp0_iter5_reg = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln80_fu_123_p2)
    begin
        if ((icmp_ln80_fu_123_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_V_blk_n_assign_proc : process(data_V_data_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln80_reg_274)
    begin
        if (((icmp_ln80_reg_274 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_V_blk_n <= data_V_data_V_empty_n;
        else 
            data_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln80_reg_274, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln80_reg_274 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_V_read <= ap_const_logic_1;
        else 
            data_V_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_129_p2 <= std_logic_vector(unsigned(i_0_reg_112) + unsigned(ap_const_lv11_1));
    icmp_ln80_fu_123_p2 <= "1" when (i_0_reg_112 = ap_const_lv11_400) else "0";
    icmp_ln850_fu_173_p2 <= "1" when (signed(shl_ln_fu_163_p3) < signed(ap_const_lv26_3FFFFF1)) else "0";
    icmp_ln851_fu_157_p2 <= "1" when (p_Result_3_i_i_i_fu_149_p3 = ap_const_lv10_0) else "0";
    icmp_ln94_fu_232_p2 <= "0" when (tmp_2_fu_222_p4 = ap_const_lv3_0) else "1";
    or_ln92_fu_252_p2 <= (tmp_1_fu_214_p3 or icmp_ln94_fu_232_p2);
    p_Result_3_i_i_i_fu_149_p3 <= (trunc_ln851_fu_145_p1 & ap_const_lv6_0);

    res_V_data_V_blk_n_assign_proc : process(res_V_data_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, icmp_ln80_reg_274_pp0_iter5_reg)
    begin
        if (((icmp_ln80_reg_274_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_V_data_V_blk_n <= res_V_data_V_full_n;
        else 
            res_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sigmoid_table1_load_reg_314),16));

    res_V_data_V_write_assign_proc : process(ap_enable_reg_pp0_iter6, icmp_ln80_reg_274_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln80_reg_274_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_V_data_V_write <= ap_const_logic_1;
        else 
            res_V_data_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln850_fu_192_p3 <= 
        select_ln851_fu_185_p3 when (icmp_ln850_fu_173_p2(0) = '1') else 
        sext_ln850_fu_170_p1;
    select_ln851_fu_185_p3 <= 
        sext_ln850_fu_170_p1 when (icmp_ln851_reg_293(0) = '1') else 
        add_ln700_fu_179_p2;
    select_ln92_1_fu_258_p3 <= 
        select_ln92_fu_244_p3 when (or_ln92_fu_252_p2(0) = '1') else 
        xor_ln91_fu_208_p2;
    select_ln92_fu_244_p3 <= 
        ap_const_lv10_3FF when (xor_ln92_fu_238_p2(0) = '1') else 
        ap_const_lv10_0;
        sext_ln850_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_288),13));

    shl_ln_fu_163_p3 <= (tmp_data_0_V_reg_283 & ap_const_lv10_0);
    sigmoid_table1_address0 <= zext_ln96_fu_266_p1(10 - 1 downto 0);

    sigmoid_table1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            sigmoid_table1_ce0 <= ap_const_logic_1;
        else 
            sigmoid_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_214_p3 <= add_ln91_fu_203_p2(12 downto 12);
    tmp_2_fu_222_p4 <= add_ln91_fu_203_p2(12 downto 10);
    trunc_ln851_fu_145_p1 <= data_V_data_V_dout(4 - 1 downto 0);
    trunc_ln91_fu_200_p1 <= select_ln850_reg_298(10 - 1 downto 0);
    xor_ln91_fu_208_p2 <= (trunc_ln91_fu_200_p1 xor ap_const_lv10_200);
    xor_ln92_fu_238_p2 <= (tmp_1_fu_214_p3 xor ap_const_lv1_1);
    zext_ln96_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln92_1_reg_304),64));
end behav;
