-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dense_resource_rf_gt_nin_rem0_0_0_0_0_0_0_0_0_0_w5_V_rom is 
    generic(
             DWIDTH     : integer := 11; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dense_resource_rf_gt_nin_rem0_0_0_0_0_0_0_0_0_0_w5_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11110100000", 1 => "11110010011", 2 => "11101100011", 
    3 => "11111000101", 4 => "11100000110", 5 => "00000001000", 
    6 => "11101011010", 7 => "11101000111", 8 => "11100000000", 
    9 => "11101111101", 10 => "11011101100", 11 => "00010000000", 
    12 => "11110110110", 13 => "00011000011", 14 => "00001100100", 
    15 => "11110110010", 16 => "11011100000", 17 => "00000010011", 
    18 => "11110101101", 19 => "00100100111", 20 => "11011011110", 
    21 => "11110101001", 22 => "11110110011", 23 => "00010010000", 
    24 => "11111101010", 25 => "00101000110", 26 => "00011101110", 
    27 => "00011111011", 28 to 29=> "11110000111", 30 => "11100101101", 
    31 => "11111100000", 32 => "11100100001", 33 => "11110001100", 
    34 => "11110100111", 35 => "11111011110", 36 => "00001100001", 
    37 => "11110001101", 38 => "00000001001", 39 => "00001101010", 
    40 => "00101110100", 41 => "11110011000", 42 => "11111010111", 
    43 => "00010110111", 44 => "00100110101", 45 => "00000011100", 
    46 => "11111000110", 47 => "00100010000", 48 => "11111001100", 
    49 => "11111001110", 50 => "00001111001", 51 => "11111110111", 
    52 => "00010000000", 53 => "11100101100", 54 => "00010101111", 
    55 => "00010101000", 56 => "00000111011", 57 => "00001001100", 
    58 => "00011101010", 59 => "11110100010", 60 => "00001100010", 
    61 => "11110010000", 62 => "00000111010", 63 => "00100110011", 
    64 => "11110000011", 65 => "00000100100", 66 => "00011011110", 
    67 => "00100100101", 68 => "11100010000", 69 => "00000000111", 
    70 => "00000010001", 71 => "00011100110", 72 => "00100000000", 
    73 => "11111010011", 74 => "11110011000", 75 => "00001010111", 
    76 => "00100011111", 77 => "11110110100", 78 => "11100101011", 
    79 => "11110000001", 80 => "11101011011", 81 => "00001101001", 
    82 => "11111010101", 83 => "00001001101", 84 => "00011111000", 
    85 => "00000100010", 86 => "11101110101", 87 => "11111101000", 
    88 => "11110111011", 89 to 90=> "11111101110", 91 => "00010001001", 
    92 => "00001011111", 93 => "00100000011", 94 => "00011010110", 
    95 => "11111101001", 96 => "11111011011", 97 => "00000100100", 
    98 => "00000011001", 99 => "11110011001", 100 => "11100011110", 
    101 => "11110111010", 102 => "00001011101", 103 => "00000000111", 
    104 => "00001110000", 105 => "00000000101", 106 => "11111111110", 
    107 => "11110111101", 108 => "11110110111", 109 => "00000010111", 
    110 => "00010001001", 111 => "00000011001", 112 => "00100000111", 
    113 => "11110111000", 114 => "00011111111", 115 => "11110011101", 
    116 => "11110100100", 117 => "11111000000", 118 => "00101101011", 
    119 => "00100111010", 120 => "00110000101", 121 => "11110101001", 
    122 => "00010000011", 123 => "00100001111", 124 => "00101000001", 
    125 => "00001111111", 126 => "00010111010", 127 => "11100110101", 
    128 => "00011101100", 129 => "11101011011", 130 => "11111110011", 
    131 => "00001010110", 132 => "00011000010", 133 => "11101100111", 
    134 => "11100011011", 135 => "11100110001", 136 => "00010101010", 
    137 => "11100010011", 138 => "11111100000", 139 => "11100111100", 
    140 => "00010101010", 141 => "11101000010", 142 => "00001100001", 
    143 => "00010111110", 144 => "11100111110", 145 => "00010110110", 
    146 => "11110011010", 147 => "11111000001", 148 => "11100010000", 
    149 => "00001000011", 150 => "00011001100", 151 => "11010101100", 
    152 => "00001111111", 153 => "11111010110", 154 => "11110000101", 
    155 => "11101001100", 156 => "11100110100", 157 => "00000011100", 
    158 => "11110100001", 159 => "00010101100", 160 => "00000011100", 
    161 => "11111111111", 162 => "00001011101", 163 => "11110010001", 
    164 => "11101001011", 165 => "11111111111", 166 => "00000000010", 
    167 => "00001011111", 168 => "10111011000", 169 => "00000110000", 
    170 => "11011100110", 171 => "00001111011", 172 => "10111001011", 
    173 => "11011110101", 174 => "11110111011", 175 => "00000000000", 
    176 => "11100001000", 177 => "11111011111", 178 => "11011101110", 
    179 => "00110101001", 180 => "11101001011", 181 => "00010101011", 
    182 => "00001101110", 183 => "00000111001", 184 => "11101100001", 
    185 => "11101111101", 186 => "11110001110", 187 => "11101001110", 
    188 => "11101010011", 189 => "11110101111", 190 => "00000001010", 
    191 => "11111110011", 192 => "00000000100", 193 => "00010110000", 
    194 => "11110110011", 195 => "00010101001", 196 => "11101011000", 
    197 => "11100011011", 198 => "11111110110", 199 => "00000101011", 
    200 => "00000001010", 201 => "00011100000", 202 => "00001111100", 
    203 => "00001001011", 204 => "11100010101", 205 => "00010001101", 
    206 => "11100001100", 207 => "00010000001", 208 => "11101000000", 
    209 => "11100100110", 210 => "11100000001", 211 => "00000111010", 
    212 => "11110001010", 213 => "00011010110", 214 => "11111111011", 
    215 => "00011101101", 216 => "11010100110", 217 => "00010110011", 
    218 => "00101011000", 219 => "11101110100", 220 => "11010010101", 
    221 => "11111110111", 222 => "00110011001", 223 => "00000111000", 
    224 => "00000001001", 225 => "11111011001", 226 => "00011101101", 
    227 => "11111000001", 228 => "11100000110", 229 => "11110110110", 
    230 => "11110010100", 231 => "00000010011", 232 => "11010111000", 
    233 => "00000010011", 234 => "00010010000", 235 => "11111001111", 
    236 => "11110110001", 237 => "00001001010", 238 => "00010000001", 
    239 => "00010101001", 240 => "11101010111", 241 => "00001111100", 
    242 => "00010100000", 243 => "00010001000", 244 => "11101110101", 
    245 => "11100101000", 246 => "00001000110", 247 => "11111001111", 
    248 => "00000110100", 249 => "00000101001", 250 => "00001100100", 
    251 => "00001000110", 252 => "11100110110", 253 => "00000000101", 
    254 => "00010111001", 255 => "00000011110", 256 => "11111000000", 
    257 => "11100010101", 258 => "11110010111", 259 => "11110010000", 
    260 => "11100111100", 261 => "11111010100", 262 => "00000110111", 
    263 => "11111100000", 264 => "11111001100", 265 => "11010100110", 
    266 => "00001001111", 267 => "11111000101", 268 => "00100000000", 
    269 => "00000001100", 270 => "11110011111", 271 => "11100111011", 
    272 => "00101001011", 273 => "11101000000", 274 => "00000100010", 
    275 => "00001000100", 276 => "00011101111", 277 => "00001010010", 
    278 => "00001100100", 279 => "00000100100", 280 => "00001010000", 
    281 => "00100010101", 282 => "00100011010", 283 => "00010100101", 
    284 => "11100110110", 285 => "11111100001", 286 => "00101001101", 
    287 => "00000001001" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity dense_resource_rf_gt_nin_rem0_0_0_0_0_0_0_0_0_0_w5_V is
    generic (
        DataWidth : INTEGER := 11;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dense_resource_rf_gt_nin_rem0_0_0_0_0_0_0_0_0_0_w5_V is
    component dense_resource_rf_gt_nin_rem0_0_0_0_0_0_0_0_0_0_w5_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dense_resource_rf_gt_nin_rem0_0_0_0_0_0_0_0_0_0_w5_V_rom_U :  component dense_resource_rf_gt_nin_rem0_0_0_0_0_0_0_0_0_0_w5_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


