// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_local_V_data_0_V_dout,
        out_local_V_data_0_V_empty_n,
        out_local_V_data_0_V_read,
        out_local_V_data_1_V_dout,
        out_local_V_data_1_V_empty_n,
        out_local_V_data_1_V_read,
        out_local_V_data_2_V_dout,
        out_local_V_data_2_V_empty_n,
        out_local_V_data_2_V_read,
        out_local_V_data_3_V_dout,
        out_local_V_data_3_V_empty_n,
        out_local_V_data_3_V_read,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TLAST,
        is_last_0_i_loc_dout,
        is_last_0_i_loc_empty_n,
        is_last_0_i_loc_read
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [3:0] out_local_V_data_0_V_dout;
input   out_local_V_data_0_V_empty_n;
output   out_local_V_data_0_V_read;
input  [3:0] out_local_V_data_1_V_dout;
input   out_local_V_data_1_V_empty_n;
output   out_local_V_data_1_V_read;
input  [3:0] out_local_V_data_2_V_dout;
input   out_local_V_data_2_V_empty_n;
output   out_local_V_data_2_V_read;
input  [3:0] out_local_V_data_3_V_dout;
input   out_local_V_data_3_V_empty_n;
output   out_local_V_data_3_V_read;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [0:0] out_r_TLAST;
input  [0:0] is_last_0_i_loc_dout;
input   is_last_0_i_loc_empty_n;
output   is_last_0_i_loc_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_local_V_data_0_V_read;
reg out_local_V_data_1_V_read;
reg out_local_V_data_2_V_read;
reg out_local_V_data_3_V_read;
reg is_last_0_i_loc_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_local_V_data_0_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln29_fu_180_p2;
reg    out_local_V_data_1_V_blk_n;
reg    out_local_V_data_2_V_blk_n;
reg    out_local_V_data_3_V_blk_n;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg    is_last_0_i_loc_blk_n;
reg   [0:0] is_last_0_i_loc_read_reg_553;
reg    ap_block_state1;
wire   [12:0] i_fu_186_p2;
reg   [12:0] i_reg_561;
wire    io_acc_block_signal_op27;
wire    regslice_both_out_data_U_apdone_blk;
reg    ap_block_state2;
reg   [3:0] tmp_data_V_01_i_i_reg_566;
reg   [3:0] tmp_data_V_12_i_i_reg_571;
reg   [3:0] tmp_data_V_23_i_i_reg_576;
reg   [3:0] tmp_data_V_34_i_i_reg_581;
wire   [13:0] shl_ln_fu_212_p3;
reg   [13:0] shl_ln_reg_586;
wire   [2:0] j_fu_230_p2;
reg   [2:0] j_reg_594;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln32_fu_241_p2;
reg   [0:0] icmp_ln32_reg_599;
wire   [0:0] icmp_ln31_fu_224_p2;
wire   [3:0] tmp_V_3_fu_251_p6;
reg   [3:0] tmp_V_3_reg_604;
reg   [0:0] p_Result_6_reg_611;
wire   [0:0] last_fu_269_p2;
reg   [0:0] last_reg_617;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln935_fu_273_p2;
reg   [0:0] icmp_ln935_reg_622;
wire   [3:0] tmp_V_4_fu_283_p3;
reg   [3:0] tmp_V_4_reg_627;
reg   [3:0] p_Result_s_fu_289_p4;
reg   [3:0] p_Result_s_reg_635;
reg   [31:0] l_fu_306_p3;
reg   [31:0] l_reg_640;
wire    ap_CS_fsm_state5;
wire   [7:0] trunc_ln943_fu_314_p1;
reg   [7:0] trunc_ln943_reg_645;
wire   [31:0] sub_ln944_fu_318_p2;
reg   [31:0] sub_ln944_reg_650;
wire    ap_CS_fsm_state6;
wire   [2:0] trunc_ln947_fu_323_p1;
reg   [2:0] trunc_ln947_reg_658;
wire   [31:0] lsb_index_fu_327_p2;
reg   [31:0] lsb_index_reg_663;
wire    ap_CS_fsm_state7;
reg   [30:0] tmp_reg_669;
wire   [0:0] icmp_ln947_1_fu_362_p2;
reg   [0:0] icmp_ln947_1_reg_674;
wire   [31:0] add_ln958_fu_368_p2;
reg   [31:0] add_ln958_reg_679;
wire   [31:0] sub_ln958_fu_373_p2;
reg   [31:0] sub_ln958_reg_684;
wire   [31:0] or_ln_i_i_fu_429_p3;
reg   [31:0] or_ln_i_i_reg_689;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln958_fu_443_p2;
reg   [0:0] icmp_ln958_reg_704;
wire   [31:0] grp_fu_448_p2;
reg   [31:0] lshr_ln958_reg_714;
wire    ap_CS_fsm_state9;
wire   [63:0] grp_fu_456_p2;
reg   [63:0] shl_ln958_reg_719;
reg   [62:0] m_5_reg_724;
wire    ap_CS_fsm_state10;
reg   [0:0] tmp_9_reg_729;
wire   [7:0] select_ln964_fu_498_p3;
reg   [7:0] select_ln964_reg_734;
wire    ap_CS_fsm_state11;
reg   [12:0] i1_0_i_i_reg_158;
reg   [2:0] j3_0_i_i_reg_169;
wire   [11:0] trunc_ln32_fu_208_p1;
wire   [13:0] zext_ln31_fu_220_p1;
wire   [13:0] add_ln32_fu_236_p2;
wire   [1:0] tmp_V_3_fu_251_p5;
wire   [3:0] tmp_V_fu_278_p2;
wire   [31:0] p_Result_7_fu_299_p3;
wire   [2:0] sub_ln947_fu_342_p2;
wire   [3:0] zext_ln947_fu_347_p1;
wire   [3:0] lshr_ln947_fu_351_p2;
wire   [3:0] p_Result_4_fu_357_p2;
wire   [0:0] icmp_ln947_fu_381_p2;
wire   [0:0] tmp_8_fu_391_p3;
wire   [3:0] trunc_ln944_fu_378_p1;
wire   [3:0] xor_ln949_fu_404_p2;
wire   [0:0] p_Result_3_fu_410_p3;
wire   [0:0] xor_ln949_1_fu_398_p2;
wire   [0:0] and_ln949_fu_417_p2;
wire   [0:0] a_fu_386_p2;
wire   [0:0] or_ln949_fu_423_p2;
wire   [31:0] grp_fu_448_p0;
wire   [63:0] grp_fu_456_p0;
wire   [63:0] grp_fu_456_p1;
wire   [63:0] zext_ln958_fu_462_p1;
wire   [63:0] zext_ln961_fu_471_p1;
wire   [63:0] m_1_fu_465_p3;
wire   [63:0] m_2_fu_474_p2;
wire   [7:0] sub_ln964_fu_508_p2;
wire   [7:0] add_ln964_fu_513_p2;
wire   [63:0] m_6_fu_505_p1;
wire   [8:0] tmp_4316_i_i_fu_518_p3;
wire   [63:0] p_Result_8_fu_525_p5;
wire   [31:0] trunc_ln738_fu_537_p1;
wire   [31:0] bitcast_ln739_fu_541_p1;
reg   [12:0] ap_NS_fsm;
wire   [31:0] out_r_TDATA_int;
reg    out_r_TVALID_int;
wire    out_r_TREADY_int;
wire    regslice_both_out_data_U_vld_out;
wire    regslice_both_out_last_V_U_apdone_blk;
wire    regslice_both_out_last_V_U_ack_in_dummy;
wire    regslice_both_out_last_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
end

myproject_axi_mux_42_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .din3_WIDTH( 4 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 4 ))
myproject_axi_mux_42_4_1_1_U1732(
    .din0(tmp_data_V_01_i_i_reg_566),
    .din1(tmp_data_V_12_i_i_reg_571),
    .din2(tmp_data_V_23_i_i_reg_576),
    .din3(tmp_data_V_34_i_i_reg_581),
    .din4(tmp_V_3_fu_251_p5),
    .dout(tmp_V_3_fu_251_p6)
);

myproject_axi_lshr_32ns_32ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myproject_axi_lshr_32ns_32ns_32_2_1_U1733(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_448_p0),
    .din1(add_ln958_reg_679),
    .ce(1'b1),
    .dout(grp_fu_448_p2)
);

myproject_axi_shl_64ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
myproject_axi_shl_64ns_32ns_64_2_1_U1734(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_456_p0),
    .din1(grp_fu_456_p1),
    .ce(1'b1),
    .dout(grp_fu_456_p2)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(out_r_TDATA_int),
    .vld_in(out_r_TVALID_int),
    .ack_in(out_r_TREADY_int),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_data_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_data_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(last_reg_617),
    .vld_in(out_r_TVALID_int),
    .ack_in(regslice_both_out_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((regslice_both_out_data_U_apdone_blk == 1'b1) | ((icmp_ln29_fu_180_p2 == 1'd0) & (io_acc_block_signal_op27 == 1'b0))) & (icmp_ln29_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln31_fu_224_p2 == 1'd1))) begin
        i1_0_i_i_reg_158 <= i_reg_561;
    end else if ((~((is_last_0_i_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i1_0_i_i_reg_158 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        j3_0_i_i_reg_169 <= j_reg_594;
    end else if ((~((regslice_both_out_data_U_apdone_blk == 1'b1) | ((icmp_ln29_fu_180_p2 == 1'd0) & (io_acc_block_signal_op27 == 1'b0))) & (icmp_ln29_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j3_0_i_i_reg_169 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_622 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        add_ln958_reg_679 <= add_ln958_fu_368_p2;
        icmp_ln947_1_reg_674 <= icmp_ln947_1_fu_362_p2;
        lsb_index_reg_663 <= lsb_index_fu_327_p2;
        sub_ln958_reg_684 <= sub_ln958_fu_373_p2;
        tmp_reg_669 <= {{lsb_index_fu_327_p2[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_out_data_U_apdone_blk == 1'b1) | ((icmp_ln29_fu_180_p2 == 1'd0) & (io_acc_block_signal_op27 == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_561 <= i_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln32_reg_599 <= icmp_ln32_fu_241_p2;
        p_Result_6_reg_611 <= tmp_V_3_fu_251_p6[32'd3];
        tmp_V_3_reg_604 <= tmp_V_3_fu_251_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln935_reg_622 <= icmp_ln935_fu_273_p2;
        last_reg_617 <= last_fu_269_p2;
        p_Result_s_reg_635 <= p_Result_s_fu_289_p4;
        tmp_V_4_reg_627 <= tmp_V_4_fu_283_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_622 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        icmp_ln958_reg_704 <= icmp_ln958_fu_443_p2;
        or_ln_i_i_reg_689[0] <= or_ln_i_i_fu_429_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((is_last_0_i_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        is_last_0_i_loc_read_reg_553 <= is_last_0_i_loc_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_594 <= j_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_622 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        l_reg_640 <= l_fu_306_p3;
        trunc_ln943_reg_645 <= trunc_ln943_fu_314_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_622 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        lshr_ln958_reg_714 <= grp_fu_448_p2;
        shl_ln958_reg_719 <= grp_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_622 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        m_5_reg_724 <= {{m_2_fu_474_p2[63:1]}};
        tmp_9_reg_729 <= m_2_fu_474_p2[32'd25];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_622 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        select_ln964_reg_734[0] <= select_ln964_fu_498_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_out_data_U_apdone_blk == 1'b1) | ((icmp_ln29_fu_180_p2 == 1'd0) & (io_acc_block_signal_op27 == 1'b0))) & (icmp_ln29_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_586[13 : 2] <= shl_ln_fu_212_p3[13 : 2];
        tmp_data_V_01_i_i_reg_566 <= out_local_V_data_0_V_dout;
        tmp_data_V_12_i_i_reg_571 <= out_local_V_data_1_V_dout;
        tmp_data_V_23_i_i_reg_576 <= out_local_V_data_2_V_dout;
        tmp_data_V_34_i_i_reg_581 <= out_local_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_622 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sub_ln944_reg_650 <= sub_ln944_fu_318_p2;
        trunc_ln947_reg_658 <= trunc_ln947_fu_323_p1;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_data_U_apdone_blk == 1'b1) | ((icmp_ln29_fu_180_p2 == 1'd0) & (io_acc_block_signal_op27 == 1'b0))) & (icmp_ln29_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_data_U_apdone_blk == 1'b1) | ((icmp_ln29_fu_180_p2 == 1'd0) & (io_acc_block_signal_op27 == 1'b0))) & (icmp_ln29_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        is_last_0_i_loc_blk_n = is_last_0_i_loc_empty_n;
    end else begin
        is_last_0_i_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((is_last_0_i_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        is_last_0_i_loc_read = 1'b1;
    end else begin
        is_last_0_i_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_local_V_data_0_V_blk_n = out_local_V_data_0_V_empty_n;
    end else begin
        out_local_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_data_U_apdone_blk == 1'b1) | ((icmp_ln29_fu_180_p2 == 1'd0) & (io_acc_block_signal_op27 == 1'b0))) & (icmp_ln29_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_local_V_data_0_V_read = 1'b1;
    end else begin
        out_local_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_local_V_data_1_V_blk_n = out_local_V_data_1_V_empty_n;
    end else begin
        out_local_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_data_U_apdone_blk == 1'b1) | ((icmp_ln29_fu_180_p2 == 1'd0) & (io_acc_block_signal_op27 == 1'b0))) & (icmp_ln29_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_local_V_data_1_V_read = 1'b1;
    end else begin
        out_local_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_local_V_data_2_V_blk_n = out_local_V_data_2_V_empty_n;
    end else begin
        out_local_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_data_U_apdone_blk == 1'b1) | ((icmp_ln29_fu_180_p2 == 1'd0) & (io_acc_block_signal_op27 == 1'b0))) & (icmp_ln29_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_local_V_data_2_V_read = 1'b1;
    end else begin
        out_local_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_local_V_data_3_V_blk_n = out_local_V_data_3_V_empty_n;
    end else begin
        out_local_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_data_U_apdone_blk == 1'b1) | ((icmp_ln29_fu_180_p2 == 1'd0) & (io_acc_block_signal_op27 == 1'b0))) & (icmp_ln29_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_local_V_data_3_V_read = 1'b1;
    end else begin
        out_local_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        out_r_TVALID_int = 1'b1;
    end else begin
        out_r_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((is_last_0_i_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((regslice_both_out_data_U_apdone_blk == 1'b1) | ((icmp_ln29_fu_180_p2 == 1'd0) & (io_acc_block_signal_op27 == 1'b0))) & (icmp_ln29_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((regslice_both_out_data_U_apdone_blk == 1'b1) | ((icmp_ln29_fu_180_p2 == 1'd0) & (io_acc_block_signal_op27 == 1'b0))) & (icmp_ln29_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln31_fu_224_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_386_p2 = (icmp_ln947_fu_381_p2 & icmp_ln947_1_reg_674);

assign add_ln32_fu_236_p2 = (zext_ln31_fu_220_p1 + shl_ln_reg_586);

assign add_ln958_fu_368_p2 = ($signed(32'd4294967271) + $signed(sub_ln944_reg_650));

assign add_ln964_fu_513_p2 = (sub_ln964_fu_508_p2 + select_ln964_reg_734);

assign and_ln949_fu_417_p2 = (xor_ln949_1_fu_398_p2 & p_Result_3_fu_410_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((is_last_0_i_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((regslice_both_out_data_U_apdone_blk == 1'b1) | ((icmp_ln29_fu_180_p2 == 1'd0) & (io_acc_block_signal_op27 == 1'b0)));
end

assign bitcast_ln739_fu_541_p1 = trunc_ln738_fu_537_p1;

assign grp_fu_448_p0 = tmp_V_4_reg_627;

assign grp_fu_456_p0 = tmp_V_4_reg_627;

assign grp_fu_456_p1 = sub_ln958_reg_684;

assign i_fu_186_p2 = (i1_0_i_i_reg_158 + 13'd1);

assign icmp_ln29_fu_180_p2 = ((i1_0_i_i_reg_158 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_224_p2 = ((j3_0_i_i_reg_169 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_241_p2 = ((add_ln32_fu_236_p2 == 14'd16383) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_273_p2 = ((tmp_V_3_reg_604 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_1_fu_362_p2 = ((p_Result_4_fu_357_p2 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_fu_381_p2 = (($signed(tmp_reg_669) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln958_fu_443_p2 = (($signed(lsb_index_reg_663) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op27 = (out_local_V_data_3_V_empty_n & out_local_V_data_2_V_empty_n & out_local_V_data_1_V_empty_n & out_local_V_data_0_V_empty_n);

assign j_fu_230_p2 = (j3_0_i_i_reg_169 + 3'd1);


always @ (p_Result_7_fu_299_p3) begin
    if (p_Result_7_fu_299_p3[0] == 1'b1) begin
        l_fu_306_p3 = 32'd0;
    end else if (p_Result_7_fu_299_p3[1] == 1'b1) begin
        l_fu_306_p3 = 32'd1;
    end else if (p_Result_7_fu_299_p3[2] == 1'b1) begin
        l_fu_306_p3 = 32'd2;
    end else if (p_Result_7_fu_299_p3[3] == 1'b1) begin
        l_fu_306_p3 = 32'd3;
    end else if (p_Result_7_fu_299_p3[4] == 1'b1) begin
        l_fu_306_p3 = 32'd4;
    end else if (p_Result_7_fu_299_p3[5] == 1'b1) begin
        l_fu_306_p3 = 32'd5;
    end else if (p_Result_7_fu_299_p3[6] == 1'b1) begin
        l_fu_306_p3 = 32'd6;
    end else if (p_Result_7_fu_299_p3[7] == 1'b1) begin
        l_fu_306_p3 = 32'd7;
    end else if (p_Result_7_fu_299_p3[8] == 1'b1) begin
        l_fu_306_p3 = 32'd8;
    end else if (p_Result_7_fu_299_p3[9] == 1'b1) begin
        l_fu_306_p3 = 32'd9;
    end else if (p_Result_7_fu_299_p3[10] == 1'b1) begin
        l_fu_306_p3 = 32'd10;
    end else if (p_Result_7_fu_299_p3[11] == 1'b1) begin
        l_fu_306_p3 = 32'd11;
    end else if (p_Result_7_fu_299_p3[12] == 1'b1) begin
        l_fu_306_p3 = 32'd12;
    end else if (p_Result_7_fu_299_p3[13] == 1'b1) begin
        l_fu_306_p3 = 32'd13;
    end else if (p_Result_7_fu_299_p3[14] == 1'b1) begin
        l_fu_306_p3 = 32'd14;
    end else if (p_Result_7_fu_299_p3[15] == 1'b1) begin
        l_fu_306_p3 = 32'd15;
    end else if (p_Result_7_fu_299_p3[16] == 1'b1) begin
        l_fu_306_p3 = 32'd16;
    end else if (p_Result_7_fu_299_p3[17] == 1'b1) begin
        l_fu_306_p3 = 32'd17;
    end else if (p_Result_7_fu_299_p3[18] == 1'b1) begin
        l_fu_306_p3 = 32'd18;
    end else if (p_Result_7_fu_299_p3[19] == 1'b1) begin
        l_fu_306_p3 = 32'd19;
    end else if (p_Result_7_fu_299_p3[20] == 1'b1) begin
        l_fu_306_p3 = 32'd20;
    end else if (p_Result_7_fu_299_p3[21] == 1'b1) begin
        l_fu_306_p3 = 32'd21;
    end else if (p_Result_7_fu_299_p3[22] == 1'b1) begin
        l_fu_306_p3 = 32'd22;
    end else if (p_Result_7_fu_299_p3[23] == 1'b1) begin
        l_fu_306_p3 = 32'd23;
    end else if (p_Result_7_fu_299_p3[24] == 1'b1) begin
        l_fu_306_p3 = 32'd24;
    end else if (p_Result_7_fu_299_p3[25] == 1'b1) begin
        l_fu_306_p3 = 32'd25;
    end else if (p_Result_7_fu_299_p3[26] == 1'b1) begin
        l_fu_306_p3 = 32'd26;
    end else if (p_Result_7_fu_299_p3[27] == 1'b1) begin
        l_fu_306_p3 = 32'd27;
    end else if (p_Result_7_fu_299_p3[28] == 1'b1) begin
        l_fu_306_p3 = 32'd28;
    end else if (p_Result_7_fu_299_p3[29] == 1'b1) begin
        l_fu_306_p3 = 32'd29;
    end else if (p_Result_7_fu_299_p3[30] == 1'b1) begin
        l_fu_306_p3 = 32'd30;
    end else if (p_Result_7_fu_299_p3[31] == 1'b1) begin
        l_fu_306_p3 = 32'd31;
    end else begin
        l_fu_306_p3 = 32'd32;
    end
end

assign last_fu_269_p2 = (is_last_0_i_loc_read_reg_553 & icmp_ln32_reg_599);

assign lsb_index_fu_327_p2 = ($signed(32'd4294967272) + $signed(sub_ln944_reg_650));

assign lshr_ln947_fu_351_p2 = 4'd15 >> zext_ln947_fu_347_p1;

assign m_1_fu_465_p3 = ((icmp_ln958_reg_704[0:0] === 1'b1) ? zext_ln958_fu_462_p1 : shl_ln958_reg_719);

assign m_2_fu_474_p2 = (zext_ln961_fu_471_p1 + m_1_fu_465_p3);

assign m_6_fu_505_p1 = m_5_reg_724;

assign or_ln949_fu_423_p2 = (and_ln949_fu_417_p2 | a_fu_386_p2);

assign or_ln_i_i_fu_429_p3 = {{31'd0}, {or_ln949_fu_423_p2}};

assign out_r_TDATA_int = ((icmp_ln935_reg_622[0:0] === 1'b1) ? 32'd0 : bitcast_ln739_fu_541_p1);

assign out_r_TVALID = regslice_both_out_data_U_vld_out;

assign p_Result_3_fu_410_p3 = tmp_V_4_reg_627[xor_ln949_fu_404_p2];

assign p_Result_4_fu_357_p2 = (tmp_V_4_reg_627 & lshr_ln947_fu_351_p2);

assign p_Result_7_fu_299_p3 = {{28'd268435455}, {p_Result_s_reg_635}};

assign p_Result_8_fu_525_p5 = {{m_6_fu_505_p1[63:32]}, {tmp_4316_i_i_fu_518_p3}, {m_6_fu_505_p1[22:0]}};

integer ap_tvar_int_0;

always @ (tmp_V_4_fu_283_p3) begin
    for (ap_tvar_int_0 = 4 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 3 - 0) begin
            p_Result_s_fu_289_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_289_p4[ap_tvar_int_0] = tmp_V_4_fu_283_p3[3 - ap_tvar_int_0];
        end
    end
end

assign select_ln964_fu_498_p3 = ((tmp_9_reg_729[0:0] === 1'b1) ? 8'd127 : 8'd126);

assign shl_ln_fu_212_p3 = {{trunc_ln32_fu_208_p1}, {2'd0}};

assign sub_ln944_fu_318_p2 = (32'd4 - l_reg_640);

assign sub_ln947_fu_342_p2 = ($signed(3'd5) - $signed(trunc_ln947_reg_658));

assign sub_ln958_fu_373_p2 = (32'd25 - sub_ln944_reg_650);

assign sub_ln964_fu_508_p2 = (8'd2 - trunc_ln943_reg_645);

assign tmp_4316_i_i_fu_518_p3 = {{p_Result_6_reg_611}, {add_ln964_fu_513_p2}};

assign tmp_8_fu_391_p3 = lsb_index_reg_663[32'd31];

assign tmp_V_3_fu_251_p5 = j3_0_i_i_reg_169[1:0];

assign tmp_V_4_fu_283_p3 = ((p_Result_6_reg_611[0:0] === 1'b1) ? tmp_V_fu_278_p2 : tmp_V_3_reg_604);

assign tmp_V_fu_278_p2 = (4'd0 - tmp_V_3_reg_604);

assign trunc_ln32_fu_208_p1 = i1_0_i_i_reg_158[11:0];

assign trunc_ln738_fu_537_p1 = p_Result_8_fu_525_p5[31:0];

assign trunc_ln943_fu_314_p1 = l_fu_306_p3[7:0];

assign trunc_ln944_fu_378_p1 = sub_ln944_reg_650[3:0];

assign trunc_ln947_fu_323_p1 = sub_ln944_fu_318_p2[2:0];

assign xor_ln949_1_fu_398_p2 = (tmp_8_fu_391_p3 ^ 1'd1);

assign xor_ln949_fu_404_p2 = (trunc_ln944_fu_378_p1 ^ 4'd8);

assign zext_ln31_fu_220_p1 = j3_0_i_i_reg_169;

assign zext_ln947_fu_347_p1 = sub_ln947_fu_342_p2;

assign zext_ln958_fu_462_p1 = lshr_ln958_reg_714;

assign zext_ln961_fu_471_p1 = or_ln_i_i_reg_689;

always @ (posedge ap_clk) begin
    shl_ln_reg_586[1:0] <= 2'b00;
    or_ln_i_i_reg_689[31:1] <= 31'b0000000000000000000000000000000;
    select_ln964_reg_734[7:1] <= 7'b0111111;
end

endmodule //Loop_2_proc
