// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _concatenate3d_2_array_array_array_ap_fixed_4_2_5_3_0_8u_config18_s_HH_
#define _concatenate3d_2_array_array_array_ap_fixed_4_2_5_3_0_8u_config18_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct concatenate3d_2_array_array_array_ap_fixed_4_2_5_3_0_8u_config18_s : public sc_module {
    // Port declarations 54
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<4> > data1_V_data_0_V_dout;
    sc_in< sc_logic > data1_V_data_0_V_empty_n;
    sc_out< sc_logic > data1_V_data_0_V_read;
    sc_in< sc_lv<4> > data1_V_data_1_V_dout;
    sc_in< sc_logic > data1_V_data_1_V_empty_n;
    sc_out< sc_logic > data1_V_data_1_V_read;
    sc_in< sc_lv<4> > data1_V_data_2_V_dout;
    sc_in< sc_logic > data1_V_data_2_V_empty_n;
    sc_out< sc_logic > data1_V_data_2_V_read;
    sc_in< sc_lv<4> > data1_V_data_3_V_dout;
    sc_in< sc_logic > data1_V_data_3_V_empty_n;
    sc_out< sc_logic > data1_V_data_3_V_read;
    sc_in< sc_lv<4> > data2_V_data_0_V_dout;
    sc_in< sc_logic > data2_V_data_0_V_empty_n;
    sc_out< sc_logic > data2_V_data_0_V_read;
    sc_in< sc_lv<4> > data2_V_data_1_V_dout;
    sc_in< sc_logic > data2_V_data_1_V_empty_n;
    sc_out< sc_logic > data2_V_data_1_V_read;
    sc_in< sc_lv<4> > data2_V_data_2_V_dout;
    sc_in< sc_logic > data2_V_data_2_V_empty_n;
    sc_out< sc_logic > data2_V_data_2_V_read;
    sc_in< sc_lv<4> > data2_V_data_3_V_dout;
    sc_in< sc_logic > data2_V_data_3_V_empty_n;
    sc_out< sc_logic > data2_V_data_3_V_read;
    sc_out< sc_lv<4> > res_V_data_0_V_din;
    sc_in< sc_logic > res_V_data_0_V_full_n;
    sc_out< sc_logic > res_V_data_0_V_write;
    sc_out< sc_lv<4> > res_V_data_1_V_din;
    sc_in< sc_logic > res_V_data_1_V_full_n;
    sc_out< sc_logic > res_V_data_1_V_write;
    sc_out< sc_lv<4> > res_V_data_2_V_din;
    sc_in< sc_logic > res_V_data_2_V_full_n;
    sc_out< sc_logic > res_V_data_2_V_write;
    sc_out< sc_lv<4> > res_V_data_3_V_din;
    sc_in< sc_logic > res_V_data_3_V_full_n;
    sc_out< sc_logic > res_V_data_3_V_write;
    sc_out< sc_lv<4> > res_V_data_4_V_din;
    sc_in< sc_logic > res_V_data_4_V_full_n;
    sc_out< sc_logic > res_V_data_4_V_write;
    sc_out< sc_lv<4> > res_V_data_5_V_din;
    sc_in< sc_logic > res_V_data_5_V_full_n;
    sc_out< sc_logic > res_V_data_5_V_write;
    sc_out< sc_lv<4> > res_V_data_6_V_din;
    sc_in< sc_logic > res_V_data_6_V_full_n;
    sc_out< sc_logic > res_V_data_6_V_write;
    sc_out< sc_lv<4> > res_V_data_7_V_din;
    sc_in< sc_logic > res_V_data_7_V_full_n;
    sc_out< sc_logic > res_V_data_7_V_write;


    // Module declarations
    concatenate3d_2_array_array_array_ap_fixed_4_2_5_3_0_8u_config18_s(sc_module_name name);
    SC_HAS_PROCESS(concatenate3d_2_array_array_array_ap_fixed_4_2_5_3_0_8u_config18_s);

    ~concatenate3d_2_array_array_array_ap_fixed_4_2_5_3_0_8u_config18_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > data1_V_data_0_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln232_reg_189;
    sc_signal< sc_logic > data1_V_data_1_V_blk_n;
    sc_signal< sc_logic > data1_V_data_2_V_blk_n;
    sc_signal< sc_logic > data1_V_data_3_V_blk_n;
    sc_signal< sc_logic > data2_V_data_0_V_blk_n;
    sc_signal< sc_logic > data2_V_data_1_V_blk_n;
    sc_signal< sc_logic > data2_V_data_2_V_blk_n;
    sc_signal< sc_logic > data2_V_data_3_V_blk_n;
    sc_signal< sc_logic > res_V_data_0_V_blk_n;
    sc_signal< sc_logic > res_V_data_1_V_blk_n;
    sc_signal< sc_logic > res_V_data_2_V_blk_n;
    sc_signal< sc_logic > res_V_data_3_V_blk_n;
    sc_signal< sc_logic > res_V_data_4_V_blk_n;
    sc_signal< sc_logic > res_V_data_5_V_blk_n;
    sc_signal< sc_logic > res_V_data_6_V_blk_n;
    sc_signal< sc_logic > res_V_data_7_V_blk_n;
    sc_signal< sc_lv<13> > indvar_flatten_reg_126;
    sc_signal< sc_lv<1> > icmp_ln232_fu_137_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< sc_logic > io_acc_block_signal_op31;
    sc_signal< sc_logic > io_acc_block_signal_op36;
    sc_signal< sc_logic > io_acc_block_signal_op41;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<13> > add_ln232_fu_143_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<13> ap_const_lv13_1000;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln232_fu_143_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_data1_V_data_0_V_blk_n();
    void thread_data1_V_data_0_V_read();
    void thread_data1_V_data_1_V_blk_n();
    void thread_data1_V_data_1_V_read();
    void thread_data1_V_data_2_V_blk_n();
    void thread_data1_V_data_2_V_read();
    void thread_data1_V_data_3_V_blk_n();
    void thread_data1_V_data_3_V_read();
    void thread_data2_V_data_0_V_blk_n();
    void thread_data2_V_data_0_V_read();
    void thread_data2_V_data_1_V_blk_n();
    void thread_data2_V_data_1_V_read();
    void thread_data2_V_data_2_V_blk_n();
    void thread_data2_V_data_2_V_read();
    void thread_data2_V_data_3_V_blk_n();
    void thread_data2_V_data_3_V_read();
    void thread_icmp_ln232_fu_137_p2();
    void thread_io_acc_block_signal_op31();
    void thread_io_acc_block_signal_op36();
    void thread_io_acc_block_signal_op41();
    void thread_res_V_data_0_V_blk_n();
    void thread_res_V_data_0_V_din();
    void thread_res_V_data_0_V_write();
    void thread_res_V_data_1_V_blk_n();
    void thread_res_V_data_1_V_din();
    void thread_res_V_data_1_V_write();
    void thread_res_V_data_2_V_blk_n();
    void thread_res_V_data_2_V_din();
    void thread_res_V_data_2_V_write();
    void thread_res_V_data_3_V_blk_n();
    void thread_res_V_data_3_V_din();
    void thread_res_V_data_3_V_write();
    void thread_res_V_data_4_V_blk_n();
    void thread_res_V_data_4_V_din();
    void thread_res_V_data_4_V_write();
    void thread_res_V_data_5_V_blk_n();
    void thread_res_V_data_5_V_din();
    void thread_res_V_data_5_V_write();
    void thread_res_V_data_6_V_blk_n();
    void thread_res_V_data_6_V_din();
    void thread_res_V_data_6_V_write();
    void thread_res_V_data_7_V_blk_n();
    void thread_res_V_data_7_V_din();
    void thread_res_V_data_7_V_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
