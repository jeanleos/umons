// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _normalize_array_ap_fixed_4u_array_ap_fixed_4_2_5_3_0_4u_config4_s_HH_
#define _normalize_array_ap_fixed_4u_array_ap_fixed_4_2_5_3_0_4u_config4_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct normalize_array_ap_fixed_4u_array_ap_fixed_4_2_5_3_0_4u_config4_s : public sc_module {
    // Port declarations 34
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<4> > data_V_data_0_V_dout;
    sc_in< sc_logic > data_V_data_0_V_empty_n;
    sc_out< sc_logic > data_V_data_0_V_read;
    sc_in< sc_lv<4> > data_V_data_1_V_dout;
    sc_in< sc_logic > data_V_data_1_V_empty_n;
    sc_out< sc_logic > data_V_data_1_V_read;
    sc_in< sc_lv<4> > data_V_data_2_V_dout;
    sc_in< sc_logic > data_V_data_2_V_empty_n;
    sc_out< sc_logic > data_V_data_2_V_read;
    sc_in< sc_lv<4> > data_V_data_3_V_dout;
    sc_in< sc_logic > data_V_data_3_V_empty_n;
    sc_out< sc_logic > data_V_data_3_V_read;
    sc_out< sc_lv<4> > res_V_data_0_V_din;
    sc_in< sc_logic > res_V_data_0_V_full_n;
    sc_out< sc_logic > res_V_data_0_V_write;
    sc_out< sc_lv<4> > res_V_data_1_V_din;
    sc_in< sc_logic > res_V_data_1_V_full_n;
    sc_out< sc_logic > res_V_data_1_V_write;
    sc_out< sc_lv<4> > res_V_data_2_V_din;
    sc_in< sc_logic > res_V_data_2_V_full_n;
    sc_out< sc_logic > res_V_data_2_V_write;
    sc_out< sc_lv<4> > res_V_data_3_V_din;
    sc_in< sc_logic > res_V_data_3_V_full_n;
    sc_out< sc_logic > res_V_data_3_V_write;


    // Module declarations
    normalize_array_ap_fixed_4u_array_ap_fixed_4_2_5_3_0_4u_config4_s(sc_module_name name);
    SC_HAS_PROCESS(normalize_array_ap_fixed_4u_array_ap_fixed_4_2_5_3_0_4u_config4_s);

    ~normalize_array_ap_fixed_4u_array_ap_fixed_4_2_5_3_0_4u_config4_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > data_V_data_0_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln25_reg_299;
    sc_signal< sc_logic > data_V_data_1_V_blk_n;
    sc_signal< sc_logic > data_V_data_2_V_blk_n;
    sc_signal< sc_logic > data_V_data_3_V_blk_n;
    sc_signal< sc_logic > res_V_data_0_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<1> > icmp_ln25_reg_299_pp0_iter2_reg;
    sc_signal< sc_logic > res_V_data_1_V_blk_n;
    sc_signal< sc_logic > res_V_data_2_V_blk_n;
    sc_signal< sc_logic > res_V_data_3_V_blk_n;
    sc_signal< sc_lv<13> > i_0_reg_112;
    sc_signal< sc_lv<1> > icmp_ln25_fu_123_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< sc_logic > io_acc_block_signal_op22;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< sc_logic > io_acc_block_signal_op53;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln25_reg_299_pp0_iter1_reg;
    sc_signal< sc_lv<13> > i_fu_129_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<4> > tmp_data_1_V_reg_308;
    sc_signal< sc_lv<4> > tmp_data_2_V_reg_313;
    sc_signal< sc_lv<4> > tmp_data_3_V_reg_318;
    sc_signal< sc_lv<4> > tmp_data_0_V_38_reg_323;
    sc_signal< sc_lv<4> > tmp_data_0_V_38_reg_323_pp0_iter2_reg;
    sc_signal< sc_lv<3> > trunc_ln1192_fu_175_p1;
    sc_signal< sc_lv<3> > trunc_ln1192_reg_328;
    sc_signal< sc_lv<3> > trunc_ln1192_1_fu_179_p1;
    sc_signal< sc_lv<3> > trunc_ln1192_1_reg_333;
    sc_signal< sc_lv<3> > trunc_ln1192_2_fu_183_p1;
    sc_signal< sc_lv<3> > trunc_ln1192_2_reg_338;
    sc_signal< sc_lv<4> > tmp_data_1_V_38_reg_343;
    sc_signal< sc_lv<4> > tmp_data_2_V_38_reg_348;
    sc_signal< sc_lv<4> > tmp_data_3_V_38_reg_353;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<6> > shl_ln_fu_151_p3;
    sc_signal< sc_lv<6> > sub_ln1192_fu_159_p2;
    sc_signal< sc_lv<4> > trunc_ln1192_2_fu_183_p0;
    sc_signal< sc_lv<5> > shl_ln1118_4_fu_194_p3;
    sc_signal< sc_lv<6> > shl_ln1_fu_187_p3;
    sc_signal< sc_lv<6> > sext_ln1192_fu_201_p1;
    sc_signal< sc_lv<6> > sub_ln1192_1_fu_205_p2;
    sc_signal< sc_lv<6> > add_ln1192_4_fu_211_p2;
    sc_signal< sc_lv<5> > shl_ln1118_5_fu_234_p3;
    sc_signal< sc_lv<6> > shl_ln1192_1_fu_227_p3;
    sc_signal< sc_lv<6> > sext_ln1192_4_fu_241_p1;
    sc_signal< sc_lv<6> > sub_ln1192_2_fu_245_p2;
    sc_signal< sc_lv<6> > add_ln1192_5_fu_251_p2;
    sc_signal< sc_lv<6> > sext_ln1192_5_fu_267_p1;
    sc_signal< sc_lv<6> > p_shl_fu_270_p3;
    sc_signal< sc_lv<6> > sub_ln1192_3_fu_277_p2;
    sc_signal< sc_lv<6> > add_ln1192_6_fu_283_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<13> ap_const_lv13_1000;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<6> ap_const_lv6_34;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<6> ap_const_lv6_2C;
    static const sc_lv<6> ap_const_lv6_24;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1192_4_fu_211_p2();
    void thread_add_ln1192_5_fu_251_p2();
    void thread_add_ln1192_6_fu_283_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_data_V_data_0_V_blk_n();
    void thread_data_V_data_0_V_read();
    void thread_data_V_data_1_V_blk_n();
    void thread_data_V_data_1_V_read();
    void thread_data_V_data_2_V_blk_n();
    void thread_data_V_data_2_V_read();
    void thread_data_V_data_3_V_blk_n();
    void thread_data_V_data_3_V_read();
    void thread_i_fu_129_p2();
    void thread_icmp_ln25_fu_123_p2();
    void thread_internal_ap_ready();
    void thread_io_acc_block_signal_op22();
    void thread_io_acc_block_signal_op53();
    void thread_p_shl_fu_270_p3();
    void thread_real_start();
    void thread_res_V_data_0_V_blk_n();
    void thread_res_V_data_0_V_din();
    void thread_res_V_data_0_V_write();
    void thread_res_V_data_1_V_blk_n();
    void thread_res_V_data_1_V_din();
    void thread_res_V_data_1_V_write();
    void thread_res_V_data_2_V_blk_n();
    void thread_res_V_data_2_V_din();
    void thread_res_V_data_2_V_write();
    void thread_res_V_data_3_V_blk_n();
    void thread_res_V_data_3_V_din();
    void thread_res_V_data_3_V_write();
    void thread_sext_ln1192_4_fu_241_p1();
    void thread_sext_ln1192_5_fu_267_p1();
    void thread_sext_ln1192_fu_201_p1();
    void thread_shl_ln1118_4_fu_194_p3();
    void thread_shl_ln1118_5_fu_234_p3();
    void thread_shl_ln1192_1_fu_227_p3();
    void thread_shl_ln1_fu_187_p3();
    void thread_shl_ln_fu_151_p3();
    void thread_start_out();
    void thread_start_write();
    void thread_sub_ln1192_1_fu_205_p2();
    void thread_sub_ln1192_2_fu_245_p2();
    void thread_sub_ln1192_3_fu_277_p2();
    void thread_sub_ln1192_fu_159_p2();
    void thread_trunc_ln1192_1_fu_179_p1();
    void thread_trunc_ln1192_2_fu_183_p0();
    void thread_trunc_ln1192_2_fu_183_p1();
    void thread_trunc_ln1192_fu_175_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
