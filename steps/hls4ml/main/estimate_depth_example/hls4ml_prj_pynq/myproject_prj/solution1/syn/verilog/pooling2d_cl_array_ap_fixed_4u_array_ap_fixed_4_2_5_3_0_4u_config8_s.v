// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_4_2_5_3_0_4u_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [3:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [3:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [3:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [3:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [3:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [3:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [3:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [3:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX;
reg   [31:0] sX;
reg   [31:0] pY;
reg   [31:0] sY;
reg   [3:0] kernel_data_V_7_4;
reg   [3:0] kernel_data_V_7_5;
reg   [3:0] kernel_data_V_7_6;
reg   [3:0] kernel_data_V_7_7;
reg   [3:0] kernel_data_V_7_12;
reg   [3:0] kernel_data_V_7_13;
reg   [3:0] kernel_data_V_7_14;
reg   [3:0] kernel_data_V_7_15;
reg    line_buffer_Array_V_7_0_0_ce0;
reg    line_buffer_Array_V_7_0_0_we0;
wire   [3:0] line_buffer_Array_V_7_0_0_q0;
reg    line_buffer_Array_V_7_0_1_ce0;
reg    line_buffer_Array_V_7_0_1_we0;
wire   [3:0] line_buffer_Array_V_7_0_1_q0;
reg    line_buffer_Array_V_7_0_2_ce0;
reg    line_buffer_Array_V_7_0_2_we0;
wire   [3:0] line_buffer_Array_V_7_0_2_q0;
reg    line_buffer_Array_V_7_0_3_ce0;
reg    line_buffer_Array_V_7_0_3_we0;
wire   [3:0] line_buffer_Array_V_7_0_3_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln241_reg_693;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] and_ln191_2_reg_766;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [12:0] indvar_flatten_reg_140;
wire   [0:0] icmp_ln241_fu_162_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [12:0] add_ln241_fu_168_p2;
reg   [12:0] add_ln241_reg_697;
reg   [3:0] pool_window_3_V_reg_702;
wire    io_acc_block_signal_op20;
reg    ap_block_state3_pp0_stage1_iter0;
wire    io_acc_block_signal_op117;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [3:0] pool_window_3_V_1_reg_710;
reg   [3:0] pool_window_3_V_2_reg_718;
reg   [3:0] pool_window_3_V_3_reg_726;
reg   [3:0] pool_window_1_V_reg_734;
reg   [3:0] pool_window_1_V_1_reg_742;
reg   [3:0] pool_window_1_V_2_reg_750;
reg   [3:0] pool_window_1_V_3_reg_758;
wire   [0:0] and_ln191_2_fu_282_p2;
wire   [0:0] icmp_ln212_fu_288_p2;
reg   [0:0] icmp_ln212_reg_770;
wire   [31:0] select_ln227_fu_312_p3;
reg   [31:0] select_ln227_reg_774;
wire   [0:0] icmp_ln216_fu_332_p2;
reg   [0:0] icmp_ln216_reg_779;
wire   [31:0] select_ln222_fu_356_p3;
reg   [31:0] select_ln222_reg_783;
reg   [3:0] pool_window_0_V_reg_788;
reg   [3:0] pool_window_0_V_1_reg_793;
reg   [3:0] pool_window_0_V_2_reg_798;
reg   [3:0] pool_window_0_V_3_reg_803;
reg   [3:0] pool_window_2_V_reg_808;
reg   [3:0] pool_window_2_V_1_reg_813;
reg   [3:0] pool_window_2_V_2_reg_818;
reg   [3:0] pool_window_2_V_3_reg_823;
wire   [1:0] select_ln66_3_fu_478_p3;
reg   [1:0] select_ln66_3_reg_828;
wire   [1:0] select_ln66_7_fu_528_p3;
reg   [1:0] select_ln66_7_reg_833;
wire   [1:0] select_ln66_11_fu_578_p3;
reg   [1:0] select_ln66_11_reg_838;
wire   [1:0] select_ln66_15_fu_628_p3;
reg   [1:0] select_ln66_15_reg_843;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [12:0] ap_phi_mux_indvar_flatten_phi_fu_144_p4;
wire    ap_block_pp0_stage0;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_151;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_151;
wire   [31:0] add_ln225_fu_294_p2;
wire   [31:0] add_ln220_fu_338_p2;
reg   [31:0] ap_sig_allocacmp_sY_load;
wire   [3:0] tmp_data_0_V_fu_647_p6;
reg    ap_block_pp0_stage1_01001;
wire   [3:0] tmp_data_1_V_fu_657_p6;
wire   [3:0] tmp_data_2_V_fu_667_p6;
wire   [3:0] tmp_data_3_V_fu_677_p6;
wire   [0:0] icmp_ln191_fu_234_p2;
wire   [0:0] icmp_ln191_1_fu_244_p2;
wire   [0:0] icmp_ln191_2_fu_254_p2;
wire   [0:0] icmp_ln191_3_fu_264_p2;
wire   [0:0] and_ln191_1_fu_276_p2;
wire   [0:0] and_ln191_fu_270_p2;
wire   [31:0] add_ln227_fu_306_p2;
wire   [31:0] add_ln222_fu_350_p2;
wire   [0:0] icmp_ln1496_fu_436_p2;
wire   [0:0] icmp_ln1496_1_fu_448_p2;
wire   [3:0] select_ln66_fu_441_p3;
wire   [3:0] select_ln66_2_fu_461_p3;
wire   [0:0] icmp_ln1496_2_fu_468_p2;
wire   [1:0] select_ln66_1_fu_453_p3;
wire   [1:0] zext_ln66_fu_474_p1;
wire   [0:0] icmp_ln1496_4_fu_486_p2;
wire   [0:0] icmp_ln1496_5_fu_498_p2;
wire   [3:0] select_ln66_4_fu_491_p3;
wire   [3:0] select_ln66_6_fu_511_p3;
wire   [0:0] icmp_ln1496_6_fu_518_p2;
wire   [1:0] select_ln66_5_fu_503_p3;
wire   [1:0] zext_ln66_1_fu_524_p1;
wire   [0:0] icmp_ln1496_7_fu_536_p2;
wire   [0:0] icmp_ln1496_8_fu_548_p2;
wire   [3:0] select_ln66_8_fu_541_p3;
wire   [3:0] select_ln66_10_fu_561_p3;
wire   [0:0] icmp_ln1496_9_fu_568_p2;
wire   [1:0] select_ln66_9_fu_553_p3;
wire   [1:0] zext_ln66_2_fu_574_p1;
wire   [0:0] icmp_ln1496_3_fu_586_p2;
wire   [0:0] icmp_ln1496_10_fu_598_p2;
wire   [3:0] select_ln66_12_fu_591_p3;
wire   [3:0] select_ln66_14_fu_611_p3;
wire   [0:0] icmp_ln1496_11_fu_618_p2;
wire   [1:0] select_ln66_13_fu_603_p3;
wire   [1:0] zext_ln66_3_fu_624_p1;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_322;
reg    ap_condition_633;
reg    ap_condition_637;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 pX = 32'd0;
#0 sX = 32'd0;
#0 pY = 32'd0;
#0 sY = 32'd0;
#0 kernel_data_V_7_4 = 4'd0;
#0 kernel_data_V_7_5 = 4'd0;
#0 kernel_data_V_7_6 = 4'd0;
#0 kernel_data_V_7_7 = 4'd0;
#0 kernel_data_V_7_12 = 4'd0;
#0 kernel_data_V_7_13 = 4'd0;
#0 kernel_data_V_7_14 = 4'd0;
#0 kernel_data_V_7_15 = 4'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_4_2_5_3_0_4u_config8_s_line_bufpcA #(
    .DataWidth( 4 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
line_buffer_Array_V_7_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(line_buffer_Array_V_7_0_0_ce0),
    .we0(line_buffer_Array_V_7_0_0_we0),
    .d0(data_V_data_0_V_dout),
    .q0(line_buffer_Array_V_7_0_0_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_4_2_5_3_0_4u_config8_s_line_bufpcA #(
    .DataWidth( 4 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
line_buffer_Array_V_7_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(line_buffer_Array_V_7_0_1_ce0),
    .we0(line_buffer_Array_V_7_0_1_we0),
    .d0(data_V_data_1_V_dout),
    .q0(line_buffer_Array_V_7_0_1_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_4_2_5_3_0_4u_config8_s_line_bufpcA #(
    .DataWidth( 4 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
line_buffer_Array_V_7_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(line_buffer_Array_V_7_0_2_ce0),
    .we0(line_buffer_Array_V_7_0_2_we0),
    .d0(data_V_data_2_V_dout),
    .q0(line_buffer_Array_V_7_0_2_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_4_2_5_3_0_4u_config8_s_line_bufpcA #(
    .DataWidth( 4 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
line_buffer_Array_V_7_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(line_buffer_Array_V_7_0_3_ce0),
    .we0(line_buffer_Array_V_7_0_3_we0),
    .d0(data_V_data_3_V_dout),
    .q0(line_buffer_Array_V_7_0_3_q0)
);

myproject_axi_mux_42_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .din3_WIDTH( 4 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 4 ))
myproject_axi_mux_42_4_1_1_U213(
    .din0(pool_window_0_V_reg_788),
    .din1(pool_window_1_V_reg_734),
    .din2(pool_window_2_V_reg_808),
    .din3(pool_window_3_V_reg_702),
    .din4(select_ln66_3_reg_828),
    .dout(tmp_data_0_V_fu_647_p6)
);

myproject_axi_mux_42_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .din3_WIDTH( 4 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 4 ))
myproject_axi_mux_42_4_1_1_U214(
    .din0(pool_window_0_V_1_reg_793),
    .din1(pool_window_1_V_1_reg_742),
    .din2(pool_window_2_V_1_reg_813),
    .din3(pool_window_3_V_1_reg_710),
    .din4(select_ln66_7_reg_833),
    .dout(tmp_data_1_V_fu_657_p6)
);

myproject_axi_mux_42_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .din3_WIDTH( 4 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 4 ))
myproject_axi_mux_42_4_1_1_U215(
    .din0(pool_window_0_V_2_reg_798),
    .din1(pool_window_1_V_2_reg_750),
    .din2(pool_window_2_V_2_reg_818),
    .din3(pool_window_3_V_2_reg_718),
    .din4(select_ln66_11_reg_838),
    .dout(tmp_data_2_V_fu_667_p6)
);

myproject_axi_mux_42_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .din3_WIDTH( 4 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 4 ))
myproject_axi_mux_42_4_1_1_U216(
    .din0(pool_window_0_V_3_reg_803),
    .din1(pool_window_1_V_3_reg_758),
    .din2(pool_window_2_V_3_reg_823),
    .din3(pool_window_3_V_3_reg_726),
    .din4(select_ln66_15_reg_843),
    .dout(tmp_data_3_V_fu_677_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln216_reg_779 == 1'd1) & (icmp_ln212_reg_770 == 1'd1) & (icmp_ln241_reg_693 == 1'd0))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_151 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_reg_770 == 1'd1) & (icmp_ln216_reg_779 == 1'd0) & (icmp_ln241_reg_693 == 1'd0))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_151 <= select_ln222_reg_783;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_151 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_151;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_693 == 1'd0))) begin
        indvar_flatten_reg_140 <= add_ln241_reg_697;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_140 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_322)) begin
        if ((icmp_ln212_fu_288_p2 == 1'd1)) begin
            pX <= 32'd0;
        end else if ((icmp_ln212_fu_288_p2 == 1'd0)) begin
            pX <= add_ln225_fu_294_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((icmp_ln241_reg_693 == 1'd0)) begin
        if ((1'b1 == ap_condition_637)) begin
            pY <= 32'd0;
        end else if ((1'b1 == ap_condition_633)) begin
            pY <= add_ln220_fu_338_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_reg_770 == 1'd0))) begin
        sX <= select_ln227_reg_774;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_fu_288_p2 == 1'd1) & (icmp_ln241_reg_693 == 1'd0))) begin
        sX <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln241_reg_697 <= add_ln241_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_693 == 1'd0))) begin
        and_ln191_2_reg_766 <= and_ln191_2_fu_282_p2;
        icmp_ln212_reg_770 <= icmp_ln212_fu_288_p2;
        pool_window_1_V_1_reg_742 <= line_buffer_Array_V_7_0_1_q0;
        pool_window_1_V_2_reg_750 <= line_buffer_Array_V_7_0_2_q0;
        pool_window_1_V_3_reg_758 <= line_buffer_Array_V_7_0_3_q0;
        pool_window_1_V_reg_734 <= line_buffer_Array_V_7_0_0_q0;
        pool_window_3_V_1_reg_710 <= data_V_data_1_V_dout;
        pool_window_3_V_2_reg_718 <= data_V_data_2_V_dout;
        pool_window_3_V_3_reg_726 <= data_V_data_3_V_dout;
        pool_window_3_V_reg_702 <= data_V_data_0_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_fu_288_p2 == 1'd1) & (icmp_ln241_reg_693 == 1'd0))) begin
        icmp_ln216_reg_779 <= icmp_ln216_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln241_reg_693 <= icmp_ln241_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_693 == 1'd0))) begin
        kernel_data_V_7_12 <= pool_window_3_V_reg_702;
        kernel_data_V_7_13 <= pool_window_3_V_1_reg_710;
        kernel_data_V_7_14 <= pool_window_3_V_2_reg_718;
        kernel_data_V_7_15 <= pool_window_3_V_3_reg_726;
        kernel_data_V_7_4 <= pool_window_1_V_reg_734;
        kernel_data_V_7_5 <= pool_window_1_V_1_reg_742;
        kernel_data_V_7_6 <= pool_window_1_V_2_reg_750;
        kernel_data_V_7_7 <= pool_window_1_V_3_reg_758;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_693 == 1'd0))) begin
        pool_window_0_V_1_reg_793 <= kernel_data_V_7_5;
        pool_window_0_V_2_reg_798 <= kernel_data_V_7_6;
        pool_window_0_V_3_reg_803 <= kernel_data_V_7_7;
        pool_window_0_V_reg_788 <= kernel_data_V_7_4;
        pool_window_2_V_1_reg_813 <= kernel_data_V_7_13;
        pool_window_2_V_2_reg_818 <= kernel_data_V_7_14;
        pool_window_2_V_3_reg_823 <= kernel_data_V_7_15;
        pool_window_2_V_reg_808 <= kernel_data_V_7_12;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_reg_770 == 1'd1))) begin
        sY <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_151;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_fu_288_p2 == 1'd1) & (icmp_ln216_fu_332_p2 == 1'd0) & (icmp_ln241_reg_693 == 1'd0))) begin
        select_ln222_reg_783 <= select_ln222_fu_356_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_fu_288_p2 == 1'd0) & (icmp_ln241_reg_693 == 1'd0))) begin
        select_ln227_reg_774 <= select_ln227_fu_312_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_766))) begin
        select_ln66_11_reg_838 <= select_ln66_11_fu_578_p3;
        select_ln66_15_reg_843 <= select_ln66_15_fu_628_p3;
        select_ln66_3_reg_828 <= select_ln66_3_fu_478_p3;
        select_ln66_7_reg_833 <= select_ln66_7_fu_528_p3;
    end
end

always @ (*) begin
    if ((icmp_ln241_fu_162_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln241_reg_693 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_144_p4 = add_ln241_reg_697;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_144_p4 = indvar_flatten_reg_140;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln212_reg_770 == 1'd1) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_sig_allocacmp_sY_load = ap_phi_reg_pp0_iter1_storemerge_i_i_reg_151;
    end else begin
        ap_sig_allocacmp_sY_load = sY;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln241_reg_693 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_693 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln241_reg_693 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_693 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln241_reg_693 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_693 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln241_reg_693 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_693 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_693 == 1'd0))) begin
        line_buffer_Array_V_7_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_693 == 1'd0))) begin
        line_buffer_Array_V_7_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_693 == 1'd0))) begin
        line_buffer_Array_V_7_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_693 == 1'd0))) begin
        line_buffer_Array_V_7_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_693 == 1'd0))) begin
        line_buffer_Array_V_7_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_693 == 1'd0))) begin
        line_buffer_Array_V_7_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_693 == 1'd0))) begin
        line_buffer_Array_V_7_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_693 == 1'd0))) begin
        line_buffer_Array_V_7_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_7_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln191_2_reg_766) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_766))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln191_2_reg_766) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_766))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln191_2_reg_766) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_766))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln191_2_reg_766) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_766))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_fu_162_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_fu_162_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_338_p2 = (pY + 32'd1);

assign add_ln222_fu_350_p2 = (ap_sig_allocacmp_sY_load + 32'd1);

assign add_ln225_fu_294_p2 = (pX + 32'd1);

assign add_ln227_fu_306_p2 = (sX + 32'd1);

assign add_ln241_fu_168_p2 = (ap_phi_mux_indvar_flatten_phi_fu_144_p4 + 13'd1);

assign and_ln191_1_fu_276_p2 = (icmp_ln191_3_fu_264_p2 & icmp_ln191_2_fu_254_p2);

assign and_ln191_2_fu_282_p2 = (and_ln191_fu_270_p2 & and_ln191_1_fu_276_p2);

assign and_ln191_fu_270_p2 = (icmp_ln191_fu_234_p2 & icmp_ln191_1_fu_244_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((io_acc_block_signal_op117 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln191_2_reg_766)) | ((io_acc_block_signal_op20 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_reg_693 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((io_acc_block_signal_op117 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln191_2_reg_766)) | ((io_acc_block_signal_op20 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_reg_693 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((io_acc_block_signal_op117 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln191_2_reg_766)) | ((io_acc_block_signal_op20 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_reg_693 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((io_acc_block_signal_op20 == 1'b0) & (icmp_ln241_reg_693 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((io_acc_block_signal_op117 == 1'b0) & (1'd1 == and_ln191_2_reg_766));
end

always @ (*) begin
    ap_condition_322 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_693 == 1'd0));
end

always @ (*) begin
    ap_condition_633 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_fu_288_p2 == 1'd1) & (icmp_ln216_fu_332_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_637 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln216_reg_779 == 1'd1) & (icmp_ln212_reg_770 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_151 = 'bx;

assign ap_ready = internal_ap_ready;

assign icmp_ln1496_10_fu_598_p2 = (($signed(kernel_data_V_7_15) < $signed(pool_window_3_V_3_reg_726)) ? 1'b1 : 1'b0);

assign icmp_ln1496_11_fu_618_p2 = (($signed(select_ln66_12_fu_591_p3) < $signed(select_ln66_14_fu_611_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_1_fu_448_p2 = (($signed(kernel_data_V_7_12) < $signed(pool_window_3_V_reg_702)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_468_p2 = (($signed(select_ln66_fu_441_p3) < $signed(select_ln66_2_fu_461_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_586_p2 = (($signed(kernel_data_V_7_7) < $signed(pool_window_1_V_3_reg_758)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_486_p2 = (($signed(kernel_data_V_7_5) < $signed(pool_window_1_V_1_reg_742)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_498_p2 = (($signed(kernel_data_V_7_13) < $signed(pool_window_3_V_1_reg_710)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_518_p2 = (($signed(select_ln66_4_fu_491_p3) < $signed(select_ln66_6_fu_511_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_536_p2 = (($signed(kernel_data_V_7_6) < $signed(pool_window_1_V_2_reg_750)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_548_p2 = (($signed(kernel_data_V_7_14) < $signed(pool_window_3_V_2_reg_718)) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_568_p2 = (($signed(select_ln66_8_fu_541_p3) < $signed(select_ln66_10_fu_561_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_436_p2 = (($signed(kernel_data_V_7_4) < $signed(pool_window_1_V_reg_734)) ? 1'b1 : 1'b0);

assign icmp_ln191_1_fu_244_p2 = ((ap_sig_allocacmp_sY_load == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln191_2_fu_254_p2 = (($signed(pY) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_3_fu_264_p2 = (($signed(pX) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_234_p2 = ((sX == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_288_p2 = ((pX == 32'd63) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_332_p2 = ((pY == 32'd63) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_162_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_144_p4 == 13'd4096) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op117 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op20 = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign res_V_data_0_V_din = tmp_data_0_V_fu_647_p6;

assign res_V_data_1_V_din = tmp_data_1_V_fu_657_p6;

assign res_V_data_2_V_din = tmp_data_2_V_fu_667_p6;

assign res_V_data_3_V_din = tmp_data_3_V_fu_677_p6;

assign select_ln222_fu_356_p3 = ((icmp_ln191_1_fu_244_p2[0:0] === 1'b1) ? 32'd0 : add_ln222_fu_350_p2);

assign select_ln227_fu_312_p3 = ((icmp_ln191_fu_234_p2[0:0] === 1'b1) ? 32'd0 : add_ln227_fu_306_p2);

assign select_ln66_10_fu_561_p3 = ((icmp_ln1496_8_fu_548_p2[0:0] === 1'b1) ? pool_window_3_V_2_reg_718 : kernel_data_V_7_14);

assign select_ln66_11_fu_578_p3 = ((icmp_ln1496_9_fu_568_p2[0:0] === 1'b1) ? select_ln66_9_fu_553_p3 : zext_ln66_2_fu_574_p1);

assign select_ln66_12_fu_591_p3 = ((icmp_ln1496_3_fu_586_p2[0:0] === 1'b1) ? pool_window_1_V_3_reg_758 : kernel_data_V_7_7);

assign select_ln66_13_fu_603_p3 = ((icmp_ln1496_10_fu_598_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln66_14_fu_611_p3 = ((icmp_ln1496_10_fu_598_p2[0:0] === 1'b1) ? pool_window_3_V_3_reg_726 : kernel_data_V_7_15);

assign select_ln66_15_fu_628_p3 = ((icmp_ln1496_11_fu_618_p2[0:0] === 1'b1) ? select_ln66_13_fu_603_p3 : zext_ln66_3_fu_624_p1);

assign select_ln66_1_fu_453_p3 = ((icmp_ln1496_1_fu_448_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln66_2_fu_461_p3 = ((icmp_ln1496_1_fu_448_p2[0:0] === 1'b1) ? pool_window_3_V_reg_702 : kernel_data_V_7_12);

assign select_ln66_3_fu_478_p3 = ((icmp_ln1496_2_fu_468_p2[0:0] === 1'b1) ? select_ln66_1_fu_453_p3 : zext_ln66_fu_474_p1);

assign select_ln66_4_fu_491_p3 = ((icmp_ln1496_4_fu_486_p2[0:0] === 1'b1) ? pool_window_1_V_1_reg_742 : kernel_data_V_7_5);

assign select_ln66_5_fu_503_p3 = ((icmp_ln1496_5_fu_498_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln66_6_fu_511_p3 = ((icmp_ln1496_5_fu_498_p2[0:0] === 1'b1) ? pool_window_3_V_1_reg_710 : kernel_data_V_7_13);

assign select_ln66_7_fu_528_p3 = ((icmp_ln1496_6_fu_518_p2[0:0] === 1'b1) ? select_ln66_5_fu_503_p3 : zext_ln66_1_fu_524_p1);

assign select_ln66_8_fu_541_p3 = ((icmp_ln1496_7_fu_536_p2[0:0] === 1'b1) ? pool_window_1_V_2_reg_750 : kernel_data_V_7_6);

assign select_ln66_9_fu_553_p3 = ((icmp_ln1496_8_fu_548_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln66_fu_441_p3 = ((icmp_ln1496_fu_436_p2[0:0] === 1'b1) ? pool_window_1_V_reg_734 : kernel_data_V_7_4);

assign start_out = real_start;

assign zext_ln66_1_fu_524_p1 = icmp_ln1496_4_fu_486_p2;

assign zext_ln66_2_fu_574_p1 = icmp_ln1496_7_fu_536_p2;

assign zext_ln66_3_fu_624_p1 = icmp_ln1496_3_fu_586_p2;

assign zext_ln66_fu_474_p1 = icmp_ln1496_fu_436_p2;

endmodule //pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_4_2_5_3_0_4u_config8_s
